{"created": 1757395266.4010313, "duration": 82.54823017120361, "exitcode": 1, "root": "C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay", "environment": {}, "summary": {"failed": 2, "total": 2, "collected": 2}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/test_Bay_stock_history.py", "type": "Module"}]}, {"nodeid": "tests/test_Bay_stock_history.py", "outcome": "passed", "result": [{"nodeid": "tests/test_Bay_stock_history.py::test_inflow_past", "type": "Function", "lineno": 62}, {"nodeid": "tests/test_Bay_stock_history.py::test_stock_bulk_edit", "type": "Function", "lineno": 183}]}], "tests": [{"nodeid": "tests/test_Bay_stock_history.py::test_inflow_past", "lineno": 62, "outcome": "failed", "keywords": ["test_inflow_past", "test_Bay_stock_history.py", "tests", "Bay", ""], "setup": {"duration": 0.7328651000279933, "outcome": "passed"}, "call": {"duration": 51.507234500022605, "outcome": "failed", "crash": {"path": "C:\\Users\\kjeon\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py", "lineno": 528, "message": "playwright._impl._errors.TimeoutError: Locator.click: Timeout 30000ms exceeded.\nCall log:\n  - waiting for locator(\"data-testid=drop_prdname_item\").filter(has_text=\"\ub4f1\ub85d\ud14c\uc2a4\ud2b8_0909_02TestProduct_0909_02\")"}, "traceback": [{"path": "tests\\test_Bay_stock_history.py", "lineno": 92, "message": ""}, {"path": "helpers\\stock_utils.py", "lineno": 48, "message": "in register_stock_for_date"}, {"path": "..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py", "lineno": 15464, "message": "in click"}, {"path": "..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_locator.py", "lineno": 156, "message": "in click"}, {"path": "..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py", "lineno": 488, "message": "in click"}, {"path": "..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py", "lineno": 61, "message": "in send"}, {"path": "..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py", "lineno": 528, "message": "TimeoutError"}], "stdout": "\uc7ac\uace0\ub7c9 : 0, \uc81c\ud488\uba85 : \ub4f1\ub85d\ud14c\uc2a4\ud2b8_0909_02TestProduct_0909_02\n", "longrepr": "page = <Page url='https://stg.bay.centurion.ai.kr/stocks/add'>\n\n    def test_inflow_past(page):\n        bay_login(page, \"jekwon\")\n        page.goto(URLS[\"bay_stock\"])\n        page.wait_for_timeout(2000)\n    \n        search_name = get_manual_product()\n    \n        page.locator(\"data-testid=input_search\").fill(search_name)\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_search\").click()\n        page.wait_for_timeout(1000)\n    \n        product_column = page.locator(\"table tbody tr\").first.locator(\"td\").nth(3)\n        stock_column = page.locator(\"table tbody tr\").first.locator(\"td\").nth(5)\n        stock_text = stock_column.text_content().strip()\n        product_name = product_column.locator(\"div\").first.text_content().strip()\n        current_stock = int(stock_text)\n        print(f\"\uc7ac\uace0\ub7c9 : {stock_text}, \uc81c\ud488\uba85 : {product_name}\")\n        yesterday_memo = \"\uc5b4\uc81c \ub0a0\uc9dc \uc785\uace0 \ud655\uc778 \ud14c\uc2a4\ud2b8\"\n        day_before_memo = \"\uadf8\uc81c \ub0a0\uc9dc \uc785\uace0 \ud655\uc778 \ud14c\uc2a4\ud2b8\"\n        today_memo = \"30\uc790\uae4c\uc9c0 \uc81c\ud55c\uc778\ub370\uc694. \ucd5c\ub300\uae00\uc790\uc218 \uaf49\uaf49\ucc44\uc6cc\uc11c \ub4f1\ub85d\ud569\ub2c8\ub2e4\"\n        yesterday = datetime.today() - timedelta(days=1)\n        day_before = datetime.today() - timedelta(days=2)\n        today_str = \"\uae08\uc77c \uc7ac\uace0 \ud604\ud669\"\n        yesterday_str = yesterday.strftime(\"%Y. %m. %d\")\n        day_before_str = day_before.strftime(\"%Y. %m. %d\")\n    \n        page.wait_for_timeout(2000)\n        # \ub450 \ub0a0\uc9dc\uc5d0 \ub300\ud574 \uac01\uac01 \ub4f1\ub85d\n>       register_stock_for_date(page, yesterday, product_name, current_stock, yesterday_memo)  # \uc774\uc804 \ub4f1\ub85d \ubc18\uc601\n\ntests\\test_Bay_stock_history.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nhelpers\\stock_utils.py:48: in register_stock_for_date\n    page.locator(\"data-testid=drop_prdname_item\", has_text=product_name).click()\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:15464: in click\n    self._sync(\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_locator.py:156: in click\n    return await self._frame.click(self._selector, strict=True, **params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:488: in click\n    await self._channel.send(\"click\", locals_to_params(locals()))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x000002097FBC42F0>\ncb = <function Channel.send.<locals>.<lambda> at 0x0000020969289F80>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.click: Timeout 30000ms exceeded.\nE           Call log:\nE             - waiting for locator(\"data-testid=drop_prdname_item\").filter(has_text=\"\ub4f1\ub85d\ud14c\uc2a4\ud2b8_0909_02TestProduct_0909_02\")\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError"}, "teardown": {"duration": 0.028193900012411177, "outcome": "passed"}}, {"nodeid": "tests/test_Bay_stock_history.py::test_stock_bulk_edit", "lineno": 183, "outcome": "failed", "keywords": ["test_stock_bulk_edit", "test_Bay_stock_history.py", "tests", "Bay", ""], "setup": {"duration": 0.08391510008368641, "outcome": "passed"}, "call": {"duration": 28.782742899958976, "outcome": "failed", "crash": {"path": "C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\\tests\\test_Bay_stock_history.py", "lineno": 290, "message": "AssertionError: \ubcc0\uacbd \uc774\ub825 \ubd88\uc77c\uce58: 2025. 09. 09 14:21 != 2025. 09. 09 14:20\nassert '2025. 09. 09 14:21' == '2025. 09. 09 14:20'\n  \n  - 2025. 09. 09 14:20\n  ?                  ^\n  + 2025. 09. 09 14:21\n  ?                  ^"}, "traceback": [{"path": "tests\\test_Bay_stock_history.py", "lineno": 290, "message": "AssertionError"}], "stdout": "\uccab\ubc88\uc9f8 \ud56d\ubaa9 \uae30\uc874 \uc785\uace0\ub7c9 : 0, \ub450\ubc88\uc9f8 \ud56d\ubaa9 \uae30\uc874 \uc785\uace0\ub7c9: 0\n", "longrepr": "page = <Page url='https://stg.bay.centurion.ai.kr/stocks/4869'>\n\n    def test_stock_bulk_edit(page:Page):\n        bay_login(page, \"jekwon\")\n        page.goto(URLS[\"bay_stock\"])\n        page.wait_for_timeout(2000)\n        inflow = 25\n        new_inflow = 15\n        txt_bulk = \"2\uac1c\uc758 \uc7ac\uace0 \uc785\uace0\uac00 \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\"\n        txt_edit = \"\uc7ac\uace0 \uc785\uace0\uac00 \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\"\n    \n        search_name = f\"\uc5d1\uc140\uc5c5\ub85c\ub4dc_{mmdd}\"\n        page.locator(\"data-testid=input_search\").fill(search_name)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_search\").click()\n        page.wait_for_timeout(1000)\n    \n        row1 = page.locator(\"table tbody tr\").first\n        row2 = page.locator(\"table tbody tr\").nth(1)\n        checkbox1 = row1.locator(\"td\").first\n        checkbox2 = row2.locator(\"td\").first\n        product_column1 = row1.locator(\"td\").nth(3)\n        product_column2 = row2.locator(\"td\").nth(3)\n        stock_column1 = row1.locator(\"td\").nth(5)\n        stock_column2 = row2.locator(\"td\").nth(5)\n        stock_text1 = stock_column1.text_content().strip()\n        stock_text2 = stock_column2.text_content().strip()\n        product_name1 = product_column1.locator(\"div\").first.text_content().strip()\n        product_name2 = product_column2.locator(\"div\").first.text_content().strip()\n    \n        # \uc7ac\uace0 2\uac1c \uc77c\uad04 \uc218\uc815(2\uac1c \ubaa8\ub450) \ud6c4 \uc0c1\uc138 \ub0b4\uc5ed(2\uac1c \ubaa8\ub450) \ud655\uc778\n        page.locator(\"data-testid=btn_edit_bulk\").click()\n        expect(page.locator(\"data-testid=toast_select_stock\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(1000)\n        legacy1 = row1.locator(\"td\").nth(6).locator(\"div\")\n        inflow_legacy1 = legacy1.text_content().strip()\n        legacy2 = row2.locator(\"td\").nth(6).locator(\"div\")\n        inflow_legacy2 = legacy2.text_content().strip()\n        checkbox1.click()\n        checkbox2.click()\n        page.locator(\"data-testid=btn_edit_bulk\").click()\n        page.wait_for_timeout(1000)\n        print(f\"\uccab\ubc88\uc9f8 \ud56d\ubaa9 \uae30\uc874 \uc785\uace0\ub7c9 : {inflow_legacy1}, \ub450\ubc88\uc9f8 \ud56d\ubaa9 \uae30\uc874 \uc785\uace0\ub7c9: {inflow_legacy2}\")\n        input_field1 = row1.locator(\"td\").nth(6).locator(\"input\")\n        input_field2 = row2.locator(\"td\").nth(6).locator(\"input\")\n    \n        input_field1.fill(str(inflow))\n        page.wait_for_timeout(500)\n        input_field2.fill(str(inflow))\n        page.wait_for_timeout(500)\n        change1 = datetime.now()\n        page.locator(\"data-testid=btn_edit_bulk\").click()\n        expect(page.locator(\"data-testid=toast_inflow\")).to_have_text(txt_bulk, timeout=7000)\n        page.wait_for_timeout(1000)\n    \n        # \uccab\ubc88\uc9f8 \uc7ac\uace0 \uc0c1\uc138 \uc9c4\uc785\n        first_history = row1.locator(\"td\").nth(3)\n        first_history.locator(\"div\").first.click()\n        page.wait_for_timeout(1000)\n        change_history1 = change1.strftime(\"%Y. %m. %d %H:%M\")\n        history1 = get_last_column_text(page, 1)\n        actual_history1 = history1.split(',')[0].strip()\n        assert change_history1 == actual_history1, f\"\ubcc0\uacbd \uc774\ub825 \ubd88\uc77c\uce58: {change_history1} != {actual_history1}\"\n        page.wait_for_timeout(1000)\n        inflow1 = int(get_table_cell_text(page, 1, 0, 3)) # \uc785\ucd9c\uace0 \uc218\ub7c9\n        assert inflow1 == inflow, f\"\uc785\uace0\ub7c9 \ubd88\uc77c\uce58 : {inflow1} != {inflow}\"\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_back\").click()\n        page.wait_for_timeout(1000)\n        # \ub450\ubc88\uc9f8 \uc7ac\uace0 \uc0c1\uc138 \uc9c4\uc785\n        second_history = row2.locator(\"td\").nth(3)\n        second_history.locator(\"div\").first.click()\n        page.wait_for_timeout(1000)\n        history2 = get_last_column_text(page, 1)\n        actual_history2 = history2.split(',')[0].strip()\n        assert change_history1 == actual_history2, f\"\ubcc0\uacbd \uc774\ub825 \ubd88\uc77c\uce58: {change_history1} != {actual_history2}\"\n        page.wait_for_timeout(1000)\n        inflow1 = int(get_table_cell_text(page, 1, 0, 3)) # \uc785\ucd9c\uace0 \uc218\ub7c9\n        assert inflow1 == inflow, f\"\uc785\uace0\ub7c9 \ubd88\uc77c\uce58 : {inflow1} != {inflow}\"\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_back\").click()\n        page.wait_for_timeout(1000)\n    \n        # \uc7ac\uace0 2\uac1c \uc77c\uad04 \uc218\uc815(1\uac1c\ub9cc \uc218\uc815) \ud6c4 \uc0c1\uc138 \ub0b4\uc5ed(2\uac1c \ubaa8\ub450) \ud655\uc778\n        page.locator(\"data-testid=btn_edit_bulk\").click()\n        expect(page.locator(\"data-testid=toast_select_stock\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(1000)\n        checkbox1.click()\n        checkbox2.click()\n        page.locator(\"data-testid=btn_edit_bulk\").click()\n        page.wait_for_timeout(1000)\n    \n        input_field1 = row1.locator(\"td\").nth(6).locator(\"input\")\n    \n        input_field1.fill(str(new_inflow))\n        page.wait_for_timeout(500)\n        change2 = datetime.now()\n        page.locator(\"data-testid=btn_edit_bulk\").click()\n        expect(page.locator(\"data-testid=toast_inflow\")).to_have_text(txt_edit, timeout=3000)\n        page.wait_for_timeout(1000)\n    \n        # \uccab\ubc88\uc9f8 \uc7ac\uace0 \uc0c1\uc138 \uc9c4\uc785\n        first_history = row1.locator(\"td\").nth(3)\n        first_history.locator(\"div\").first.click()\n        page.wait_for_timeout(1000)\n        change_history2 = change2.strftime(\"%Y. %m. %d %H:%M\")\n        history1 = get_last_column_text(page, 1)\n        actual_history1 = history1.split(',')[0].strip()\n>       assert change_history2 == actual_history1, f\"\ubcc0\uacbd \uc774\ub825 \ubd88\uc77c\uce58: {change_history2} != {actual_history1}\"\nE       AssertionError: \ubcc0\uacbd \uc774\ub825 \ubd88\uc77c\uce58: 2025. 09. 09 14:21 != 2025. 09. 09 14:20\nE       assert '2025. 09. 09 14:21' == '2025. 09. 09 14:20'\nE         \nE         - 2025. 09. 09 14:20\nE         ?                  ^\nE         + 2025. 09. 09 14:21\nE         ?                  ^\n\ntests\\test_Bay_stock_history.py:290: AssertionError"}, "teardown": {"duration": 0.14297269994858652, "outcome": "passed"}}]}