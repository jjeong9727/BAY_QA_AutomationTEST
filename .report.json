{"created": 1754979242.4834392, "duration": 233.56385040283203, "exitcode": 1, "root": "C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay", "environment": {}, "summary": {"failed": 1, "passed": 2, "total": 3, "collected": 3}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/test_Bay_order_status_batch.py", "type": "Module"}]}, {"nodeid": "tests/test_Bay_order_status_batch.py", "outcome": "passed", "result": [{"nodeid": "tests/test_Bay_order_status_batch.py::test_cancel_batch_history", "type": "Function", "lineno": 59}, {"nodeid": "tests/test_Bay_order_status_batch.py::test_receive_without_tracking", "type": "Function", "lineno": 144}, {"nodeid": "tests/test_Bay_order_status_batch.py::test_receive_with_tracking", "type": "Function", "lineno": 254}]}], "tests": [{"nodeid": "tests/test_Bay_order_status_batch.py::test_cancel_batch_history", "lineno": 59, "outcome": "failed", "keywords": ["test_cancel_batch_history", "test_Bay_order_status_batch.py", "tests", "Bay", ""], "setup": {"duration": 0.6456994999898598, "outcome": "passed"}, "call": {"duration": 47.667056500096805, "outcome": "failed", "crash": {"path": "C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\\tests\\test_Bay_order_status_batch.py", "lineno": 137, "message": "AssertionError: Locator expected to have text '\ubc1c\uc8fc \ucde8\uc18c'\nActual value: <element(s) not found> \nCall log:\n  - LocatorAssertions.to_have_text with timeout 3000ms\n  -   - waiting for locator(\"[data-testid=\\\"history\\\"]\").first.locator(\"table tbody tr\").nth(3).locator(\"td:nth-child(1)\")"}, "traceback": [{"path": "tests\\test_Bay_order_status_batch.py", "lineno": 137, "message": "AssertionError"}], "stdout": "\ud83d\udd0d \uac80\uc0c9\ub41c \uc81c\ud488\uba85: \uc790\ub3d9\ud654\uc81c\ud488_1\n\u00a0\uc678\u00a02 \uac74\n\u2705 \ucc3e\uc740 order_id: 538\norderID : 538\n\ucde8\uc18c \ub300\uc0c1 \uc81c\ud488: \uc790\ub3d9\ud654\uc81c\ud488_1 \n", "longrepr": "page = <Page url='https://stg.bay.centurion.ai.kr/orders/history?page=1&start_date=2025-08-12&end_date=2025-08-12&order_status=CANCELED&product_name=%EC%9E%90%EB%8F%99%ED%99%94%EC%A0%9C%ED%92%88_3'>\n\n    def test_cancel_batch_history(page:Page):\n    \n        bay_login(page)\n        page.goto(URLS[\"bay_orderList\"])\n        page.wait_for_timeout(2000)\n    \n        search_order_history(page, product_list[2],\"\ubc1c\uc8fc \uc694\uccad\")\n    \n        # \ub300\ud45c \ub0b4\uc5ed \ud655\uc778 \ud6c4 order_id \ucd94\ucd9c\n        products = [\"\uc790\ub3d9\ud654\uc81c\ud488_1\", \"\uc790\ub3d9\ud654\uc81c\ud488_2\", \"\uc790\ub3d9\ud654\uc81c\ud488_3\"]\n        first_history = page.locator('[data-testid=\"history\"]').first\n        rows = first_history.locator('table tbody tr')\n        order_cell = rows.nth(0).locator('td:nth-child(2)')\n        main_product_name = order_cell.inner_text()\n        order_id = get_order_id_from_order_list(page, main_product_name)\n    \n        print(f\"orderID : {order_id}\")\n        page.wait_for_timeout(1000)\n    \n        rows.nth(0).locator(\"[data-testid='btn_detail']\").click()\n        page.wait_for_timeout(1000)\n    \n        cancel_index = random.randint(1, 3)  # (2~4\ud589)\n        cancel_target = products[cancel_index - 1]\n        print(f\"\ucde8\uc18c \ub300\uc0c1 \uc81c\ud488: {cancel_target} \")\n        cancel_txt = \"\ubc1c\uc8fc\ub97c \ucde8\uc18c\ud558\uc2dc\uaca0\uc2b5\ub2c8\uae4c?\"\n    \n        # 1\uac1c\ub9cc \ucde8\uc18c \ud6c4 \uc0c1\ud0dc \ud655\uc778\n        for i, product_name in enumerate(products, start=1):  # tr 1~3 (2~4\ud589)\n            cancel_row = rows.nth(i)\n    \n            if i == cancel_index:\n                # \ud83d\udd3d \ud574\ub2f9 \ud589\uc758 \ucde8\uc18c \ubc84\ud2bc \ud074\ub9ad\n                rows.nth(i).locator('[data-testid=\"btn_order_cancel\"]').click()\n                expect(page.locator(\"data-testid=txt_cancel\")).to_have_text(cancel_txt, timeout=3000)\n    \n                page.wait_for_timeout(1000)\n                page.locator(\"data-testid=btn_confirm\").click()\n                expect(page.locator(\"data-testid=toast_cancel\")).to_be_visible(timeout=3000)\n                page.wait_for_timeout(1000)\n    \n        # \ud83d\udd0d \uc0c1\ud0dc \ud655\uc778 (\uc0c1\uc138 \ub0b4\uc5ed)\n        for i in range(1,4):  # tr index 1~3 \u21d2 2~4\ud589\n            # \ud83d\udd3d order \uc140 \uae30\uc900\uc73c\ub85c \ud574\ub2f9 tr\uc758 \uc0c1\ud0dc \uc140(td[1]) \uc811\uadfc\n            first_history = page.locator('[data-testid=\"history\"]').first\n            rows = first_history.locator('table tbody tr')\n            cancel_row = rows.nth(i)\n            status_cell = cancel_row.locator('td:nth-child(1)')\n    \n            if i == cancel_index:\n                expect(status_cell).to_have_text(\"\ubc1c\uc8fc \ucde8\uc18c\", timeout=3000)\n    \n            else:\n                expect(status_cell).to_have_text(\"\ubc1c\uc8fc \uc694\uccad\", timeout=3000)\n            page.wait_for_timeout(1000)\n    \n    \n        # \uc77c\uad04 \ucde8\uc18c \ud6c4 \uc0c1\ud0dc \ud655\uc778\n        bulk_cancel_txt = \"\ubc1c\uc8fc\ub97c \uc77c\uad04 \ucde8\uc18c\ud558\uc2dc\uaca0\uc2b5\ub2c8\uae4c?\"\n        page.locator(\"data-testid=btn_order_cancel\").nth(0).click()\n        expect(page.locator(\"data-testid=txt_cancel_bulk\")).to_have_text(bulk_cancel_txt, timeout=3000)\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_confirm\").click()\n        expect(page.locator(\"data-testid=toast_cancel_bulk\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(3000)\n    \n        page.locator(\"data-testid=btn_reset\").click()\n        page.wait_for_timeout(2000)\n    \n        search_order_history(page, product_list[2],\"\ubc1c\uc8fc \ucde8\uc18c\")\n        page.wait_for_selector(\"[data-testid='history']\", timeout=5000)\n    \n        for i in range(4):  # \u2192 1~4\ud589\n            first_history = page.locator('[data-testid=\"history\"]').first\n            rows = first_history.locator('table tbody tr')\n            order_row = rows.nth(i)\n            status_cell = order_row.locator('td:nth-child(1)')\n>           expect(status_cell).to_have_text(\"\ubc1c\uc8fc \ucde8\uc18c\", timeout=3000)\nE           AssertionError: Locator expected to have text '\ubc1c\uc8fc \ucde8\uc18c'\nE           Actual value: <element(s) not found> \nE           Call log:\nE             - LocatorAssertions.to_have_text with timeout 3000ms\nE             -   - waiting for locator(\"[data-testid=\\\"history\\\"]\").first.locator(\"table tbody tr\").nth(3).locator(\"td:nth-child(1)\")\n\ntests\\test_Bay_order_status_batch.py:137: AssertionError"}, "teardown": {"duration": 0.019937100005336106, "outcome": "passed"}}, {"nodeid": "tests/test_Bay_order_status_batch.py::test_receive_without_tracking", "lineno": 144, "outcome": "passed", "keywords": ["test_receive_without_tracking", "test_Bay_order_status_batch.py", "tests", "Bay", ""], "setup": {"duration": 0.06300910003483295, "outcome": "passed"}, "call": {"duration": 85.75248720007949, "outcome": "passed", "stdout": "\ud83d\udd0d \uac80\uc0c9\ub41c \uc81c\ud488\uba85: \uc790\ub3d9\ud654\uc81c\ud488_6\n\u00a0\uc678\u00a02 \uac74\n\u2705 \ucc3e\uc740 order_id: 537\norderID : 537\n\uc218\ub839 \ud655\uc815 \ub300\uc0c1 \uc81c\ud488: \uc790\ub3d9\ud654\uc81c\ud488_4 \n\uc0c1\ud0dc: \uc77c\ubd80 \uc218\ub839\n\uc8fc\ubb38 ID: 537\n[\ub514\ubc84\uae45] \uc6b4\uc1a1\uc7a5 \ud14d\uc2a4\ud2b8: '\ub300\uae30\uc911'\n\uc0c1\ud0dc: \uc218\ub839 \uc644\ub8cc\n\uc8fc\ubb38 ID: 537\n[\ub514\ubc84\uae45] \uc6b4\uc1a1\uc7a5 \ud14d\uc2a4\ud2b8: '\ubbf8\uc785\ub825'\n"}, "teardown": {"duration": 0.012903900002129376, "outcome": "passed"}}, {"nodeid": "tests/test_Bay_order_status_batch.py::test_receive_with_tracking", "lineno": 254, "outcome": "passed", "keywords": ["test_receive_with_tracking", "test_Bay_order_status_batch.py", "tests", "Bay", ""], "setup": {"duration": 0.06825060001574457, "outcome": "passed"}, "call": {"duration": 99.16505760001019, "outcome": "passed", "stdout": "\ud83d\udd0d \uac80\uc0c9\ub41c \uc81c\ud488\uba85: \uc790\ub3d9\ud654\uc81c\ud488_7\n\u00a0\uc678\u00a02 \uac74\n\u2705 \ucc3e\uc740 order_id: 539\norderID : 539\n\uc218\ub839 \ud655\uc815 \ub300\uc0c1 \uc81c\ud488: \uc790\ub3d9\ud654\uc81c\ud488_8 \n\uc0c1\ud0dc: \uc77c\ubd80 \uc218\ub839\n\uc8fc\ubb38 ID: 539\n\uc0c1\ud0dc: \uc218\ub839 \uc644\ub8cc\n\uc8fc\ubb38 ID: 539\n"}, "teardown": {"duration": 0.11681799998041242, "outcome": "passed"}}]}