{"created": 1752717712.5721211, "duration": 92.19957280158997, "exitcode": 1, "root": "C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay", "environment": {}, "summary": {"failed": 1, "passed": 1, "total": 2, "collected": 2}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/test_Bay_stock_history.py", "type": "Module"}]}, {"nodeid": "tests/test_Bay_stock_history.py", "outcome": "passed", "result": [{"nodeid": "tests/test_Bay_stock_history.py::test_inflow_past", "type": "Function", "lineno": 47}, {"nodeid": "tests/test_Bay_stock_history.py::test_stock_bulk_edit", "type": "Function", "lineno": 164}]}], "tests": [{"nodeid": "tests/test_Bay_stock_history.py::test_inflow_past", "lineno": 47, "outcome": "failed", "keywords": ["test_inflow_past", "test_Bay_stock_history.py", "tests", "Bay", ""], "setup": {"duration": 0.7301318999379873, "outcome": "passed"}, "call": {"duration": 51.61243400000967, "outcome": "failed", "crash": {"path": "C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\\tests\\test_Bay_stock_history.py", "lineno": 158, "message": "AssertionError: [H1] \uba54\ubaa8 \ubd88\uc77c\uce58: 2\uac1c\uc758 \uba54\ubaa8\uac00 \uc788\uc2b5\ub2c8\ub2e4. != 30\uc790\uae4c\uc9c0 \uc81c\ud55c\uc778\ub370\uc694. \ucd5c\ub300\uae00\uc790\uc218 \uaf49\uaf49\ucc44\uc6cc\uc11c \ub4f1\ub85d\ud569\ub2c8\ub2e4\nassert '2\uac1c\uc758 \uba54\ubaa8\uac00 \uc788\uc2b5\ub2c8\ub2e4.' == '30\uc790\uae4c\uc9c0 \uc81c\ud55c\uc778\ub370\uc694....\uc218 \uaf49\uaf49\ucc44\uc6cc\uc11c \ub4f1\ub85d\ud569\ub2c8\ub2e4'\n  \n  - 30\uc790\uae4c\uc9c0 \uc81c\ud55c\uc778\ub370\uc694. \ucd5c\ub300\uae00\uc790\uc218 \uaf49\uaf49\ucc44\uc6cc\uc11c \ub4f1\ub85d\ud569\ub2c8\ub2e4\n  + 2\uac1c\uc758 \uba54\ubaa8\uac00 \uc788\uc2b5\ub2c8\ub2e4."}, "traceback": [{"path": "tests\\test_Bay_stock_history.py", "lineno": 158, "message": "AssertionError"}], "stdout": "\uc7ac\uace0\ub7c9 : 10, \uc81c\ud488\uba85 : [\uc218\uc815]\ub4f1\ub85d\ud14c\uc2a4\ud2b8_0717_07\n[\ud83d\udcc5 \uadf8\uc81c] history2\uc758 \uc0c1\ud0dc \uac12: \uc785\uace0\n[\ud83d\udcc5 \uc5b4\uc81c] history2\uc758 \uc0c1\ud0dc \uac12: \uc785\uace0\n\u2705 H3 \ud655\uc778 \uc644\ub8cc\n\u2705 H2 \ud655\uc778 \uc644\ub8cc\n", "longrepr": "page = <Page url='https://stg.bay.centurion.ai.kr/stocks/243?page=1'>\n\n    def test_inflow_past(page):\n        bay_login(page)\n        page.goto(URLS[\"bay_stock\"])\n        page.wait_for_timeout(2000)\n        today = datetime.today()\n        mmdd= today.strftime(\"%m%d\")\n        search_name = f\"\ub4f1\ub85d\ud14c\uc2a4\ud2b8_{mmdd}\"\n    \n        page.locator(\"data-testid=input_search\").fill(search_name)\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_search\").click()\n        page.wait_for_timeout(1000)\n    \n        product_column = page.locator(\"table tbody tr\").first.locator(\"td\").nth(3)\n        stock_column = page.locator(\"table tbody tr\").first.locator(\"td\").nth(5)\n        stock_text = stock_column.text_content().strip()\n        product_name = product_column.locator(\"div\").first.text_content().strip()\n        current_stock = int(stock_text)\n        print(f\"\uc7ac\uace0\ub7c9 : {stock_text}, \uc81c\ud488\uba85 : {product_name}\")\n        yesterday_memo = \"\uc5b4\uc81c \ub0a0\uc9dc \uc785\uace0 \ud655\uc778 \ud14c\uc2a4\ud2b8\"\n        day_before_memo = \"\uadf8\uc81c \ub0a0\uc9dc \uc785\uace0 \ud655\uc778 \ud14c\uc2a4\ud2b8\"\n        today_memo = \"30\uc790\uae4c\uc9c0 \uc81c\ud55c\uc778\ub370\uc694. \ucd5c\ub300\uae00\uc790\uc218 \uaf49\uaf49\ucc44\uc6cc\uc11c \ub4f1\ub85d\ud569\ub2c8\ub2e4\"\n        yesterday = datetime.today() - timedelta(days=1)\n        day_before = datetime.today() - timedelta(days=2)\n        today_str = \"\uae08\uc77c \uc7ac\uace0 \ud604\ud669\"\n        yesterday_str = yesterday.strftime(\"%Y. %m. %d\")\n        day_before_str = day_before.strftime(\"%Y. %m. %d\")\n    \n        page.wait_for_timeout(2000)\n        # \ub450 \ub0a0\uc9dc\uc5d0 \ub300\ud574 \uac01\uac01 \ub4f1\ub85d\n        register_stock_for_date(page, day_before, product_name, current_stock, day_before_memo)\n        register_stock_for_date(page, yesterday, product_name, current_stock + 100, yesterday_memo)  # \uc774\uc804 \ub4f1\ub85d \ubc18\uc601\n    \n        # \uc7ac\uace0 \uc0c1\uc138 \uc9c4\uc785\n        page.fill(\"data-testid=input_search\", product_name)\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_search\").click()\n        page.wait_for_timeout(1000)\n        first_row_cell = page.locator(\"table tbody tr\").first.locator(\"td\").nth(3)\n        cell_text = first_row_cell.inner_text().strip().split(\"\\n\")[0]\n        assert cell_text == product_name, f\"\u274c \uac80\uc0c9 \uacb0\uacfc\uac00 \uc77c\uce58\ud558\uc9c0 \uc54a\uc74c: {cell_text} != {product_name}\"\n        first_row_cell = page.locator(\"table tbody tr\").first.locator(\"td\").nth(3)\n        first_row_cell.locator(\"div\").first.click()\n        expect(page.locator(\"data-testid=btn_back\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_back\").click()\n        expect(page.locator(\"data-testid=btn_stockadd\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(500)\n        first_row_cell.locator(\"div\").first.click()\n        expect(page.locator(\"data-testid=txt_today\")).to_have_text(today_str, timeout=3000)\n        page.wait_for_timeout(500)\n    \n        # \ub0a0\uc9dc \ubc0f \uc0c1\ud0dc \ud544\ud130\n        day1_str = select_date_range(page, day_before)\n    \n        # \ubb38\uad6c \ud655\uc778\n        expect(page.locator('[data-testid=\"txt_today\"]')).to_be_visible()\n        expect(page.locator('[data-testid=\"txt_date\"]')).to_have_text(day1_str)\n    \n        # \uac12 \ucd94\ucd9c\n        value_day1 = get_last_column_of_history2(page)\n        print(f\"[\ud83d\udcc5 \uadf8\uc81c] history2\uc758 \uc0c1\ud0dc \uac12: {value_day1}\")\n    \n        # \u2705 \uc5b4\uc81c \ub0a0\uc9dc \uae30\uc900 \ud14c\uc2a4\ud2b8\n        day2_str = select_date_range(page, yesterday)\n    \n        # \ubb38\uad6c \ud655\uc778\n        expect(page.locator('[data-testid=\"txt_today\"]')).to_be_visible()\n        expect(page.locator('[data-testid=\"txt_date\"]')).to_have_text(day2_str)\n    \n        # \uac12 \ucd94\ucd9c\n        value_day2 = get_last_column_of_history2(page)\n        print(f\"[\ud83d\udcc5 \uc5b4\uc81c] history2\uc758 \uc0c1\ud0dc \uac12: {value_day2}\")\n    \n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_reset\").click()\n        page.wait_for_timeout(1000)\n    \n        # \ud14d\uc2a4\ud2b8 \ubb38\uad6c \ud655\uc778\n        expect(page.locator('[data-testid=\"txt_today\"]')).to_have_text(today_str)\n        txt_dates = page.locator('[data-testid=\"txt_date\"]')\n        expect(txt_dates.nth(0)).to_have_text(yesterday_str)\n        expect(txt_dates.nth(1)).to_have_text(day_before_str)\n    \n        # \u2705 3\ubc88\uc9f8 history\n        hist3_qty = int(get_table_cell_text(page, 3, 0, 2))  # 3\ubc88\uc9f8 \uc5f4 = index 2\n        hist3_memo = get_table_cell_text(page, 3, 0, 4)      # 5\ubc88\uc9f8 \uc5f4 = index 4\n        hist3_last = get_last_column_text(page, 3)\n    \n        assert hist3_qty == 100, f\"[H3] \uc218\ub7c9 \ubd88\uc77c\uce58: {hist3_qty} != 100\"\n        assert hist3_memo == day_before_memo, f\"[H3] \uba54\ubaa8 \ubd88\uc77c\uce58: {hist3_memo} != {day_before_memo}\"\n        print(f\"\u2705 H3 \ud655\uc778 \uc644\ub8cc\")\n    \n        # 2\ubc88\uc9f8 history\n        hist2_qty = int(get_table_cell_text(page, 2, 0, 2))\n        hist2_memo = get_table_cell_text(page, 2, 0, 4)\n        hist2_last = get_last_column_text(page, 2)\n    \n        assert hist2_qty == 200, f\"[H2] \uc218\ub7c9 \ubd88\uc77c\uce58: {hist2_qty} != 200\"\n        assert hist2_memo == yesterday_memo, f\"[H2] \uba54\ubaa8 \ubd88\uc77c\uce58: {hist2_memo} != {yesterday_memo}\"\n        assert hist2_last == hist3_last, f\"[H2] \ub9c8\uc9c0\ub9c9 \uc5f4 \ubd88\uc77c\uce58: {hist2_last} != {hist3_last}\"\n        print(f\"\u2705 H2 \ud655\uc778 \uc644\ub8cc\")\n    \n        # 1\ubc88\uc9f8 history\n        expected_total = current_stock + 200\n        hist1_qty = int(get_table_cell_text(page, 1, 0, 2))\n        hist1_memo = get_table_cell_text(page, 1, 0, 4)\n        hist1_last = get_last_column_text(page, 1)\n    \n        assert hist1_qty == expected_total, f\"[H1] \uc218\ub7c9 \ubd88\uc77c\uce58: {hist1_qty} != {expected_total}\"\n>       assert hist1_memo == today_memo, f\"[H1] \uba54\ubaa8 \ubd88\uc77c\uce58: {hist1_memo} != {today_memo}\"\nE       AssertionError: [H1] \uba54\ubaa8 \ubd88\uc77c\uce58: 2\uac1c\uc758 \uba54\ubaa8\uac00 \uc788\uc2b5\ub2c8\ub2e4. != 30\uc790\uae4c\uc9c0 \uc81c\ud55c\uc778\ub370\uc694. \ucd5c\ub300\uae00\uc790\uc218 \uaf49\uaf49\ucc44\uc6cc\uc11c \ub4f1\ub85d\ud569\ub2c8\ub2e4\nE       assert '2\uac1c\uc758 \uba54\ubaa8\uac00 \uc788\uc2b5\ub2c8\ub2e4.' == '30\uc790\uae4c\uc9c0 \uc81c\ud55c\uc778\ub370\uc694....\uc218 \uaf49\uaf49\ucc44\uc6cc\uc11c \ub4f1\ub85d\ud569\ub2c8\ub2e4'\nE         \nE         - 30\uc790\uae4c\uc9c0 \uc81c\ud55c\uc778\ub370\uc694. \ucd5c\ub300\uae00\uc790\uc218 \uaf49\uaf49\ucc44\uc6cc\uc11c \ub4f1\ub85d\ud569\ub2c8\ub2e4\nE         + 2\uac1c\uc758 \uba54\ubaa8\uac00 \uc788\uc2b5\ub2c8\ub2e4.\n\ntests\\test_Bay_stock_history.py:158: AssertionError"}, "teardown": {"duration": 0.020163899986073375, "outcome": "passed"}}, {"nodeid": "tests/test_Bay_stock_history.py::test_stock_bulk_edit", "lineno": 164, "outcome": "passed", "keywords": ["test_stock_bulk_edit", "test_Bay_stock_history.py", "tests", "Bay", ""], "setup": {"duration": 0.06292569998186082, "outcome": "passed"}, "call": {"duration": 39.62619690003339, "outcome": "passed", "stdout": "\uccab\ubc88\uc9f8 \ud56d\ubaa9 \uae30\uc874 \uc785\uace0\ub7c9 : 17, \ub450\ubc88\uc9f8 \ud56d\ubaa9 \uae30\uc874 \uc785\uace0\ub7c9: 8\n"}, "teardown": {"duration": 0.08228939992841333, "outcome": "passed"}}]}