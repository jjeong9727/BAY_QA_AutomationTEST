[
  {
    "test_name": "test_Bay_login",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:12:14",
    "file": "tests/test_Bay_login.py",
    "stack": "",
    "duration": "22.82초"
  },
  {
    "test_name": "test_Bay_alert",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:16:21",
    "file": "tests/test_Bay_alert.py",
    "stack": "",
    "duration": "246.28초"
  },
  {
    "test_name": "test_Bay_supplier",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:17:01",
    "file": "tests/test_Bay_supplier.py",
    "stack": "",
    "duration": "40.73초"
  },
  {
    "test_name": "test_Bay_supplier_val",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:17:17",
    "file": "tests/test_Bay_supplier_val.py",
    "stack": "",
    "duration": "15.82초"
  },
  {
    "test_name": "test_Bay_prdctg",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:18:12",
    "file": "tests/test_Bay_prdctg.py",
    "stack": "",
    "duration": "55.22초"
  },
  {
    "test_name": "test_Bay_prdctg_val",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:18:34",
    "file": "tests/test_Bay_prdctg_val.py",
    "stack": "",
    "duration": "21.67초"
  },
  {
    "test_name": "test_Bay_prdctg_edit",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:19:24",
    "file": "tests/test_Bay_prdctg_edit.py",
    "stack": "",
    "duration": "50.21초"
  },
  {
    "test_name": "test_Bay_prdctg_delete",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:20:02",
    "file": "tests/test_Bay_prdctg_delete.py",
    "stack": "",
    "duration": "38.08초"
  },
  {
    "test_name": "test_Bay_rule_order_register",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:20:52",
    "file": "tests/test_Bay_rule_order_register.py",
    "stack": "",
    "duration": "49.73초"
  },
  {
    "test_name": "test_Bay_rule_order_edit",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:22:52",
    "file": "tests/test_Bay_rule_order_edit.py",
    "stack": "",
    "duration": "119.93초"
  },
  {
    "test_name": "test_Bay_rule_approval_register",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:23:25",
    "file": "tests/test_Bay_rule_approval_register.py",
    "stack": "",
    "duration": "33.43초"
  },
  {
    "test_name": "test_Bay_rule_approval_edit",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:24:19",
    "file": "tests/test_Bay_rule_approval_edit.py",
    "stack": "",
    "duration": "53.08초"
  },
  {
    "test_name": "test_Bay_product",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:26:11",
    "file": "tests/test_Bay_product.py",
    "stack": "",
    "duration": "112.73초"
  },
  {
    "test_name": "test_Bay_product_val",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:26:46",
    "file": "tests/test_Bay_product_val.py",
    "stack": "",
    "duration": "34.22초"
  },
  {
    "test_name": "test_Bay_product_edit",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:27:14",
    "file": "tests/test_Bay_product_edit.py",
    "stack": "",
    "duration": "27.97초"
  },
  {
    "test_name": "test_Bay_product_delete",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:27:40",
    "file": "tests/test_Bay_product_delete.py",
    "stack": "",
    "duration": "26.62초"
  },
  {
    "test_name": "test_Bay_stock_in",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:29:06",
    "file": "tests/test_Bay_stock_in.py",
    "stack": "",
    "duration": "85.34초"
  },
  {
    "test_name": "test_Bay_stock_manual",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:29:55",
    "file": "tests/test_Bay_stock_manual.py",
    "stack": "",
    "duration": "48.92초"
  },
  {
    "test_name": "test_Bay_stock_out",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:32:42",
    "file": "tests/test_Bay_stock_out.py",
    "stack": "",
    "duration": "167.95초"
  },
  {
    "test_name": "test_Bay_stock_batch",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:36:37",
    "file": "tests/test_Bay_stock_batch.py",
    "stack": "",
    "duration": "234.29초"
  },
  {
    "test_name": "test_Bay_order_pending",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:41:12",
    "file": "tests/test_Bay_order_pending.py",
    "stack": "",
    "duration": "274.93초"
  },
  {
    "test_name": "test_Bay_order_approval",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:50:26",
    "file": "tests/test_Bay_order_approval.py",
    "stack": "",
    "duration": "554.38초"
  },
  {
    "test_name": "test_Bay_order_status_request_cancel",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:51:23",
    "file": "tests/test_Bay_order_status_request_cancel.py",
    "stack": "",
    "duration": "57.23초"
  },
  {
    "test_name": "test_Bay_order_status_request",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:52:21",
    "file": "tests/test_Bay_order_status_request.py",
    "stack": "",
    "duration": "57.69초"
  },
  {
    "test_name": "test_Bay_order_status_progress_delivery",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:53:26",
    "file": "tests/test_Bay_order_status_progress_delivery.py",
    "stack": "",
    "duration": "64.93초"
  },
  {
    "test_name": "test_Bay_order_status_progress_complete",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:54:16",
    "file": "tests/test_Bay_order_status_progress_complete.py",
    "stack": "",
    "duration": "50.13초"
  },
  {
    "test_name": "test_Bay_order_status_delivery",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:55:02",
    "file": "tests/test_Bay_order_status_delivery.py",
    "stack": "",
    "duration": "46.13초"
  },
  {
    "test_name": "test_Bay_order_status_complete",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:55:36",
    "file": "tests/test_Bay_order_status_complete.py",
    "stack": "",
    "duration": "33.87초"
  },
  {
    "test_name": "test_Bay_order_status_fail",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-08-28 16:55:51",
    "file": "tests/test_Bay_order_status_fail.py",
    "stack": "",
    "duration": "14.34초"
  },
  {
    "test_name": "test_Bay_order_status_batch",
    "status": "FAIL",
    "message": "helpers\\order_status_utils.py:243: AssertionError",
    "timestamp": "2025-08-28 17:01:43",
    "file": "tests/test_Bay_order_status_batch.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 3 items\n\ntests\\test_Bay_order_status_batch.py FFF                                 [100%]\n\n================================== FAILURES ===================================\n__________________________ test_cancel_batch_history __________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/orders/history?start_date=2025-08-28&end_date=2025-08-28&order_status=PENDING&product_name=%EC%9E%90%EB%8F%99%ED%99%94%EC%A0%9C%ED%92%88_3&page=1'>\n\n    def test_cancel_batch_history(page:Page):\n    \n        bay_login(page)\n        page.goto(URLS[\"bay_orderList\"])\n        page.wait_for_timeout(2000)\n    \n>       search_order_history(page, product_list[2],\"발주 요청\")\n\ntests\\test_Bay_order_status_batch.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npage = <Page url='https://stg.bay.centurion.ai.kr/orders/history?start_date=2025-08-28&end_date=2025-08-28&order_status=PENDING&product_name=%EC%9E%90%EB%8F%99%ED%99%94%EC%A0%9C%ED%92%88_3&page=1'>\nproduct_name = '자동화제품_3', status = '발주 요청'\n\n    def search_order_history(page:Page, product_name: str, status:str):\n        today_btn_id = datetime.now().strftime(\"btn_day_%m%d\")  # 예: btn_day_0710\n        # 시작일 선택\n        page.locator(\"[data-testid=select_startday]\").click()\n        page.wait_for_timeout(1000)\n        page.locator(f\"[data-testid={today_btn_id}]\").click()\n        page.wait_for_timeout(1000)\n        # 종료일 선택\n        page.locator(\"[data-testid=select_endday]\").click()\n        page.wait_for_timeout(1000)\n        page.locator(f\"[data-testid={today_btn_id}]\").click()\n        page.wait_for_timeout(1000)\n        # 상태 선택\n        expect(page.locator(\"data-testid=drop_status_trigger\")).to_be_visible(timeout=8000)\n        page.locator(\"data-testid=drop_status_trigger\").click()\n        expect(page.locator(\"data-testid=drop_status_item\")).to_be_visible(timeout=5000)\n        page.locator('[role=\"option\"]').filter(has_text=status).click()\n        page.wait_for_timeout(1000)\n        # 제품명 입력\n        page.locator(\"data-testid=input_search\").fill(product_name)\n        page.wait_for_timeout(1000)\n        # 검색 버튼 클릭\n        page.locator(\"[data-testid=btn_search]\").click()\n        page.wait_for_timeout(2000)\n>       expect(page.locator(\"data-testid=history\")).to_be_visible(timeout=100000)\nE       AssertionError: Locator expected to be visible\nE       Actual value: <element(s) not found> \nE       Call log:\nE         - LocatorAssertions.to_be_visible with timeout 100000ms\nE         -   - waiting for locator(\"data-testid=history\")\n\nhelpers\\order_status_utils.py:243: AssertionError\n________________________ test_receive_without_tracking ________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/orders/history?start_date=2025-08-28&end_date=2025-08-28&order_status=PENDING&product_name=%EC%9E%90%EB%8F%99%ED%99%94%EC%A0%9C%ED%92%88_6&page=1'>\n\n    def test_receive_without_tracking(page:Page):\n    \n        # 대표 내역 확인 후 order_id 추출\n        products = [\"자동화제품_4\", \"자동화제품_5\", \"자동화제품_6\"]\n    \n        bay_login(page)\n        page.goto(URLS[\"bay_orderList\"])\n        page.wait_for_timeout(2000)\n>       search_order_history(page, product_list[5], \"발주 요청\")\n\ntests\\test_Bay_order_status_batch.py:176: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npage = <Page url='https://stg.bay.centurion.ai.kr/orders/history?start_date=2025-08-28&end_date=2025-08-28&order_status=PENDING&product_name=%EC%9E%90%EB%8F%99%ED%99%94%EC%A0%9C%ED%92%88_6&page=1'>\nproduct_name = '자동화제품_6', status = '발주 요청'\n\n    def search_order_history(page:Page, product_name: str, status:str):\n        today_btn_id = datetime.now().strftime(\"btn_day_%m%d\")  # 예: btn_day_0710\n        # 시작일 선택\n        page.locator(\"[data-testid=select_startday]\").click()\n        page.wait_for_timeout(1000)\n        page.locator(f\"[data-testid={today_btn_id}]\").click()\n        page.wait_for_timeout(1000)\n        # 종료일 선택\n        page.locator(\"[data-testid=select_endday]\").click()\n        page.wait_for_timeout(1000)\n        page.locator(f\"[data-testid={today_btn_id}]\").click()\n        page.wait_for_timeout(1000)\n        # 상태 선택\n        expect(page.locator(\"data-testid=drop_status_trigger\")).to_be_visible(timeout=8000)\n        page.locator(\"data-testid=drop_status_trigger\").click()\n        expect(page.locator(\"data-testid=drop_status_item\")).to_be_visible(timeout=5000)\n        page.locator('[role=\"option\"]').filter(has_text=status).click()\n        page.wait_for_timeout(1000)\n        # 제품명 입력\n        page.locator(\"data-testid=input_search\").fill(product_name)\n        page.wait_for_timeout(1000)\n        # 검색 버튼 클릭\n        page.locator(\"[data-testid=btn_search]\").click()\n        page.wait_for_timeout(2000)\n>       expect(page.locator(\"data-testid=history\")).to_be_visible(timeout=100000)\nE       AssertionError: Locator expected to be visible\nE       Actual value: <element(s) not found> \nE       Call log:\nE         - LocatorAssertions.to_be_visible with timeout 100000ms\nE         -   - waiting for locator(\"data-testid=history\")\n\nhelpers\\order_status_utils.py:243: AssertionError\n_________________________ test_receive_with_tracking __________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/orders/history?start_date=2025-08-28&end_date=2025-08-28&order_status=PENDING&product_name=%EC%9E%90%EB%8F%99%ED%99%94%EC%A0%9C%ED%92%88_9&page=1'>\n\n    def test_receive_with_tracking(page:Page):\n        products = [\"자동화제품_7\", \"자동화제품_8\", \"자동화제품_9\"]\n    \n        bay_login(page)\n        page.goto(URLS[\"bay_orderList\"])\n        page.wait_for_timeout(2000)\n>       search_order_history(page, product_list[8], \"발주 요청\")\n\ntests\\test_Bay_order_status_batch.py:284: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npage = <Page url='https://stg.bay.centurion.ai.kr/orders/history?start_date=2025-08-28&end_date=2025-08-28&order_status=PENDING&product_name=%EC%9E%90%EB%8F%99%ED%99%94%EC%A0%9C%ED%92%88_9&page=1'>\nproduct_name = '자동화제품_9', status = '발주 요청'\n\n    def search_order_history(page:Page, product_name: str, status:str):\n        today_btn_id = datetime.now().strftime(\"btn_day_%m%d\")  # 예: btn_day_0710\n        # 시작일 선택\n        page.locator(\"[data-testid=select_startday]\").click()\n        page.wait_for_timeout(1000)\n        page.locator(f\"[data-testid={today_btn_id}]\").click()\n        page.wait_for_timeout(1000)\n        # 종료일 선택\n        page.locator(\"[data-testid=select_endday]\").click()\n        page.wait_for_timeout(1000)\n        page.locator(f\"[data-testid={today_btn_id}]\").click()\n        page.wait_for_timeout(1000)\n        # 상태 선택\n        expect(page.locator(\"data-testid=drop_status_trigger\")).to_be_visible(timeout=8000)\n        page.locator(\"data-testid=drop_status_trigger\").click()\n        expect(page.locator(\"data-testid=drop_status_item\")).to_be_visible(timeout=5000)\n        page.locator('[role=\"option\"]').filter(has_text=status).click()\n        page.wait_for_timeout(1000)\n        # 제품명 입력\n        page.locator(\"data-testid=input_search\").fill(product_name)\n        page.wait_for_timeout(1000)\n        # 검색 버튼 클릭\n        page.locator(\"[data-testid=btn_search]\").click()\n        page.wait_for_timeout(2000)\n>       expect(page.locator(\"data-testid=history\")).to_be_visible(timeout=100000)\nE       AssertionError: Locator expected to be visible\nE       Actual value: <element(s) not found> \nE       Call log:\nE         - LocatorAssertions.to_be_visible with timeout 100000ms\nE         -   - waiting for locator(\"data-testid=history\")\n\nhelpers\\order_status_utils.py:243: AssertionError\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_order_status_batch.py::test_cancel_batch_history - Asse...\nFAILED tests/test_Bay_order_status_batch.py::test_receive_without_tracking - ...\nFAILED tests/test_Bay_order_status_batch.py::test_receive_with_tracking - Ass...\n======================== 3 failed in 351.28s (0:05:51) ========================\n",
    "duration": "352.63초"
  }
]