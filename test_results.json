[
  {
    "test_name": "test_Bay_login",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-06-30 18:05:21",
    "file": "tests/test_Bay_login.py",
    "stack": "",
    "duration": "36.56초"
  },
  {
    "test_name": "test_Bay_supplier",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-06-30 18:05:44",
    "file": "tests/test_Bay_supplier.py",
    "stack": "",
    "duration": "23.47초"
  },
  {
    "test_name": "test_Bay_supplier_val",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-06-30 18:06:00",
    "file": "tests/test_Bay_supplier_val.py",
    "stack": "",
    "duration": "15.99초"
  },
  {
    "test_name": "test_Bay_supplier_delete",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-06-30 18:06:23",
    "file": "tests/test_Bay_supplier_delete.py",
    "stack": "",
    "duration": "22.37초"
  },
  {
    "test_name": "test_Bay_prdctg",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-06-30 18:07:27",
    "file": "tests/test_Bay_prdctg.py",
    "stack": "",
    "duration": "64.18초"
  },
  {
    "test_name": "test_Bay_prdctg_val",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-06-30 18:08:35",
    "file": "tests/test_Bay_prdctg_val.py",
    "stack": "",
    "duration": "67.71초"
  },
  {
    "test_name": "test_Bay_prdctg_edit",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-06-30 18:09:34",
    "file": "tests/test_Bay_prdctg_edit.py",
    "stack": "",
    "duration": "59.54초"
  },
  {
    "test_name": "test_Bay_prdctg_delete",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-06-30 18:11:43",
    "file": "tests/test_Bay_prdctg_delete.py",
    "stack": "",
    "duration": "129.22초"
  },
  {
    "test_name": "test_Bay_product",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-06-30 18:12:55",
    "file": "tests/test_Bay_product.py",
    "stack": "",
    "duration": "71.28초"
  },
  {
    "test_name": "test_Bay_product_val",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-06-30 18:13:15",
    "file": "tests/test_Bay_product_val.py",
    "stack": "",
    "duration": "20.40초"
  },
  {
    "test_name": "test_Bay_product_edit",
    "status": "FAIL",
    "message": "..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError",
    "timestamp": "2025-06-30 18:14:04",
    "file": "tests/test_Bay_product_edit.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_product_edit.py F                                         [100%]\n\n================================== FAILURES ===================================\n___________________________ test_edit_bulk_products ___________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/products?name=%EB%93%B1%EB%A1%9D%ED%85%8C%EC%8A%A4%ED%8A%B8'>\n\n    def test_edit_bulk_products(page):\n        try:\n            bay_login(page)\n    \n            # 1. 조건에 맞는 제품을 JSON에서 찾아 수정 대상으로 삼음\n            products_to_edit = get_deletable_products()\n            print(f\"\\u2705 \\ucc3e\\uc740 \\uc0ad\\uc81c \\ub300\\uc0c1 \\uc81c\\ud488 \\uc218: {len(products_to_edit)}\")\n    \n            if not products_to_edit:\n                print(\"\\u2705 \\uc218\\uc815 \\ub300\\uc0c1 \\uc81c\\ud488\\uc774 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.\")\n                pytest.skip(\"수정 대상 제품이 없습니다.\")\n    \n            # 2. 등록테스트 제품 검색\n            print(\"\\u2705 \\ub4f1\\ub85d\\ud14c\\uc2a4\\ud2b8 \\uc81c\\ud488 \\uac80\\uc0c9\")\n            page.goto(URLS[\"bay_prdList\"])\n            page.wait_for_timeout(2000)\n            page.fill(\"data-testid=input_search\", \"등록테스트\")\n            page.wait_for_timeout(1000)\n            page.click(\"data-testid=btn_search\")\n            page.wait_for_timeout(1000)\n    \n            rows = page.locator(\"table tbody tr\")\n            row_count = rows.count()\n            print(f\"\\u2705 \\uac80\\uc0c9\\ub41c \\uc81c\\ud488 \\uc218: {row_count}\")\n            if row_count < 2:\n                print(\"\\u2705 \\uac80\\uc0c9 \\uacb0\\uacfc\\uac00 2\\uac1c \\ubbf8\\ub9cc\\uc774\\ubbc0\\ub85c \\ud14c\\uc2a4\\ud2b8\\ub97c \\uc2a4\\ud0b5\\ud569\\ub2c8\\ub2e4.\")\n                pytest.skip(\"검색 결과가 2개 이상 존재하지 않아 테스트를 스킵합니다.\")\n    \n            # 2~3개 제품 랜덤 선택\n            print(\"\\u2705 \\uc81c\\ud488\\uc744 \\ub79c\\ub364\\uc73c\\ub85c \\uc120\\ud0dd\")\n            indices = random.sample(range(row_count), k=2)\n            selected_names = []\n    \n            for idx in indices:\n                row = rows.nth(idx)\n>               row.locator(\"td:nth-child(1)\").click()\n\ntests\\test_Bay_product_edit.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:15464: in click\n    self._sync(\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_locator.py:156: in click\n    return await self._frame.click(self._selector, strict=True, **params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:488: in click\n    await self._channel.send(\"click\", locals_to_params(locals()))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x000002D67C63FE00>\ncb = <function Channel.send.<locals>.<lambda> at 0x000002D67CAFE980>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.click: Timeout 30000ms exceeded.\nE           Call log:\nE             - waiting for locator(\"table tbody tr\").nth(7).locator(\"td:nth-child(1)\")\nE             -     - locator resolved to <td class=\"align-middle text-SheetBody_R_14 p-[16px] [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\">…</td>\nE             -   - attempting click action\nE             -     2 × waiting for element to be visible, enabled and stable\nE             -       - element is not visible\nE             -     - retrying click action\nE             -     - waiting 20ms\nE             -     2 × waiting for element to be visible, enabled and stable\nE             -       - element is not visible\nE             -     - retrying click action\nE             -       - waiting 100ms\nE             -     - waiting for element to be visible, enabled and stable\nE             -     - element is not visible\nE             -   - retrying click action\nE             -     - waiting 500ms\nE             -     - waiting for element to be visible, enabled and stable\nE             -   - element was detached from the DOM, retrying\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError\n---------------------------- Captured stdout call -----------------------------\n\\u2705 \\ucc3e\\uc740 \\uc0ad\\uc81c \\ub300\\uc0c1 \\uc81c\\ud488 \\uc218: 6\\n\\u2705 \\ub4f1\\ub85d\\ud14c\\uc2a4\\ud2b8 \\uc81c\\ud488 \\uac80\\uc0c9\\n\\u2705 \\uac80\\uc0c9\\ub41c \\uc81c\\ud488 \\uc218: 8\\n\\u2705 \\uc81c\\ud488\\uc744 \\ub79c\\ub364\\uc73c\\ub85c \\uc120\\ud0dd\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_product_edit.py::test_edit_bulk_products - playwright._...\n============================= 1 failed in 47.15s ==============================\n",
    "duration": "48.58초"
  },
  {
    "test_name": "test_Bay_product_delete",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-06-30 18:14:42",
    "file": "tests/test_Bay_product_delete.py",
    "stack": "",
    "duration": "38.16초"
  },
  {
    "test_name": "test_Bay_stock_in",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-06-30 18:15:23",
    "file": "tests/test_Bay_stock_in.py",
    "stack": "",
    "duration": "40.84초"
  },
  {
    "test_name": "test_Bay_stock_out",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-06-30 18:16:33",
    "file": "tests/test_Bay_stock_out.py",
    "stack": "",
    "duration": "70.06초"
  },
  {
    "test_name": "test_Bay_order_status_request_cancel",
    "status": "FAIL",
    "message": "\\uac80\\uc0c9\\ub41c \\uc81c\\ud488\\uba85: \\ub4f1\\ub85d\\ud14c\\uc2a4\\ud2b8_0630_1812_05\\n\\ucc3e\\uc740 order_id: 2\\n\\u274c Error in test_order_cancel: Page.click: Timeout 30000ms exceeded.\\nCall log:\\n  - waiting for locator(\"button[data-testid='btn_cancel']\")",
    "timestamp": "2025-06-30 18:17:22",
    "file": "tests/test_Bay_order_status_request_cancel.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_order_status_request_cancel.py F                          [100%]\n\n================================== FAILURES ===================================\n______________________________ test_order_cancel ______________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/orders/history?product_name=%EB%93%B1%EB%A1%9D%ED%85%8C%EC%8A%A4%ED%8A%B8_0630_1812_05'>\n\n    def test_order_cancel(page: Page):\n        try:\n            # JSON 파일에서 제품명 불러오기\n            with open('product_name.json', 'r', encoding='utf-8') as f:\n                products = json.load(f)\n    \n            # delivery_status가 1인 제품들 필터링\n            eligible_products = [product for product in products if product.get('delivery_status') == 1]\n    \n            if not eligible_products:\n                raise ValueError(\"No product found with delivery_status 1\")\n    \n            # delivery_status가 1인 제품 중 랜덤으로 하나 선택\n            target_product = random.choice(eligible_products)\n            product_name = target_product['kor']\n    \n            # 발주 내역 화면으로 이동하여 제품명 검색 후 order_id 가져오기\n            bay_login(page)\n    \n            page.goto(URLS[\"bay_orderList\"])\n            expect(page.locator(\"data-testid=input_search\")).to_be_visible(timeout=8000)\n            page.fill(\"data-testid=input_search\", product_name)\n            page.wait_for_timeout(3000)\n            page.click(\"data-testid=btn_search\")\n            expect(page.locator(\"data-testid=history\").first).to_be_visible(timeout=8000)\n    \n            # 검색된 제품의 order_id 값 가져오기\n            order_id = get_order_id_from_order_list(page, product_name)\n    \n            if not order_id:\n                raise ValueError(f\"Order ID for product {product_name} not found\")\n    \n            # 취소 버튼\n>           page.click(\"button[data-testid='btn_cancel']\")  # 취소 버튼 클릭\n\ntests\\test_Bay_order_status_request_cancel.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:9921: in click\n    self._sync(\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_page.py:827: in click\n    return await self._main_frame.click(**locals_to_params(locals()))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:488: in click\n    await self._channel.send(\"click\", locals_to_params(locals()))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x000001B81A658050>\ncb = <function Channel.send.<locals>.<lambda> at 0x000001B81AAAB1A0>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Page.click: Timeout 30000ms exceeded.\nE           Call log:\nE             - waiting for locator(\"button[data-testid='btn_cancel']\")\nE             -     - locator resolved to <button disabled type=\"button\" data-state=\"closed\" aria-expanded=\"false\" aria-haspopup=\"dialog\" data-testid=\"btn_cancel\" aria-controls=\"radix-:ru:\" class=\"inline-flex items-center justify-center whitespace-nowrap transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none border px-4 bg-white border-gray-300 text-black disabled:border-gray-300 disabled:text-gray-600 disabled:bg-white text-Button_R_14 h-[33px] rounded-[4px]\">취소</button>\nE             -   - attempting click action\nE             -     2 × waiting for element to be visible, enabled and stable\nE             -       - element is not enabled\nE             -     - retrying click action\nE             -     - waiting 20ms\nE             -     2 × waiting for element to be visible, enabled and stable\nE             -       - element is not enabled\nE             -     - retrying click action\nE             -       - waiting 100ms\nE             -     56 × waiting for element to be visible, enabled and stable\nE             -        - element is not enabled\nE             -      - retrying click action\nE             -        - waiting 500ms\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError\n---------------------------- Captured stdout call -----------------------------\n\\uac80\\uc0c9\\ub41c \\uc81c\\ud488\\uba85: \\ub4f1\\ub85d\\ud14c\\uc2a4\\ud2b8_0630_1812_05\\n\\ucc3e\\uc740 order_id: 2\\n\\u274c Error in test_order_cancel: Page.click: Timeout 30000ms exceeded.\\nCall log:\\n  - waiting for locator(\"button[data-testid='btn_cancel']\")\\n  -     - locator resolved to <button disabled type=\"button\" data-state=\"closed\" aria-expanded=\"false\" aria-haspopup=\"dialog\" data-testid=\"btn_cancel\" aria-controls=\"radix-:ru:\" class=\"inline-flex items-center justify-center whitespace-nowrap transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none border px-4 bg-white border-gray-300 text-black disabled:border-gray-300 disabled:text-gray-600 disabled:bg-white text-Button_R_14 h-[33px] rounded-[4px]\">\\ucde8\\uc18c</button>\\n  -   - attempting click action\\n  -     2 \\xd7 waiting for element to be visible, enabled and stable\\n  -       - element is not enabled\\n  -     - retrying click action\\n  -     - waiting 20ms\\n  -     2 \\xd7 waiting for element to be visible, enabled and stable\\n  -       - element is not enabled\\n  -     - retrying click action\\n  -       - waiting 100ms\\n  -     56 \\xd7 waiting for element to be visible, enabled and stable\\n  -        - element is not enabled\\n  -      - retrying click action\\n  -        - waiting 500ms\\n\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_order_status_request_cancel.py::test_order_cancel - pla...\n============================= 1 failed in 48.15s ==============================\n",
    "duration": "49.55초"
  },
  {
    "test_name": "test_Bay_order_status_request",
    "status": "FAIL",
    "message": "\\u274c \\ub4f1\\ub85d\\ud14c\\uc2a4\\ud2b8_0630_1812_05 \\ucc98\\ub9ac \\uc911 \\uc624\\ub958 \\ubc1c\\uc0dd: Locator expected to be visible\\nActual value: <element(s) not found> \\nCall log:\\n  - LocatorAssertions.to_be_visible with timeout 8000ms\\n  -   - waiting for locator(\"data-testid=history\").first\\n",
    "timestamp": "2025-06-30 18:17:47",
    "file": "tests/test_Bay_order_status_request.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_order_status_request.py F                                 [100%]\n\n================================== FAILURES ===================================\n____________________________ test_order_acceptance ____________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/orders/history?order_status=PENDING&product_name=%EB%93%B1%EB%A1%9D%ED%85%8C%EC%8A%A4%ED%8A%B8_0630_1812_05'>\n\n    def test_order_acceptance(page: Page):\n        # 발주 요청 상태(1)인 제품 2개 선택\n        eligible_products = filter_products_by_delivery_status(1)\n        if len(eligible_products) < 2:\n            raise ValueError(\"delivery_status가 1인 제품이 2개 미만입니다.\")\n    \n        selected_products = random.sample(eligible_products, 2)\n    \n        for product in selected_products:\n            product_name = product['kor']\n    \n            try:\n                # 로그인\n                bay_login(page)\n    \n                # 발주 내역 검색\n                page.goto(URLS[\"bay_orderList\"])\n                expect(page.locator(\"data-testid=drop_status_trigger\")).to_be_visible(timeout=8000)\n                page.click(\"data-testid=drop_status_trigger\")\n                expect(page.locator(\"data-testid=drop_status_item\")).to_be_visible(timeout=5000)\n                page.click('div[data-testid=\"drop_status_item\"] div[data-value=\"발주 요청\"]')\n                page.wait_for_timeout(2000)\n                page.fill(\"data-testid=input_search\", product_name)\n                page.click(\"data-testid=btn_search\")\n>               expect(page.locator(\"data-testid=history\").first).to_be_visible(timeout=8000)\nE               AssertionError: Locator expected to be visible\nE               Actual value: <element(s) not found> \nE               Call log:\nE                 - LocatorAssertions.to_be_visible with timeout 8000ms\nE                 -   - waiting for locator(\"data-testid=history\").first\nE                 -     3 × locator resolved to <div data-state=\"open\" data-testid=\"history\" data-orientation=\"vertical\" class=\"rounded-[10px] p-[26px] shadow-accordion\">…</div>\nE                 -       - unexpected value \"hidden\"\n\ntests\\test_Bay_order_status_request.py:59: AssertionError\n---------------------------- Captured stdout call -----------------------------\n\\u274c \\ub4f1\\ub85d\\ud14c\\uc2a4\\ud2b8_0630_1812_05 \\ucc98\\ub9ac \\uc911 \\uc624\\ub958 \\ubc1c\\uc0dd: Locator expected to be visible\\nActual value: <element(s) not found> \\nCall log:\\n  - LocatorAssertions.to_be_visible with timeout 8000ms\\n  -   - waiting for locator(\"data-testid=history\").first\\n  -     3 \\xd7 locator resolved to <div data-state=\"open\" data-testid=\"history\" data-orientation=\"vertical\" class=\"rounded-[10px] p-[26px] shadow-accordion\">\\u2026</div>\\n  -       - unexpected value \"hidden\"\\n\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_order_status_request.py::test_order_acceptance - Assert...\n============================= 1 failed in 23.48s ==============================\n",
    "duration": "24.82초"
  },
  {
    "test_name": "test_Bay_order_status_progress_delivery",
    "status": "FAIL",
    "message": "\\u274c Error in test_order_delivery: No product found with delivery_status 2",
    "timestamp": "2025-06-30 18:17:51",
    "file": "tests/test_Bay_order_status_progress_delivery.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_order_status_progress_delivery.py F                       [100%]\n\n================================== FAILURES ===================================\n_____________________________ test_order_delivery _____________________________\n\npage = <Page url='about:blank'>\n\n    def test_order_delivery(page: Page):\n        try:\n            # delivery_status가 2인 제품 선택\n            with open(\"product_name.json\", \"r\", encoding=\"utf-8\") as f:\n                products = json.load(f)\n    \n            eligible_products = [p for p in products if p.get(\"delivery_status\") == 2]\n            if not eligible_products:\n>               raise ValueError(\"No product found with delivery_status 2\")\nE               ValueError: No product found with delivery_status 2\n\ntests\\test_Bay_order_status_progress_delivery.py:39: ValueError\n---------------------------- Captured stdout call -----------------------------\n\\u274c Error in test_order_delivery: No product found with delivery_status 2\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_order_status_progress_delivery.py::test_order_delivery\n============================== 1 failed in 2.25s ==============================\n",
    "duration": "3.56초"
  },
  {
    "test_name": "test_Bay_order_status_progress_complete",
    "status": "FAIL",
    "message": "\\u274c Error in test_order_receive_and_inventory_check: \\ubc1c\\uc8fc \\uc9c4\\ud589 \\uc0c1\\ud0dc\\uc778 \\uc81c\\ud488\\uc774 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.",
    "timestamp": "2025-06-30 18:17:54",
    "file": "tests/test_Bay_order_status_progress_complete.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_order_status_progress_complete.py F                       [100%]\n\n================================== FAILURES ===================================\n______________________ test_order_receive_from_progress _______________________\n\npage = <Page url='about:blank'>\n\n    def test_order_receive_from_progress(page: Page):\n        try:\n            # delivery_status가 2인 제품 필터링\n            eligible_products = filter_products_by_delivery_status(2)\n            if not eligible_products:\n>               raise ValueError(\"발주 진행 상태인 제품이 없습니다.\")\nE               ValueError: 발주 진행 상태인 제품이 없습니다.\n\ntests\\test_Bay_order_status_progress_complete.py:37: ValueError\n---------------------------- Captured stdout call -----------------------------\n\\u274c Error in test_order_receive_and_inventory_check: \\ubc1c\\uc8fc \\uc9c4\\ud589 \\uc0c1\\ud0dc\\uc778 \\uc81c\\ud488\\uc774 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_order_status_progress_complete.py::test_order_receive_from_progress\n============================== 1 failed in 2.07s ==============================\n",
    "duration": "3.51초"
  },
  {
    "test_name": "test_Bay_order_status_delivery",
    "status": "FAIL",
    "message": "\\u274c Error in test_order_receive_from_delivery: \\ubc1c\\uc8fc \\uc9c4\\ud589 \\uc0c1\\ud0dc\\uc778 \\uc81c\\ud488\\uc774 \\uc5c6\\ub2e4",
    "timestamp": "2025-06-30 18:17:57",
    "file": "tests/test_Bay_order_status_delivery.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_order_status_delivery.py F                                [100%]\n\n================================== FAILURES ===================================\n______________________ test_order_receive_from_delivery _______________________\n\npage = <Page url='about:blank'>\n\n    def test_order_receive_from_delivery(page: Page):\n        try:\n            # product.json에서 delivery_status가 3인 제품들 찾기\n            with open('product_name.json', 'r', encoding='utf-8') as f:\n                products = json.load(f)\n    \n            # delivery_status가 3인 제품들만 필터링\n            eligible_products = [product for product in products if product.get('delivery_status') == 3]\n    \n            if not eligible_products:\n>               raise ValueError(\"발주 진행 상태인 제품이 없다\")\nE               ValueError: 발주 진행 상태인 제품이 없다\n\ntests\\test_Bay_order_status_delivery.py:40: ValueError\n---------------------------- Captured stdout call -----------------------------\n\\u274c Error in test_order_receive_from_delivery: \\ubc1c\\uc8fc \\uc9c4\\ud589 \\uc0c1\\ud0dc\\uc778 \\uc81c\\ud488\\uc774 \\uc5c6\\ub2e4\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_order_status_delivery.py::test_order_receive_from_delivery\n============================== 1 failed in 2.07s ==============================\n",
    "duration": "3.38초"
  },
  {
    "test_name": "test_Bay_order_status_complete",
    "status": "FAIL",
    "message": "\\u274c Error in test_order_status_complete: '\\uc218\\ub839 \\uc644\\ub8cc(\\ubc30\\uc1a1\\ud6c4)' \\uc0c1\\ud0dc\\uc758 \\uc81c\\ud488\\uc774 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.",
    "timestamp": "2025-06-30 18:18:01",
    "file": "tests/test_Bay_order_status_complete.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 2 items\n\ntests\\test_Bay_order_status_complete.py FF                               [100%]\n\n================================== FAILURES ===================================\n________________________ test_order_status_complete_bf ________________________\n\npage = <Page url='about:blank'>\n\n    def test_order_status_complete_bf(page: Page):\n>       run_order_status_check(page, delivery_status=7)\n\ntests\\test_Bay_order_status_complete.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npage = <Page url='about:blank'>, delivery_status = 7\n\n    def run_order_status_check(page: Page, delivery_status: int):\n        status_name = \"수령 확정\"\n    \n        # 상태에 따른 expected 키 매핑\n        status_key_map = {\n            7: \"수령 완료(배송전)\",\n            4: \"수령 완료(배송후)\",\n        }\n    \n        expected_key = status_key_map.get(delivery_status)\n        if not expected_key:\n            raise ValueError(f\"지원하지 않는 delivery_status: {delivery_status}\")\n    \n        expected = order_status_map[expected_key]\n    \n        try:\n            filtered_products = filter_products_by_delivery_status(delivery_status)\n            if not filtered_products:\n>               raise ValueError(f\"'{expected_key}' 상태의 제품이 없습니다.\")\nE               ValueError: '수령 완료(배송전)' 상태의 제품이 없습니다.\n\ntests\\test_Bay_order_status_complete.py:31: ValueError\n---------------------------- Captured stdout call -----------------------------\n\\u274c Error in test_order_status_complete: '\\uc218\\ub839 \\uc644\\ub8cc(\\ubc30\\uc1a1\\uc804)' \\uc0c1\\ud0dc\\uc758 \\uc81c\\ud488\\uc774 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.\n________________________ test_order_status_complete_af ________________________\n\npage = <Page url='about:blank'>\n\n    def test_order_status_complete_af(page: Page):\n>       run_order_status_check(page, delivery_status=4)\n\ntests\\test_Bay_order_status_complete.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npage = <Page url='about:blank'>, delivery_status = 4\n\n    def run_order_status_check(page: Page, delivery_status: int):\n        status_name = \"수령 확정\"\n    \n        # 상태에 따른 expected 키 매핑\n        status_key_map = {\n            7: \"수령 완료(배송전)\",\n            4: \"수령 완료(배송후)\",\n        }\n    \n        expected_key = status_key_map.get(delivery_status)\n        if not expected_key:\n            raise ValueError(f\"지원하지 않는 delivery_status: {delivery_status}\")\n    \n        expected = order_status_map[expected_key]\n    \n        try:\n            filtered_products = filter_products_by_delivery_status(delivery_status)\n            if not filtered_products:\n>               raise ValueError(f\"'{expected_key}' 상태의 제품이 없습니다.\")\nE               ValueError: '수령 완료(배송후)' 상태의 제품이 없습니다.\n\ntests\\test_Bay_order_status_complete.py:31: ValueError\n---------------------------- Captured stdout call -----------------------------\n\\u274c Error in test_order_status_complete: '\\uc218\\ub839 \\uc644\\ub8cc(\\ubc30\\uc1a1\\ud6c4)' \\uc0c1\\ud0dc\\uc758 \\uc81c\\ud488\\uc774 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_order_status_complete.py::test_order_status_complete_bf\nFAILED tests/test_Bay_order_status_complete.py::test_order_status_complete_af\n============================== 2 failed in 2.54s ==============================\n",
    "duration": "3.83초"
  },
  {
    "test_name": "test_Bay_order_status_fail",
    "status": "FAIL",
    "message": "\\u274c Error in test_order_status_fail: [FAIL] '\\ubc1c\\uc8fc \\uc2e4\\ud328' \\uc0c1\\ud0dc\\uc758 \\uc81c\\ud488\\uc774 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.",
    "timestamp": "2025-06-30 18:18:05",
    "file": "tests/test_Bay_order_status_fail.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_order_status_fail.py F                                    [100%]\n\n================================== FAILURES ===================================\n___________________________ test_order_status_fail ____________________________\n\npage = <Page url='about:blank'>\n\n    def test_order_status_fail(page: Page):\n        status_name = \"발주 실패\"\n        expected = order_status_map[status_name]\n    \n        try:\n            # delivery_status == 6인 제품 목록 필터링\n            filtered_products = filter_products_by_delivery_status(6)\n            if not filtered_products:\n>               raise ValueError(f\"[FAIL] '{status_name}' 상태의 제품이 없습니다.\")\nE               ValueError: [FAIL] '발주 실패' 상태의 제품이 없습니다.\n\ntests\\test_Bay_order_status_fail.py:21: ValueError\n---------------------------- Captured stdout call -----------------------------\n\\u274c Error in test_order_status_fail: [FAIL] '\\ubc1c\\uc8fc \\uc2e4\\ud328' \\uc0c1\\ud0dc\\uc758 \\uc81c\\ud488\\uc774 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_order_status_fail.py::test_order_status_fail - ValueErr...\n============================== 1 failed in 2.06s ==============================\n",
    "duration": "3.45초"
  }
]