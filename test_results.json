[
  {
    "test_name": "test_Bay_login",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-09-10 17:24:11",
    "file": "tests/test_Bay_login.py",
    "stack": "",
    "duration": "17.99초"
  },
  {
    "test_name": "test_Bay_alert",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-09-10 17:30:57",
    "file": "tests/test_Bay_alert.py",
    "stack": "",
    "duration": "406.24초"
  },
  {
    "test_name": "test_Bay_supplier",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-09-10 17:32:03",
    "file": "tests/test_Bay_supplier.py",
    "stack": "",
    "duration": "65.76초"
  },
  {
    "test_name": "test_Bay_category",
    "status": "FAIL",
    "message": "\\u2705 \\ud604\\uc7ac \\uac12 (tab_type): \\uc218\\uc815\\ud14c\\uc2a4\\ud2b8\\n\\U0001f504 \\ubcc0\\uacbd\\ud560 \\uac12: [\\uc218\\uc815] \\uc218\\uc815\\ud14c\\uc2a4\\ud2b8\\n\\U0001f389 \\uc800\\uc7a5 \\uc644\\ub8cc (tab_type): [\\uc218\\uc815] \\uc218\\uc815\\ud14c\\uc2a4\\ud2b8\\n\\u2705 \\ud604\\uc7ac \\uac12 (tab_category): \\uc218\\uc815\\ud14c\\uc2a4\\ud2b8\\n\\U0001f504 \\ubcc0\\uacbd\\ud560 \\uac12: [\\uc218\\uc815] \\uc218\\uc815\\ud14c\\uc2a4\\ud2b8\\n\\u274c Error in test_edit_category_all (tab_category): Locator.click: Timeout 30000ms exceeded.\\nCall log:\\n  - waiting for locator(\"data-testid=btn_save\")\\n  -     - locator resolved to <button type=\"button\" data-testid=\"btn_save\" class=\"inline-flex items-center justify-center text-nowrap bg-primary-main-blue text-white h-[50px] rounded-lg px-4 text-font-18-500 w-[146px]\">\\uc800\\uc7a5</button>\\n  -   - attempting click action\\n  -     2 \\xd7 waiting for element to be visible, enabled and stable\\n  -       - element is visible, enabled and stable\\n  -       - scrolling into view if needed\\n  -       - done scrolling\\n  -       - <div aria-hidden=\"true\" class=\"fixed inset-0 bg-black/60 transition-opacity\"></div> from <div role=\"dialog\" aria-modal=\"true\" id=\"navigation-blocker\" class=\"fixed inset-0 flex items-center justify-center z-modal\">\\u2026</div> subtree intercepts pointer events\\n  -     - retrying click action\\n  -     - waiting 20ms\\n  -     2 \\xd7 waiting for element to be visible, enabled and stable\\n  -       - element is visible, enabled and stable\\n  -       - scrolling into view if needed\\n  -       - done scrolling\\n  -       - <div aria-hidden=\"true\" class=\"fixed inset-0 bg-black/60 transition-opacity\"></div> from <div role=\"dialog\" aria-modal=\"true\" id=\"navigation-blocker\" class=\"fixed inset-0 flex items-center justify-center z-modal\">\\u2026</div> subtree intercepts pointer events\\n  -     - retrying click action\\n  -       - waiting 100ms\\n  -     57 \\xd7 waiting for element to be visible, enabled and stable\\n  -        - element is visible, enabled and stable\\n  -        - scrolling into view if needed\\n  -        - done scrolling\\n  -        - <div aria-hidden=\"true\" class=\"fixed inset-0 bg-black/60 transition-opacity\"></div> from <div role=\"dialog\" aria-modal=\"true\" id=\"navigation-blocker\" class=\"fixed inset-0 flex items-center justify-center z-modal\">\\u2026</div> subtree intercepts pointer events\\n  -      - retrying click action\\n  -        - waiting 500ms\\n",
    "timestamp": "2025-09-10 17:34:19",
    "file": "tests/test_Bay_category.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 4 items\n\ntests\\test_Bay_category.py ..F.                                          [100%]\n\n================================== FAILURES ===================================\n___________________________ test_edit_category_all ____________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/categories_management#product_group'>\n\n    def test_edit_category_all(page: Page):\n        login_and_go_to_add_page(page)\n    \n        test_cases = [\n            (\"tab_type\", \"input_kor\", \"input_eng\", True, \"구분 저장이 완료되었습니다.\", \"사용 중인 구분명을 수정하시겠습니까?\"),\n            (\"tab_category\", \"input_kor\", \"input_eng\", True, \"종류 저장이 완료되었습니다.\", \"사용 중인 종류명을 수정하시겠습니까?\"),\n            (\"tab_maker\", \"input_kor\", \"input_eng\", False, \"제조사 저장이 완료되었습니다.\", \"사용 중인 제조사명을 수정하시겠습니까?\"),\n        ]\n    \n        for tab, testid_kor, testid_eng, require_eng, expected_msg, txt_nosave in test_cases:\n            try:\n                page.click(f\"data-testid={tab}\")\n                page.wait_for_timeout(2000)\n    \n                name_kr_locators = page.locator(f\"input[data-testid='{testid_kor}']\")\n                row_count = name_kr_locators.count()\n    \n                item_to_edit = None\n                current_value = None\n    \n                for i in range(row_count):\n                    value = name_kr_locators.nth(i).input_value().strip()\n                    if value.startswith(\"수정테스트\") or value.startswith(\"[수정] 수정테스트\"):\n                        item_to_edit = name_kr_locators.nth(i)\n                        current_value = value\n                        break\n    \n                if not item_to_edit:\n                    pytest.fail(f\"\\u26a0\\ufe0f {tab}: '\\uc218\\uc815\\ud14c\\uc2a4\\ud2b8' \\ub610\\ub294 '[\\uc218\\uc815] \\uc218\\uc815\\ud14c\\uc2a4\\ud2b8' \\ud56d\\ubaa9\\uc744 \\ucc3e\\uc744 \\uc218 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.\")\n    \n                print(f\"\\u2705 \\ud604\\uc7ac \\uac12 ({tab}): {current_value}\")\n    \n                if current_value.startswith(\"[수정]\"):\n                    new_value = current_value.replace(\"[수정] \", \"\", 1)\n                else:\n                    new_value = f\"[수정] {current_value}\"\n    \n                print(f\"\\U0001f504 \\ubcc0\\uacbd\\ud560 \\uac12: {new_value}\")\n    \n                item_to_edit.fill(new_value)\n                page.wait_for_timeout(500)\n>               page.locator(\"data-testid=btn_save\").click()\n\ntests\\test_Bay_category.py:183: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:15464: in click\n    self._sync(\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_locator.py:156: in click\n    return await self._frame.click(self._selector, strict=True, **params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:488: in click\n    await self._channel.send(\"click\", locals_to_params(locals()))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x00000170E44BFCB0>\ncb = <function Channel.send.<locals>.<lambda> at 0x00000170E4A807C0>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.click: Timeout 30000ms exceeded.\nE           Call log:\nE             - waiting for locator(\"data-testid=btn_save\")\nE             -     - locator resolved to <button type=\"button\" data-testid=\"btn_save\" class=\"inline-flex items-center justify-center text-nowrap bg-primary-main-blue text-white h-[50px] rounded-lg px-4 text-font-18-500 w-[146px]\">저장</button>\nE             -   - attempting click action\nE             -     2 × waiting for element to be visible, enabled and stable\nE             -       - element is visible, enabled and stable\nE             -       - scrolling into view if needed\nE             -       - done scrolling\nE             -       - <div aria-hidden=\"true\" class=\"fixed inset-0 bg-black/60 transition-opacity\"></div> from <div role=\"dialog\" aria-modal=\"true\" id=\"navigation-blocker\" class=\"fixed inset-0 flex items-center justify-center z-modal\">…</div> subtree intercepts pointer events\nE             -     - retrying click action\nE             -     - waiting 20ms\nE             -     2 × waiting for element to be visible, enabled and stable\nE             -       - element is visible, enabled and stable\nE             -       - scrolling into view if needed\nE             -       - done scrolling\nE             -       - <div aria-hidden=\"true\" class=\"fixed inset-0 bg-black/60 transition-opacity\"></div> from <div role=\"dialog\" aria-modal=\"true\" id=\"navigation-blocker\" class=\"fixed inset-0 flex items-center justify-center z-modal\">…</div> subtree intercepts pointer events\nE             -     - retrying click action\nE             -       - waiting 100ms\nE             -     57 × waiting for element to be visible, enabled and stable\nE             -        - element is visible, enabled and stable\nE             -        - scrolling into view if needed\nE             -        - done scrolling\nE             -        - <div aria-hidden=\"true\" class=\"fixed inset-0 bg-black/60 transition-opacity\"></div> from <div role=\"dialog\" aria-modal=\"true\" id=\"navigation-blocker\" class=\"fixed inset-0 flex items-center justify-center z-modal\">…</div> subtree intercepts pointer events\nE             -      - retrying click action\nE             -        - waiting 500ms\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError\n---------------------------- Captured stdout call -----------------------------\n\\u2705 \\ud604\\uc7ac \\uac12 (tab_type): \\uc218\\uc815\\ud14c\\uc2a4\\ud2b8\\n\\U0001f504 \\ubcc0\\uacbd\\ud560 \\uac12: [\\uc218\\uc815] \\uc218\\uc815\\ud14c\\uc2a4\\ud2b8\\n\\U0001f389 \\uc800\\uc7a5 \\uc644\\ub8cc (tab_type): [\\uc218\\uc815] \\uc218\\uc815\\ud14c\\uc2a4\\ud2b8\\n\\u2705 \\ud604\\uc7ac \\uac12 (tab_category): \\uc218\\uc815\\ud14c\\uc2a4\\ud2b8\\n\\U0001f504 \\ubcc0\\uacbd\\ud560 \\uac12: [\\uc218\\uc815] \\uc218\\uc815\\ud14c\\uc2a4\\ud2b8\\n\\u274c Error in test_edit_category_all (tab_category): Locator.click: Timeout 30000ms exceeded.\\nCall log:\\n  - waiting for locator(\"data-testid=btn_save\")\\n  -     - locator resolved to <button type=\"button\" data-testid=\"btn_save\" class=\"inline-flex items-center justify-center text-nowrap bg-primary-main-blue text-white h-[50px] rounded-lg px-4 text-font-18-500 w-[146px]\">\\uc800\\uc7a5</button>\\n  -   - attempting click action\\n  -     2 \\xd7 waiting for element to be visible, enabled and stable\\n  -       - element is visible, enabled and stable\\n  -       - scrolling into view if needed\\n  -       - done scrolling\\n  -       - <div aria-hidden=\"true\" class=\"fixed inset-0 bg-black/60 transition-opacity\"></div> from <div role=\"dialog\" aria-modal=\"true\" id=\"navigation-blocker\" class=\"fixed inset-0 flex items-center justify-center z-modal\">\\u2026</div> subtree intercepts pointer events\\n  -     - retrying click action\\n  -     - waiting 20ms\\n  -     2 \\xd7 waiting for element to be visible, enabled and stable\\n  -       - element is visible, enabled and stable\\n  -       - scrolling into view if needed\\n  -       - done scrolling\\n  -       - <div aria-hidden=\"true\" class=\"fixed inset-0 bg-black/60 transition-opacity\"></div> from <div role=\"dialog\" aria-modal=\"true\" id=\"navigation-blocker\" class=\"fixed inset-0 flex items-center justify-center z-modal\">\\u2026</div> subtree intercepts pointer events\\n  -     - retrying click action\\n  -       - waiting 100ms\\n  -     57 \\xd7 waiting for element to be visible, enabled and stable\\n  -        - element is visible, enabled and stable\\n  -        - scrolling into view if needed\\n  -        - done scrolling\\n  -        - <div aria-hidden=\"true\" class=\"fixed inset-0 bg-black/60 transition-opacity\"></div> from <div role=\"dialog\" aria-modal=\"true\" id=\"navigation-blocker\" class=\"fixed inset-0 flex items-center justify-center z-modal\">\\u2026</div> subtree intercepts pointer events\\n  -      - retrying click action\\n  -        - waiting 500ms\\n\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_category.py::test_edit_category_all - playwright._impl....\n=================== 1 failed, 3 passed in 134.27s (0:02:14) ===================\n",
    "duration": "135.59초"
  },
  {
    "test_name": "test_Bay_rule_order",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-09-10 17:36:53",
    "file": "tests/test_Bay_rule_order.py",
    "stack": "",
    "duration": "154.60초"
  },
  {
    "test_name": "test_Bay_rule_approval",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-09-10 17:38:22",
    "file": "tests/test_Bay_rule_approval.py",
    "stack": "",
    "duration": "89.08초"
  },
  {
    "test_name": "test_Bay_product",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-09-10 17:40:42",
    "file": "tests/test_Bay_product.py",
    "stack": "",
    "duration": "139.45초"
  },
  {
    "test_name": "test_Bay_product_upload_validation",
    "status": "FAIL",
    "message": "tests\\test_Bay_product_upload_validation.py:291: AssertionError",
    "timestamp": "2025-09-10 17:42:13",
    "file": "tests/test_Bay_product_upload_validation.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 3 items\n\ntests\\test_Bay_product_upload_validation.py .F.                          [100%]\n\n================================== FAILURES ===================================\n____________________ test_upload_product_validation_second ____________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/products/excel-preview'>\n\n    def test_upload_product_validation_second(page: Page):\n        bay_login(page, \"admin\")\n        page.goto(URLS[\"bay_prdList\"])\n    \n        file_path = \"data/validation_2.xlsx\"\n    \n        # --- 업로드 공통 유틸 ---\n        workbook = openpyxl.load_workbook(file_path)\n        sheet = workbook.active\n        headers = [cell.value for cell in sheet[1] if cell.value is not None]\n    \n        page.locator(\"data-testid=btn_excel\").hover()\n        page.locator(\"data-testid=btn_upload\").click()\n        page.set_input_files(\"input[type='file']\", file_path)\n        page.wait_for_selector(\"data-testid=col_type\", timeout=10000)\n    \n        errors, summary = [], []\n        total_rows = 0\n    \n        def clean_excel_value(cell_value):\n            if cell_value is None:\n                return \"\"\n            if isinstance(cell_value, (int, float)):\n                # return f\"{int(cell_value):,}\"  # 천 단위 콤마 적용\n                return f\"{int(cell_value)}\"  # 콤마 없이 노출\n            return str(cell_value).strip()\n    \n        def expect_cell_value(cell_locator, expected_value, timeout=3000):\n            input_locator = cell_locator.locator(\"input\")\n            span_locator = cell_locator.locator(\"span\")\n    \n            if expected_value is None:\n                expected_value = \"\"\n    \n            if input_locator.count() > 0:\n                expect(input_locator).to_have_value(expected_value, timeout=timeout)\n            elif span_locator.count() > 0:\n                expect(span_locator).to_have_text(expected_value, timeout=timeout)\n            else:\n                expect(cell_locator).to_have_text(expected_value, timeout=timeout)\n    \n    \n        def get_tooltip_text(row_num: int) -> str:\n            tooltip = page.locator(\"[data-testid=error_tooltip][data-state='delayed-open']\")\n            page.wait_for_timeout(1000)\n            raw_text = tooltip.text_content().strip()\n            # 중복된 문구 제거\n            parts = raw_text.split(\")\")\n            deduped = []\n            for p in parts:\n                p = p.strip()\n                if p and p + \")\" not in deduped:\n                    deduped.append(p + \")\")\n            text = \"\".join(deduped)\n            print(f\"\\u26a0\\ufe0f {row_num}\\ud589 Tooltip \\ud655\\uc778\\ub428 \\u2192 {text}\")\n            return text\n    \n        # --- 검증 시작 ---\n        for row_idx, row in enumerate(sheet.iter_rows(min_row=2, values_only=True), start=0):\n            if not any(row):\n                continue\n            table_row = page.locator(\"table tbody tr\").nth(row_idx)\n            ui_row_num = row_idx + 1\n            total_rows += 1\n            row_data = {}\n    \n            for header_name, cell_value in zip(headers, row):\n                col_id = HEADER_MAP.get(header_name)\n                if not col_id:\n                    continue\n    \n                cell_locator = table_row.locator(f\"[data-testid={col_id}]\")\n                clean_value = clean_excel_value(cell_value)\n                ui_expected = clean_value if clean_value != \"\" else header_name\n                row_data[header_name] = clean_value\n>               expect_cell_value(cell_locator, ui_expected)\n\ntests\\test_Bay_product_upload_validation.py:329: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncell_locator = <Locator frame=<Frame name= url='https://stg.bay.centurion.ai.kr/products/excel-preview'> selector='table tbody tr >> nth=2 >> [data-testid=col_safe_qty]'>\nexpected_value = '9999', timeout = 3000\n\n    def expect_cell_value(cell_locator, expected_value, timeout=3000):\n        input_locator = cell_locator.locator(\"input\")\n        span_locator = cell_locator.locator(\"span\")\n    \n        if expected_value is None:\n            expected_value = \"\"\n    \n        if input_locator.count() > 0:\n            expect(input_locator).to_have_value(expected_value, timeout=timeout)\n        elif span_locator.count() > 0:\n>           expect(span_locator).to_have_text(expected_value, timeout=timeout)\nE           AssertionError: Locator expected to have text '9999'\nE           Actual value: 9,999 \nE           Call log:\nE             - LocatorAssertions.to_have_text with timeout 3000ms\nE             -   - waiting for locator(\"table tbody tr\").nth(2).locator(\"[data-testid=col_safe_qty]\").locator(\"span\")\nE             -     7 × locator resolved to <span class=\"truncate\">9,999</span>\nE             -       - unexpected value \"9,999\"\n\ntests\\test_Bay_product_upload_validation.py:291: AssertionError\n---------------------------- Captured stdout call -----------------------------\n\\u26a0\\ufe0f 1\\ud589 Tooltip \\ud655\\uc778\\ub428 \\u2192 \\ucd5c\\ub300 100\\uc790\\uae4c\\uc9c0 \\uc785\\ub825\\ud560 \\uc218 \\uc788\\uc2b5\\ub2c8\\ub2e4. (\\uad6c\\ubd84\\uba85, \\uad6c\\ubd84\\uba85(\\uc601\\ubb38), \\uc81c\\ud488\\uba85, \\uc81c\\ud488\\uba85(\\uc601\\ubb38)\\n\\u26a0\\ufe0f 1\\ud589 Tooltip \\ud655\\uc778\\ub428 \\u2192 \\ucd5c\\ub300 100\\uc790\\uae4c\\uc9c0 \\uc785\\ub825\\ud560 \\uc218 \\uc788\\uc2b5\\ub2c8\\ub2e4. (\\uad6c\\ubd84\\uba85, \\uad6c\\ubd84\\uba85(\\uc601\\ubb38), \\uc81c\\ud488\\uba85, \\uc81c\\ud488\\uba85(\\uc601\\ubb38)\\n\\u26a0\\ufe0f 2\\ud589 Tooltip \\ud655\\uc778\\ub428 \\u2192 \\ucd5c\\ub300 100\\uc790\\uae4c\\uc9c0 \\uc785\\ub825\\ud560 \\uc218 \\uc788\\uc2b5\\ub2c8\\ub2e4. (\\uc81c\\ud488\\uba85, \\uc81c\\ud488\\uba85(\\uc601\\ubb38)\\n\\u26a0\\ufe0f 2\\ud589 Tooltip \\ud655\\uc778\\ub428 \\u2192 \\ucd5c\\ub300 100\\uc790\\uae4c\\uc9c0 \\uc785\\ub825\\ud560 \\uc218 \\uc788\\uc2b5\\ub2c8\\ub2e4. (\\uc81c\\ud488\\uba85, \\uc81c\\ud488\\uba85(\\uc601\\ubb38)\\n\\u26a0\\ufe0f 3\\ud589 Tooltip \\ud655\\uc778\\ub428 \\u2192 \\ud544\\uc218 \\uc785\\ub825 \\ud56d\\ubaa9\\uc785\\ub2c8\\ub2e4. (\\uad6c\\ubd84\\uba85, \\uc885\\ub958\\uba85, \\uc81c\\uc870\\uc0ac\\uba85)\\ud55c\\uae00\\uc740 \\uc785\\ub825\\ud560 \\uc218 \\uc5c6\\ub294 \\ud56d\\ubaa9\\uc785\\ub2c8\\ub2e4. (\\uad6c\\ubd84\\uba85(\\uc601\\ubb38), \\uc885\\ub958\\uba85(\\uc601\\ubb38), \\uc81c\\uc870\\uc0ac\\uba85(\\uc601\\ubb38)\\n\\u26a0\\ufe0f 3\\ud589 Tooltip \\ud655\\uc778\\ub428 \\u2192 \\ud544\\uc218 \\uc785\\ub825 \\ud56d\\ubaa9\\uc785\\ub2c8\\ub2e4. (\\uad6c\\ubd84\\uba85, \\uc885\\ub958\\uba85, \\uc81c\\uc870\\uc0ac\\uba85)\\ud55c\\uae00\\uc740 \\uc785\\ub825\\ud560 \\uc218 \\uc5c6\\ub294 \\ud56d\\ubaa9\\uc785\\ub2c8\\ub2e4. (\\uad6c\\ubd84\\uba85(\\uc601\\ubb38), \\uc885\\ub958\\uba85(\\uc601\\ubb38), \\uc81c\\uc870\\uc0ac\\uba85(\\uc601\\ubb38)\\n\\u26a0\\ufe0f 3\\ud589 Tooltip \\ud655\\uc778\\ub428 \\u2192 \\ud544\\uc218 \\uc785\\ub825 \\ud56d\\ubaa9\\uc785\\ub2c8\\ub2e4. (\\uad6c\\ubd84\\uba85, \\uc885\\ub958\\uba85, \\uc81c\\uc870\\uc0ac\\uba85)\\ud55c\\uae00\\uc740 \\uc785\\ub825\\ud560 \\uc218 \\uc5c6\\ub294 \\ud56d\\ubaa9\\uc785\\ub2c8\\ub2e4. (\\uad6c\\ubd84\\uba85(\\uc601\\ubb38), \\uc885\\ub958\\uba85(\\uc601\\ubb38), \\uc81c\\uc870\\uc0ac\\uba85(\\uc601\\ubb38)\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_product_upload_validation.py::test_upload_product_validation_second\n=================== 1 failed, 2 passed in 90.17s (0:01:30) ====================\n",
    "duration": "91.48초"
  },
  {
    "test_name": "test_Bay_product_upload",
    "status": "FAIL",
    "message": "E   ImportError: cannot import name 'update_excel_products' from 'helpers.product_utils' (C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\\helpers\\product_utils.py)",
    "timestamp": "2025-09-10 17:42:16",
    "file": "tests/test_Bay_product_upload.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 0 items / 1 error\n\n=================================== ERRORS ====================================\n______________ ERROR collecting tests/test_Bay_product_upload.py ______________\nImportError while importing test module 'C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\\tests\\test_Bay_product_upload.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\importlib\\__init__.py:88: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests\\test_Bay_product_upload.py:8: in <module>\n    from helpers.product_utils import append_product_name, verify_products_in_list, update_excel_products\nE   ImportError: cannot import name 'update_excel_products' from 'helpers.product_utils' (C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\\helpers\\product_utils.py)\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nERROR tests/test_Bay_product_upload.py\n!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!\n============================== 1 error in 0.75s ===============================\n",
    "duration": "2.28초"
  },
  {
    "test_name": "test_Bay_rule_order_apply_bulk",
    "status": "FAIL",
    "message": "..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError",
    "timestamp": "2025-09-10 17:43:07",
    "file": "tests/test_Bay_rule_order_apply_bulk.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_rule_order_apply_bulk.py F                                [100%]\n\n================================== FAILURES ===================================\n_________________________ test_apply_rule_order_bulk __________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/orders/rule-management/bulk-apply?name=%EC%97%91%EC%85%80%EC%97%85%EB%A1%9C%EB%93%9C_0910'>\n\n    def test_apply_rule_order_bulk(page:Page):\n        bay_login(page, \"admin\")\n        page.goto(URLS[\"bay_rules\"])\n        page.wait_for_timeout(2000)\n    \n        rule_name = \"일괄 적용 확인 규칙\"\n    \n        page.locator(\"data-testid=btn_register_bulk\").click()\n        page.wait_for_selector(\"data-testid=drop_rule_trigger\", timeout=5000)\n    \n        page.locator(\"data-testid=drop_rule_trigger\").click()\n        page.wait_for_selector(\"data-testid=drop_rule_search\", timeout=3000)\n        page.locator(\"data-testid=drop_rule_search\").fill(rule_name)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=drop_rule_item\", has_text=rule_name).click()\n        page.wait_for_timeout(1000)\n    \n        today = datetime.date.today()\n        mmdd = today.strftime(\"%m%d\")\n        today_products = f\"엑셀업로드_{mmdd}\"\n    \n        page.locator(\"data-testid=input_search\").fill(today_products)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_search\").click()\n        page.wait_for_timeout(2000)\n    \n        last_height = 0\n        while True:\n            page.evaluate(\"window.scrollBy(0, document.body.scrollHeight)\")\n            page.wait_for_timeout(1000)\n            new_height = page.evaluate(\"document.body.scrollHeight\")\n            if new_height == last_height:  # 더 이상 로딩 없음\n                break\n            last_height = new_height\n    \n        # 엑셀 제품 목록 로드\n        excel_products = load_excel_products()\n        prdname_list = [product.get(\"kor\") for product in excel_products]\n        excel_count = len(prdname_list)\n    \n        # 테이블 탐색 후 체크박스 선택\n        rows = page.locator(\"table tbody tr\")\n        row_count = rows.count()\n        selected = 0\n    \n        for i in range(row_count):\n            row = rows.nth(i)\n            row.scroll_into_view_if_needed()\n            page.wait_for_timeout(200)\n    \n            cell_text = row.locator(\"td\").nth(3).inner_text().strip()\n            cell_kor_name = cell_text.split(\"\\n\")[0].strip()\n    \n            if cell_kor_name in prdname_list:\n                checkbox = row.locator(\"td\").nth(0)\n                checkbox.scroll_into_view_if_needed()\n                checkbox.click()\n                page.wait_for_timeout(200)\n                print(f\"\\u2705 {i+1}\\ud589: '{cell_kor_name}' \\uccb4\\ud06c\\ubc15\\uc2a4 \\ud074\\ub9ad \\uc644\\ub8cc\")\n                selected += 1\n    \n        if selected == 0:\n            print(\"\\u26a0\\ufe0f \\ub4f1\\ub85d\\ub41c \\uc81c\\ud488\\uba85\\uacfc \\uc77c\\uce58\\ud558\\ub294 \\ud589\\uc744 \\ucc3e\\uc9c0 \\ubabb\\ud568\")\n    \n        # 상단으로 이동\n        page.evaluate(\"window.scrollTo(0, 0)\")\n        page.wait_for_timeout(1000)\n    \n        # 저장 버튼 클릭\n>       page.locator(\"data-testid=btn_save\").click()\n\ntests\\test_Bay_rule_order_apply_bulk.py:106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:15464: in click\n    self._sync(\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_locator.py:156: in click\n    return await self._frame.click(self._selector, strict=True, **params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:488: in click\n    await self._channel.send(\"click\", locals_to_params(locals()))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x000002DC29DFFE00>\ncb = <function Channel.send.<locals>.<lambda> at 0x000002DC2A1CA480>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.click: Timeout 30000ms exceeded.\nE           Call log:\nE             - waiting for locator(\"data-testid=btn_save\")\nE             -     - locator resolved to <button disabled type=\"button\" data-testid=\"btn_save\" class=\"inline-flex items-center justify-center text-nowrap h-[50px] rounded-lg px-4 text-font-18-500 bg-gray-300 text-white hover:bg-gray-300 w-[146px]\">완료</button>\nE             -   - attempting click action\nE             -     2 × waiting for element to be visible, enabled and stable\nE             -       - element is not enabled\nE             -     - retrying click action\nE             -     - waiting 20ms\nE             -     2 × waiting for element to be visible, enabled and stable\nE             -       - element is not enabled\nE             -     - retrying click action\nE             -       - waiting 100ms\nE             -     58 × waiting for element to be visible, enabled and stable\nE             -        - element is not enabled\nE             -      - retrying click action\nE             -        - waiting 500ms\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError\n---------------------------- Captured stdout call -----------------------------\n\\u2705 excel_products \\ub85c\\ub4dc \\uc644\\ub8cc: 0\\uac1c\\n\\u26a0\\ufe0f \\ub4f1\\ub85d\\ub41c \\uc81c\\ud488\\uba85\\uacfc \\uc77c\\uce58\\ud558\\ub294 \\ud589\\uc744 \\ucc3e\\uc9c0 \\ubabb\\ud568\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_rule_order_apply_bulk.py::test_apply_rule_order_bulk - ...\n============================= 1 failed in 49.74s ==============================\n",
    "duration": "51.22초"
  },
  {
    "test_name": "test_Bay_product_edit",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-09-10 17:46:12",
    "file": "tests/test_Bay_product_edit.py",
    "stack": "",
    "duration": "184.70초"
  },
  {
    "test_name": "test_Bay_stock_in",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-09-10 17:49:17",
    "file": "tests/test_Bay_stock_in.py",
    "stack": "",
    "duration": "185.44초"
  },
  {
    "test_name": "test_Bay_stock_out",
    "status": "FAIL",
    "message": "..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: Error",
    "timestamp": "2025-09-10 17:55:20",
    "file": "tests/test_Bay_stock_out.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 4 items\n\ntests\\test_Bay_stock_out.py F...                                         [100%]\n\n================================== FAILURES ===================================\n___________________________ test_stock_manual_order ___________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/orders/history?start_date=2025-09-10&end_date=2025-09-10&order_status=PENDING&product_name=%EC%88%98%EB%8F%99+%EB%B0%9C%EC%A3%BC+%EC%A0%9C%ED%92%88+3&page=1'>\n\n    def test_stock_manual_order(page):\n        bay_login(page, \"jekwon\")\n        page.goto(URLS[\"bay_stock\"])\n        page.wait_for_selector(\"data-testid=input_search\", timeout=5000)\n    \n        products = [\"수동 발주 제품 1\", \"수동 발주 제품 2\", \"수동 발주 제품 3\"]\n        expected_rules = [\"승인규칙_1명\", \"승인규칙_n명\", \"자동 승인\"]\n        price = \"5000\"\n        quantity = \"10\"\n        expected_amount = \"50,000\"\n        expected_supplier = \"자동화업체D, 권정의D 010-6275-4153\"\n    \n        # 재고 가져오기\n            # 수동 발주 제품_1\n        page.locator(\"data-testid=input_search\").fill(products[0])\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_search\").click()\n        page.wait_for_timeout(2000)\n        rows = page.locator('table tbody tr')\n        stock_cell = rows.nth(0).locator('td:nth-child(6)') #(재고관리 1행 6열)\n        expected_stock1 = stock_cell.inner_text()\n    \n            # 수동 발주 제품_2\n        page.locator(\"data-testid=input_search\").fill(products[1])\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_search\").click()\n        page.wait_for_timeout(2000)\n        rows = page.locator('table tbody tr')\n        stock_cell = rows.nth(0).locator('td:nth-child(6)') #(재고관리 1행 6열)\n        expected_stock2 = stock_cell.inner_text()\n    \n        # 수동 발주 제품_3\n        page.locator(\"data-testid=input_search\").fill(products[2])\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_search\").click()\n        page.wait_for_timeout(2000)\n        rows = page.locator('table tbody tr')\n        stock_cell = rows.nth(0).locator('td:nth-child(6)') #(재고관리 1행 6열)\n        expected_stock3 = stock_cell.inner_text()\n    \n        expected_list = [expected_stock1, expected_stock2, expected_stock3]\n    \n        # 수동 발주 (수동 발주 제품_1, 2, 3)\n        page.locator(\"data-testid=btn_order\").click()\n        page.wait_for_selector(\"data-testid=drop_prdname_trigger\", timeout=10000)\n        for idx, product in enumerate(products, start=1):\n            page.locator(\"data-testid=drop_prdname_trigger\").last.click()\n            page.wait_for_selector(\"data-testid=drop_prdname_search\", timeout=3000)\n            page.locator(\"data-testid=drop_prdname_search\").fill(product)\n            page.wait_for_timeout(1000)\n            page.locator(\"data-testid=drop_prdname_item\", has_text=product).click()\n            page.wait_for_timeout(1000)\n    \n            current_stock = page.locator(\"data-testid=txt_current_stock\").last.input_value().strip()\n            assert current_stock == expected_list[idx-1], f\"재고가 일치하지 않음 (기대 값:{expected_list[idx-1]}, 노출 값: {current_stock})\"\n            page.wait_for_timeout(1000)\n    \n            page.locator(\"data-testid=input_price\").last.fill(price)\n            page.wait_for_timeout(1000)\n            page.locator(\"data-testid=input_qty\").last.fill(quantity)\n            page.wait_for_timeout(1000)\n    \n            amount= page.locator(\"data-testid=txt_amount\").last.input_value().strip()\n            supplier = page.locator(\"data-testid=txt_supplier\").last.input_value().strip()\n            rule = page.locator(\"data-testid=txt_rule\").last.input_value().strip()\n    \n            assert amount == expected_amount, f\"발주 금액이 일치하지 않음 (기대 값:{expected_amount}, 노출 값: {amount})\"\n            assert supplier == expected_supplier, f\"업체명이 일치하지 않음 (기대 값:{expected_supplier}, 노출 값: {supplier})\"\n            assert rule == expected_rules[idx-1], f\"승인 규칙이 일치하지 않음 (기대 값:{expected_rules[idx-1]}, 노출 값: {rule})\"\n    \n            if idx < len(products):\n                page.locator(\"data-testid=btn_addrow\").click()\n                page.wait_for_timeout(1000)\n    \n        # 저장\n    \n        page.locator(\"data-testid=btn_save\").click()\n        expect(page.locator(\"data-testid=txt_reject\")).to_have_text(\"수동 발주를 진행하시겠습니까?\", timeout=3000)\n        page.locator(\"data-testid=btn_cancel\").click()\n        expect(page.locator(\"data-testid=txt_amount\").last).to_have_value(expected_amount, timeout=3000)\n        page.locator(\"data-testid=btn_save\").click()\n        expect(page.locator(\"data-testid=txt_reject\")).to_have_text(\"수동 발주를 진행하시겠습니까?\", timeout=3000)\n        page.locator(\"data-testid=btn_confirm\").click()\n        expect(page.locator(\"data-testid=toast_manual\")).to_have_text(\"수동 발주가 완료되었습니다.\", timeout=3000)\n        page.wait_for_timeout(1000)\n            # 현재 시간 저장 (제품 별로)\n    \n        now_str = datetime.now().strftime(\"%Y. %m. %d %H:%M\")\n    \n        # 승인 요청 내역 노출 확인\n        page.goto(URLS[\"bay_approval\"])\n        page.wait_for_timeout(2000)\n        check_approval_history(page, \"승인 대기\", products[0], auto=True, rule=\"수동 발주\", time=now_str)\n        check_approval_history(page, \"승인 대기\", products[1], auto=True, rule=\"수동 발주\", time=now_str)\n>       check_approval_history(page, \"승인 대기\", products[2], auto=None, rule=\"수동 발주\") # 발주 내역 생성 확인\n\ntests\\test_Bay_stock_out.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nhelpers\\approve_utils.py:112: in check_approval_history\n    product_text = product_cell.inner_text().strip()\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:16878: in inner_text\n    self._sync(self._impl_obj.inner_text(timeout=timeout))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_locator.py:444: in inner_text\n    return await self._frame.inner_text(\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:618: in inner_text\n    return await self._channel.send(\"innerText\", locals_to_params(locals()))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x00000239E939C2F0>\ncb = <function Channel.send.<locals>.<lambda> at 0x00000239E95CAFC0>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.Error: Locator.inner_text: Error: strict mode violation: locator(\"table tbody tr\").locator(\"td:nth-child(2)\") resolved to 2 elements:\nE               1) <td colspan=\"2\" data-testid=\"order\" data-orderid=\"1166\" class=\"align-middle text-font-14-400 p-[16px] [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px] w-[20.5%]\">…</td> aka get_by_test_id(\"order\").first\nE               2) <td colspan=\"2\" data-testid=\"order\" data-orderid=\"1139\" class=\"align-middle text-font-14-400 p-[16px] [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px] w-[20.5%]\">…</td> aka get_by_test_id(\"order\").nth(1)\nE           \nE           Call log:\nE             - waiting for locator(\"table tbody tr\").locator(\"td:nth-child(2)\")\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: Error\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_stock_out.py::test_stock_manual_order - playwright._imp...\n=================== 1 failed, 3 passed in 361.35s (0:06:01) ===================\n",
    "duration": "362.86초"
  },
  {
    "test_name": "test_Bay_order_pending",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-09-10 17:59:25",
    "file": "tests/test_Bay_order_pending.py",
    "stack": "",
    "duration": "245.01초"
  },
  {
    "test_name": "test_Bay_order_approval",
    "status": "FAIL",
    "message": "FAILED tests/test_Bay_order_approval.py::test_reject_order - AssertionError: ...",
    "timestamp": "2025-09-10 18:07:28",
    "file": "tests/test_Bay_order_approval.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 4 items\n\ntests\\test_Bay_order_approval.py .FF.                                    [100%]\n\n================================== FAILURES ===================================\n___________________________ test_approve_bulk_order ___________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/orders/pending?start_date=2025-09-10&end_date=2025-09-10&order_rules=25a2410f-82c4-4ea8-8977-8bfd22a2bf11&product_name=%EB%B0%B0%EC%B9%98+%ED%99%95%EC%9D%B8+%EC%A0%9C%ED%92%88+02'>\n\n    def test_approve_bulk_order(page:Page):\n        bay_login(page, \"jekwon\")\n        for product in bulk_products:\n    \n            page.goto(URLS[\"bay_approval\"])\n            page.wait_for_timeout(2000)\n            check_approval_status_buttons(page, \"승인 대기(승인요청)\", product, order_rule[1], bulk=True, approve=True)\n            page.wait_for_timeout(2000)\n    \n            rows = page.locator(\"table tbody tr\")\n            test_row = rows.filter(has=page.locator(\"td:nth-child(2)\", has_text=product)).last\n            approve_button = test_row.locator(\"data-testid=btn_approve\")\n            approve_button.click()\n    \n            expect(page.locator(\"data-testid=txt_approve\")).to_have_text(\"발주를 승인하시겠습니까?\", timeout=5000)\n            page.locator(\"data-testid=btn_confirm\").click()\n            expect(page.locator(\"data-testid=toast_approve\")).to_have_text(\"발주 승인이 완료되었습니다.\", timeout=5000)\n    \n            # 승인 요청 내역\n            check_approval_status_buttons(page, \"발주 승인\", product, order_rule[1], bulk=True, approve=True)\n            # 발주 예정 내역\n            page.goto(URLS[\"bay_order_pending\"])\n            page.wait_for_selector(\"data-testid=txt_product_num\", timeout=10000)\n>           check_approval_status_buttons(page, \"승인 완료\", product,  order_rule[1], bulk=True, approve=False)\n\ntests\\test_Bay_order_approval.py:143: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npage = <Page url='https://stg.bay.centurion.ai.kr/orders/pending?start_date=2025-09-10&end_date=2025-09-10&order_rules=25a2410f-82c4-4ea8-8977-8bfd22a2bf11&product_name=%EB%B0%B0%EC%B9%98+%ED%99%95%EC%9D%B8+%EC%A0%9C%ED%92%88+02'>\nstatus = '승인 완료', product = '배치 확인 제품 02', order_rule = '자동화규칙_묶음', bulk = True\napprove = False\n\n    def check_approval_status_buttons(page:Page, status:str, product:str, order_rule:str, bulk:bool, approve:bool):\n        conditions = approve_status_map[status]\n        expected_status = conditions[\"status_text\"]\n    \n        if approve is True :  # 승인 요청 내역\n            search_order_approval_history(page, expected_status, product)\n            rows = page.locator('table tbody tr')\n            test_row = rows.filter(has=page.locator(\"td:nth-child(2)\", has_text=product)).first\n            product_cell = test_row.locator('td:nth-child(2)') # 제품행 2열 (제품명)\n    \n            product_text = product_cell.inner_text().strip()\n            assert product_text == product, f\"제품명이 다름 (기대 값: {product}, 실제 값: {product_text})\"\n    \n            status_cell = test_row.locator('td:nth-child(1)') # 승인 요청 내역 제품행 1열 (승인 상태)\n            rule_cell = test_row.locator('td:nth-child(7)') # 승인 요청 내역 제품행 7열 (발주 규칙)\n            buttons = test_row.locator(\"td\").nth(-1) # 승인 요청 내역 제품행 마지막열 (승인/거절 버튼)\n    \n            status_text = status_cell.inner_text().strip()\n            rule_text = rule_cell.inner_text().strip()\n            assert status_text == expected_status, f\"상태 값이 다름 (기대: {expected_status}, 실제: {status_text})\"\n            assert rule_text == order_rule, f\"발주 규칙이 다름 (기대 값: {order_rule}, 실제 값: {rule_text})\"\n            reject_button = buttons.locator(\"data-testid=btn_reject\")\n            approve_button = buttons.locator(\"data-testid=btn_approve\")\n    \n        elif approve is False:  # 발주 예정 내역\n            search_order_pending_history(page, order_rule, product)\n            if bulk : # 통합 내역\n                page.locator(\"data-testid=btn_detail\").last.click()\n                page.wait_for_timeout(2000)\n                rows = page.locator('table tbody tr')\n                test_row = rows.filter(has=page.locator(\"td:nth-child(2)\", has_text=product)).last\n                product_cell = test_row.locator(\"td:nth-child(2)\")\n    \n            else: # 개별 내역\n                rows = page.locator('table tbody tr')\n                test_row = rows.filter(has=page.locator(\"td:nth-child(2)\", has_text=product)).last\n                product_cell = test_row.locator('td:nth-child(2)') # 공통 1행 2열 (제품명)\n    \n            product_text = product_cell.inner_text().strip()\n            assert product_text == product, f\"제품명이 다름 (기대 값: {product}, 실제 값: {product_text})\"\n    \n            status_cell = test_row.locator('td:nth-child(8)') # 발주 예정 내역 1행 8열 (승인 상태)\n            edit_button = test_row.locator(\"data-testid=btn_edit\").nth(0)\n            delete_button = test_row.locator(\"data-testid=btn_edit\").nth(1)\n    \n            buttons = test_row.locator(\"td\").nth(-1) # 발주 예정 내역 1행 마지막열 (수정/삭제 버튼)\n    \n            status_button = status_cell.locator(\"data-testid=btn_approval\")\n            status_text = status_cell.inner_text().strip()\n            delete_button = buttons.locator(\"data-testid=btn_edit\", has_text=\"삭제\")\n            edit_button   = buttons.locator(\"data-testid=btn_edit\", has_text=\"수정\")\n    \n    \n        for key, value in conditions.items():\n            if key == \"status_text\":\n>               assert status_text == expected_status, f\"상태 값이 다름 (기대 값: {expected_status}, 실제 값: {status_text})\"\nE               AssertionError: 상태 값이 다름 (기대 값: 승인 완료, 실제 값: 승인 대기)\n\nhelpers\\approve_utils.py:218: AssertionError\n______________________________ test_reject_order ______________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/orders/pending?start_date=2025-09-10&end_date=2025-09-10&order_rules=e81e6ab4-bb67-4c16-9531-161057a67218&product_name=%EB%B0%9C%EC%A3%BC+%EA%B1%B0%EC%A0%88+%EC%A0%9C%ED%92%88+2'>\n\n    def test_reject_order(page:Page):\n        bay_login(page, account=\"jekwon\")\n        page.goto(URLS[\"bay_approval\"])\n        page.wait_for_timeout(2000)\n    \n        check_approval_status_buttons(page, \"승인 대기(승인요청)\", reject_products[1], order_rule[0], bulk=False, approve=True)\n        page.wait_for_timeout(2000)\n    \n        rows = page.locator(\"table tbody tr\")\n        test_row = rows.filter(has=page.locator(\"td:nth-child(2)\", has_text=reject_products[1])).last\n        approve_button = test_row.locator(\"data-testid=btn_approve\")\n        approve_button.click()\n        expect(page.locator(\"data-testid=txt_approve\")).to_have_text(\"발주를 승인하시겠습니까?\", timeout=5000)\n        page.locator(\"data-testid=btn_confirm\").click()\n        expect(page.locator(\"data-testid=toast_approve\")).to_have_text(\"발주 승인이 완료되었습니다.\", timeout=5000)\n    \n        # 승인 요청 내역\n        check_approval_status_buttons(page, \"발주 승인\", reject_products[1], order_rule[0], bulk=False, approve=True)\n        # 발주 예정 내역\n        page.goto(URLS[\"bay_order_pending\"])\n        page.wait_for_timeout(2000)\n        check_approval_status_buttons(page, \"승인 대기(발주예정)\", reject_products[1], order_rule[0], bulk=False, approve=False)\n    \n        # 2번째 결재자\n        bay_login(page, account=\"emp\")\n        page.goto(URLS[\"bay_approval\"])\n        page.wait_for_timeout(2000)\n    \n        check_approval_status_buttons(page, \"승인 대기(승인요청)\", reject_products[1], order_rule[0], bulk=False, approve=True)\n        page.wait_for_timeout(2000)\n    \n        rows = page.locator(\"table tbody tr\")\n        test_row = rows.filter(has=page.locator(\"td:nth-child(2)\", has_text=reject_products[1])).last\n        approve_button = test_row.locator(\"data-testid=btn_reject\")\n        approve_button.click()\n        expect(page.locator(\"data-testid=txt_reject\")).to_have_text(\"발주를 거절하시겠습니까?\", timeout=5000)\n        page.locator(\"data-testid=btn_confirm\").click()\n        expect(page.locator(\"data-testid=toast_reject\")).to_have_text(\"발주 거절이 완료되었습니다.\", timeout=5000)\n    \n        # 승인 요청 내역\n        page.goto(URLS[\"bay_approval\"])\n        page.wait_for_timeout(2000)\n        check_approval_status_buttons(page, \"발주 거절\", reject_products[1], order_rule[0], bulk=False, approve=True)\n        # 발주 예정 내역\n        page.goto(URLS[\"bay_order_pending\"])\n        page.wait_for_timeout(2000)\n>       check_approval_status_buttons(page, \"승인 거절\", reject_products[1], order_rule[0], bulk=False, approve=False)\n\ntests\\test_Bay_order_approval.py:192: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npage = <Page url='https://stg.bay.centurion.ai.kr/orders/pending?start_date=2025-09-10&end_date=2025-09-10&order_rules=e81e6ab4-bb67-4c16-9531-161057a67218&product_name=%EB%B0%9C%EC%A3%BC+%EA%B1%B0%EC%A0%88+%EC%A0%9C%ED%92%88+2'>\nstatus = '승인 거절', product = '발주 거절 제품 2', order_rule = '자동화규칙_개별', bulk = False\napprove = False\n\n    def check_approval_status_buttons(page:Page, status:str, product:str, order_rule:str, bulk:bool, approve:bool):\n        conditions = approve_status_map[status]\n        expected_status = conditions[\"status_text\"]\n    \n        if approve is True :  # 승인 요청 내역\n            search_order_approval_history(page, expected_status, product)\n            rows = page.locator('table tbody tr')\n            test_row = rows.filter(has=page.locator(\"td:nth-child(2)\", has_text=product)).first\n            product_cell = test_row.locator('td:nth-child(2)') # 제품행 2열 (제품명)\n    \n            product_text = product_cell.inner_text().strip()\n            assert product_text == product, f\"제품명이 다름 (기대 값: {product}, 실제 값: {product_text})\"\n    \n            status_cell = test_row.locator('td:nth-child(1)') # 승인 요청 내역 제품행 1열 (승인 상태)\n            rule_cell = test_row.locator('td:nth-child(7)') # 승인 요청 내역 제품행 7열 (발주 규칙)\n            buttons = test_row.locator(\"td\").nth(-1) # 승인 요청 내역 제품행 마지막열 (승인/거절 버튼)\n    \n            status_text = status_cell.inner_text().strip()\n            rule_text = rule_cell.inner_text().strip()\n            assert status_text == expected_status, f\"상태 값이 다름 (기대: {expected_status}, 실제: {status_text})\"\n            assert rule_text == order_rule, f\"발주 규칙이 다름 (기대 값: {order_rule}, 실제 값: {rule_text})\"\n            reject_button = buttons.locator(\"data-testid=btn_reject\")\n            approve_button = buttons.locator(\"data-testid=btn_approve\")\n    \n        elif approve is False:  # 발주 예정 내역\n            search_order_pending_history(page, order_rule, product)\n            if bulk : # 통합 내역\n                page.locator(\"data-testid=btn_detail\").last.click()\n                page.wait_for_timeout(2000)\n                rows = page.locator('table tbody tr')\n                test_row = rows.filter(has=page.locator(\"td:nth-child(2)\", has_text=product)).last\n                product_cell = test_row.locator(\"td:nth-child(2)\")\n    \n            else: # 개별 내역\n                rows = page.locator('table tbody tr')\n                test_row = rows.filter(has=page.locator(\"td:nth-child(2)\", has_text=product)).last\n                product_cell = test_row.locator('td:nth-child(2)') # 공통 1행 2열 (제품명)\n    \n            product_text = product_cell.inner_text().strip()\n            assert product_text == product, f\"제품명이 다름 (기대 값: {product}, 실제 값: {product_text})\"\n    \n            status_cell = test_row.locator('td:nth-child(8)') # 발주 예정 내역 1행 8열 (승인 상태)\n            edit_button = test_row.locator(\"data-testid=btn_edit\").nth(0)\n            delete_button = test_row.locator(\"data-testid=btn_edit\").nth(1)\n    \n            buttons = test_row.locator(\"td\").nth(-1) # 발주 예정 내역 1행 마지막열 (수정/삭제 버튼)\n    \n            status_button = status_cell.locator(\"data-testid=btn_approval\")\n            status_text = status_cell.inner_text().strip()\n            delete_button = buttons.locator(\"data-testid=btn_edit\", has_text=\"삭제\")\n            edit_button   = buttons.locator(\"data-testid=btn_edit\", has_text=\"수정\")\n    \n    \n        for key, value in conditions.items():\n            if key == \"status_text\":\n>               assert status_text == expected_status, f\"상태 값이 다름 (기대 값: {expected_status}, 실제 값: {status_text})\"\nE               AssertionError: 상태 값이 다름 (기대 값: 승인 거절, 실제 값: 승인 대기)\n\nhelpers\\approve_utils.py:218: AssertionError\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_order_approval.py::test_approve_bulk_order - AssertionE...\nFAILED tests/test_Bay_order_approval.py::test_reject_order - AssertionError: ...\n=================== 2 failed, 2 passed in 481.12s (0:08:01) ===================\n",
    "duration": "482.54초"
  },
  {
    "test_name": "test_Bay_order_status_cancel",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-09-10 18:11:43",
    "file": "tests/test_Bay_order_status_cancel.py",
    "stack": "",
    "duration": "255.42초"
  },
  {
    "test_name": "test_Bay_order_status_request",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-09-10 18:12:45",
    "file": "tests/test_Bay_order_status_request.py",
    "stack": "",
    "duration": "61.40초"
  },
  {
    "test_name": "test_Bay_order_status_delivery",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-09-10 18:13:34",
    "file": "tests/test_Bay_order_status_delivery.py",
    "stack": "",
    "duration": "49.93초"
  },
  {
    "test_name": "test_Bay_order_status_receive",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-09-10 18:15:14",
    "file": "tests/test_Bay_order_status_receive.py",
    "stack": "",
    "duration": "99.10초"
  },
  {
    "test_name": "test_Bay_order_status_complete",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-09-10 18:16:13",
    "file": "tests/test_Bay_order_status_complete.py",
    "stack": "",
    "duration": "59.47초"
  },
  {
    "test_name": "test_Bay_order_status_batch",
    "status": "FAIL",
    "message": "..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError",
    "timestamp": "2025-09-10 18:17:28",
    "file": "tests/test_Bay_order_status_batch.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 3 items\n\ntests\\test_Bay_order_status_batch.py FFF                                 [100%]\n\n================================== FAILURES ===================================\n__________________________ test_cancel_batch_history __________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/orders/history?start_date=2025-09-10&end_date=2025-09-10&order_status=PENDING&product_name=%EB%B0%B0%EC%B9%98+%ED%99%95%EC%9D%B8+%EC%A0%9C%ED%92%88+03&page=1'>\n\n    def test_cancel_batch_history(page:Page):\n    \n        bay_login(page, \"jekwon\")\n        page.goto(URLS[\"bay_orderList\"])\n        page.wait_for_timeout(2000)\n    \n>       search_order_history(page, product_list[2],\"발주 요청\")\n\ntests\\test_Bay_order_status_batch.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nhelpers\\order_status_utils.py:243: in search_order_history\n    page.wait_for_selector(\"data-testid=history\",timeout=5000)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:8181: in wait_for_selector\n    self._sync(\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_page.py:424: in wait_for_selector\n    return await self._main_frame.wait_for_selector(**locals_to_params(locals()))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:323: in wait_for_selector\n    await self._channel.send(\"waitForSelector\", locals_to_params(locals()))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x00000143DFF70050>\ncb = <function Channel.send.<locals>.<lambda> at 0x00000143E01DF7E0>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Page.wait_for_selector: Timeout 5000ms exceeded.\nE           Call log:\nE             - waiting for locator(\"data-testid=history\") to be visible\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError\n________________________ test_receive_without_tracking ________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/orders/history?start_date=2025-09-10&end_date=2025-09-10&order_status=PENDING&product_name=%EB%B0%B0%EC%B9%98+%ED%99%95%EC%9D%B8+%EC%A0%9C%ED%92%88+06&page=1'>\n\n    def test_receive_without_tracking(page:Page):\n    \n        # 대표 내역 확인 후 order_id 추출\n        products = [\"배치 확인 제품 04\", \"배치 확인 제품 05\", \"배치 확인 제품 06\"]\n    \n        bay_login(page, \"jekwon\")\n        page.goto(URLS[\"bay_orderList\"])\n        page.wait_for_timeout(2000)\n>       search_order_history(page, product_list[5], \"발주 요청\")\n\ntests\\test_Bay_order_status_batch.py:175: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nhelpers\\order_status_utils.py:243: in search_order_history\n    page.wait_for_selector(\"data-testid=history\",timeout=5000)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:8181: in wait_for_selector\n    self._sync(\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_page.py:424: in wait_for_selector\n    return await self._main_frame.wait_for_selector(**locals_to_params(locals()))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:323: in wait_for_selector\n    await self._channel.send(\"waitForSelector\", locals_to_params(locals()))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x00000143DFF70050>\ncb = <function Channel.send.<locals>.<lambda> at 0x00000143DFF6F560>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Page.wait_for_selector: Timeout 5000ms exceeded.\nE           Call log:\nE             - waiting for locator(\"data-testid=history\") to be visible\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError\n_________________________ test_receive_with_tracking __________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/orders/history?start_date=2025-09-10&end_date=2025-09-10&order_status=PENDING&product_name=%EB%B0%B0%EC%B9%98+%ED%99%95%EC%9D%B8+%EC%A0%9C%ED%92%88+09&page=1'>\n\n    def test_receive_with_tracking(page:Page):\n        products = [\"배치 확인 제품 07\", \"배치 확인 제품 08\", \"배치 확인 제품 09\"]\n    \n        bay_login(page, \"jekwon\")\n        page.goto(URLS[\"bay_orderList\"])\n        page.wait_for_timeout(2000)\n>       search_order_history(page, product_list[8], \"발주 요청\")\n\ntests\\test_Bay_order_status_batch.py:283: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nhelpers\\order_status_utils.py:243: in search_order_history\n    page.wait_for_selector(\"data-testid=history\",timeout=5000)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:8181: in wait_for_selector\n    self._sync(\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_page.py:424: in wait_for_selector\n    return await self._main_frame.wait_for_selector(**locals_to_params(locals()))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:323: in wait_for_selector\n    await self._channel.send(\"waitForSelector\", locals_to_params(locals()))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x00000143DFF70050>\ncb = <function Channel.send.<locals>.<lambda> at 0x00000143E01DF600>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Page.wait_for_selector: Timeout 5000ms exceeded.\nE           Call log:\nE             - waiting for locator(\"data-testid=history\") to be visible\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_order_status_batch.py::test_cancel_batch_history - play...\nFAILED tests/test_Bay_order_status_batch.py::test_receive_without_tracking - ...\nFAILED tests/test_Bay_order_status_batch.py::test_receive_with_tracking - pla...\n======================== 3 failed in 73.30s (0:01:13) =========================\n",
    "duration": "74.61초"
  },
  {
    "test_name": "test_Bay_stock_history",
    "status": "FAIL",
    "message": "..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError",
    "timestamp": "2025-09-10 18:19:25",
    "file": "tests/test_Bay_stock_history.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 2 items\n\ntests\\test_Bay_stock_history.py FF                                       [100%]\n\n================================== FAILURES ===================================\n______________________________ test_inflow_past _______________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/stocks?product_name=%EB%93%B1%EB%A1%9D%ED%85%8C%EC%8A%A4%ED%8A%B8_0910_09TestProduct_0910_09'>\n\n    def test_inflow_past(page):\n        bay_login(page, \"jekwon\")\n        page.goto(URLS[\"bay_stock\"])\n        page.wait_for_timeout(2000)\n    \n        search_name = get_manual_product()\n    \n        page.locator(\"data-testid=input_search\").fill(search_name)\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_search\").click()\n        page.wait_for_timeout(1000)\n    \n        product_column = page.locator(\"table tbody tr\").first.locator(\"td\").nth(3)\n        stock_column = page.locator(\"table tbody tr\").first.locator(\"td\").nth(5)\n        stock_text = stock_column.text_content().strip()\n        product_name = product_column.locator(\"div\").first.text_content().strip()\n        current_stock = int(stock_text)\n        print(f\"재고량 : {stock_text}, 제품명 : {product_name}\")\n        yesterday_memo = \"어제 날짜 입고 확인 테스트\"\n        day_before_memo = \"그제 날짜 입고 확인 테스트\"\n        today_memo = \"30자까지 제한인데요. 최대글자수 꽉꽉채워서 등록합니다\"\n        yesterday = datetime.today() - timedelta(days=1)\n        day_before = datetime.today() - timedelta(days=2)\n        today_str = \"금일 재고 현황\"\n        yesterday_str = yesterday.strftime(\"%Y. %m. %d\")\n        day_before_str = day_before.strftime(\"%Y. %m. %d\")\n    \n        page.wait_for_timeout(2000)\n        # 두 날짜에 대해 각각 등록\n        register_stock_for_date(page, yesterday, search_name, current_stock, yesterday_memo)\n        register_stock_for_date(page, day_before, search_name, current_stock+100, day_before_memo)\n    \n        # 재고 상세 진입\n        page.fill(\"data-testid=input_search\", product_name)\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_search\").click()\n        page.wait_for_timeout(1000)\n        first_row_cell = page.locator(\"table tbody tr\").first.locator(\"td\").nth(3)\n>       cell_text = first_row_cell.inner_text().strip().split(\"\\n\")[0]\n\ntests\\test_Bay_stock_history.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:16878: in inner_text\n    self._sync(self._impl_obj.inner_text(timeout=timeout))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_locator.py:444: in inner_text\n    return await self._frame.inner_text(\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:618: in inner_text\n    return await self._channel.send(\"innerText\", locals_to_params(locals()))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x00000244E49482F0>\ncb = <function Channel.send.<locals>.<lambda> at 0x00000244E4B76700>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.inner_text: Timeout 30000ms exceeded.\nE           Call log:\nE             - waiting for locator(\"table tbody tr\").first.locator(\"td\").nth(3)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError\n---------------------------- Captured stdout call -----------------------------\n재고량 : 0, 제품명 : 등록테스트_0910_09TestProduct_0910_09\n____________________________ test_stock_bulk_edit _____________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/stocks?product_name=%EC%97%91%EC%85%80%EC%97%85%EB%A1%9C%EB%93%9C_0910'>\n\n    def test_stock_bulk_edit(page:Page):\n        bay_login(page, \"jekwon\")\n        page.goto(URLS[\"bay_stock\"])\n        page.wait_for_timeout(2000)\n        inflow = 25\n        new_inflow = 15\n        txt_bulk = \"2개의 재고 입고가 완료되었습니다.\"\n        txt_edit = \"재고 입고가 완료되었습니다.\"\n    \n        search_name = f\"엑셀업로드_{mmdd}\"\n        page.locator(\"data-testid=input_search\").fill(search_name)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_search\").click()\n        page.wait_for_timeout(1000)\n    \n        row1 = page.locator(\"table tbody tr\").first\n        row2 = page.locator(\"table tbody tr\").nth(1)\n        checkbox1 = row1.locator(\"td\").first\n        checkbox2 = row2.locator(\"td\").first\n        product_column1 = row1.locator(\"td\").nth(3)\n        product_column2 = row2.locator(\"td\").nth(3)\n        stock_column1 = row1.locator(\"td\").nth(5)\n        stock_column2 = row2.locator(\"td\").nth(5)\n        stock_text1 = stock_column1.text_content().strip()\n        stock_text2 = stock_column2.text_content().strip()\n        product_name1 = product_column1.locator(\"div\").first.text_content().strip()\n        product_name2 = product_column2.locator(\"div\").first.text_content().strip()\n    \n        # 재고 2개 일괄 수정(2개 모두) 후 상세 내역(2개 모두) 확인\n        page.locator(\"data-testid=btn_edit_bulk\").click()\n        expect(page.locator(\"data-testid=toast_select_stock\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(1000)\n        legacy1 = row1.locator(\"td\").nth(6).locator(\"div\")\n        inflow_legacy1 = legacy1.text_content().strip()\n        legacy2 = row2.locator(\"td\").nth(6).locator(\"div\")\n        inflow_legacy2 = legacy2.text_content().strip()\n        checkbox1.click()\n        checkbox2.click()\n        page.locator(\"data-testid=btn_edit_bulk\").click()\n        page.wait_for_timeout(1000)\n        print(f\"첫번째 항목 기존 입고량 : {inflow_legacy1}, 두번째 항목 기존 입고량: {inflow_legacy2}\")\n        input_field1 = row1.locator(\"td\").nth(6).locator(\"input\")\n        input_field2 = row2.locator(\"td\").nth(6).locator(\"input\")\n    \n        input_field1.fill(str(inflow))\n        page.wait_for_timeout(500)\n        input_field2.fill(str(inflow))\n        page.wait_for_timeout(500)\n        change1 = datetime.now()\n>       page.locator(\"data-testid=btn_edit_bulk\").click()\n\ntests\\test_Bay_stock_history.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:15464: in click\n    self._sync(\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_locator.py:156: in click\n    return await self._frame.click(self._selector, strict=True, **params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:488: in click\n    await self._channel.send(\"click\", locals_to_params(locals()))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x00000244E49482F0>\ncb = <function Channel.send.<locals>.<lambda> at 0x00000244E4C72340>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.click: Timeout 30000ms exceeded.\nE           Call log:\nE             - waiting for locator(\"data-testid=btn_edit_bulk\")\nE             -     - locator resolved to <button disabled data-testid=\"btn_edit_bulk\" class=\"inline-flex items-center justify-center text-nowrap disabled:border-gray-300 disabled:bg-white disabled:text-gray-600 h-[40px] rounded-lg p-2 text-font-16-500 shadow-default text-gray-600 border-gray-300 bg-white hover:bg-white hover:border-gray-300 w-[92px] border-0\">선택완료</button>\nE             -   - attempting click action\nE             -     2 × waiting for element to be visible, enabled and stable\nE             -       - element is not enabled\nE             -     - retrying click action\nE             -     - waiting 20ms\nE             -     2 × waiting for element to be visible, enabled and stable\nE             -       - element is not enabled\nE             -     - retrying click action\nE             -       - waiting 100ms\nE             -     57 × waiting for element to be visible, enabled and stable\nE             -        - element is not enabled\nE             -      - retrying click action\nE             -        - waiting 500ms\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError\n---------------------------- Captured stdout call -----------------------------\n첫번째 항목 기존 입고량 : 25, 두번째 항목 기존 입고량: 25\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_stock_history.py::test_inflow_past - playwright._impl._...\nFAILED tests/test_Bay_stock_history.py::test_stock_bulk_edit - playwright._im...\n======================== 2 failed in 115.98s (0:01:55) ========================\n",
    "duration": "117.36초"
  }
]