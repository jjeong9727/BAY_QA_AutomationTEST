[
  {
    "test_name": "test_Bay_login",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-17 10:44:30",
    "file": "tests/test_Bay_login.py",
    "stack": "",
    "duration": "11.85초"
  },
  {
    "test_name": "test_Bay_alert",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-17 10:45:39",
    "file": "tests/test_Bay_alert.py",
    "stack": "",
    "duration": "69.42초"
  },
  {
    "test_name": "test_Bay_supplier",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-17 10:46:23",
    "file": "tests/test_Bay_supplier.py",
    "stack": "",
    "duration": "43.89초"
  },
  {
    "test_name": "test_Bay_supplier_val",
    "status": "FAIL",
    "message": "tests\\test_Bay_supplier_val.py:32: AssertionError",
    "timestamp": "2025-07-17 10:46:34",
    "file": "tests/test_Bay_supplier_val.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_supplier_val.py F                                         [100%]\n\n================================== FAILURES ===================================\n______________________ test_register_supplier_duplicate _______________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/providers-management'>\n\n    def test_register_supplier_duplicate(page):\n        try:\n            bay_login(page)\n    \n            page.goto(URLS[\"bay_supplier\"])\n            page.wait_for_url(URLS[\"bay_supplier\"], timeout=60000)\n    \n            supplier_name = \"중복테스트\"\n            manager_name = \"중복테스트\"\n            contact_info = \"01012345678\"\n    \n            print(f\"선택된 업체: {supplier_name}, 담당자: {manager_name}, 연락처: {contact_info}\")\n    \n            # 2. 선택한 업체 정보로 중복 등록 시도\n            page.click(\"data-testid=btn_orderadd\")  # 업체 등록 모달 열기\n            page.wait_for_timeout(500)\n            page.fill(\"data-testid=input_sup_name\", supplier_name)  # 업체명 입력\n            page.wait_for_timeout(500)\n            page.fill(\"data-testid=input_sup_manager\", manager_name)  # 담당자 입력\n            page.wait_for_timeout(500)\n            page.fill(\"data-testid=input_sup_contact\", contact_info)  # 연락처 입력\n            page.wait_for_timeout(500)\n            page.click(\"data-testid=btn_confirm\")  # 완료 버튼 클릭\n            page.wait_for_timeout(500)\n    \n            # 3. 중복 알림 확인\n>           assert page.locator(\"data-testid=alert_duplicate\").is_visible(timeout=3000), \"\\u274c \\uc911\\ubcf5 \\uc54c\\ub9bc \\ubb38\\uad6c\\uac00 \\ud45c\\uc2dc\\ub418\\uc9c0 \\uc54a\\uc74c\"\nE           AssertionError: \\u274c \\uc911\\ubcf5 \\uc54c\\ub9bc \\ubb38\\uad6c\\uac00 \\ud45c\\uc2dc\\ub418\\uc9c0 \\uc54a\\uc74c\nE           assert False\nE            +  where False = is_visible(timeout=3000)\nE            +    where is_visible = <Locator frame=<Frame name= url='https://stg.bay.centurion.ai.kr/providers-management'> selector='data-testid=alert_duplicate'>.is_visible\nE            +      where <Locator frame=<Frame name= url='https://stg.bay.centurion.ai.kr/providers-management'> selector='data-testid=alert_duplicate'> = locator('data-testid=alert_duplicate')\nE            +        where locator = <Page url='https://stg.bay.centurion.ai.kr/providers-management'>.locator\n\ntests\\test_Bay_supplier_val.py:32: AssertionError\n---------------------------- Captured stdout call -----------------------------\n선택된 업체: 중복테스트, 담당자: 중복테스트, 연락처: 01012345678\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_supplier_val.py::test_register_supplier_duplicate - Ass...\n============================== 1 failed in 9.81s ==============================\n",
    "duration": "11.07초"
  },
  {
    "test_name": "test_Bay_prdctg",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-17 10:47:30",
    "file": "tests/test_Bay_prdctg.py",
    "stack": "",
    "duration": "56.11초"
  },
  {
    "test_name": "test_Bay_prdctg_val",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-17 10:48:06",
    "file": "tests/test_Bay_prdctg_val.py",
    "stack": "",
    "duration": "36.33초"
  },
  {
    "test_name": "test_Bay_prdctg_edit",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-17 10:48:54",
    "file": "tests/test_Bay_prdctg_edit.py",
    "stack": "",
    "duration": "47.64초"
  },
  {
    "test_name": "test_Bay_prdctg_delete",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-17 10:49:30",
    "file": "tests/test_Bay_prdctg_delete.py",
    "stack": "",
    "duration": "35.66초"
  },
  {
    "test_name": "test_Bay_product",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-17 10:51:41",
    "file": "tests/test_Bay_product.py",
    "stack": "",
    "duration": "131.65초"
  },
  {
    "test_name": "test_Bay_product_val",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-17 10:52:08",
    "file": "tests/test_Bay_product_val.py",
    "stack": "",
    "duration": "26.11초"
  },
  {
    "test_name": "test_Bay_product_edit",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-17 10:52:35",
    "file": "tests/test_Bay_product_edit.py",
    "stack": "",
    "duration": "27.63초"
  },
  {
    "test_name": "test_Bay_product_delete",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-17 10:53:04",
    "file": "tests/test_Bay_product_delete.py",
    "stack": "",
    "duration": "28.88초"
  },
  {
    "test_name": "test_Bay_stock_in",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-17 10:54:32",
    "file": "tests/test_Bay_stock_in.py",
    "stack": "",
    "duration": "87.47초"
  },
  {
    "test_name": "test_Bay_stock_out",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-17 10:55:48",
    "file": "tests/test_Bay_stock_out.py",
    "stack": "",
    "duration": "76.81초"
  },
  {
    "test_name": "test_Bay_order_status_request_cancel",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-17 10:56:12",
    "file": "tests/test_Bay_order_status_request_cancel.py",
    "stack": "",
    "duration": "24.03초"
  },
  {
    "test_name": "test_Bay_order_status_request",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-17 10:57:33",
    "file": "tests/test_Bay_order_status_request.py",
    "stack": "",
    "duration": "80.90초"
  },
  {
    "test_name": "test_Bay_order_status_progress_delivery",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-17 10:58:39",
    "file": "tests/test_Bay_order_status_progress_delivery.py",
    "stack": "",
    "duration": "65.39초"
  },
  {
    "test_name": "test_Bay_order_status_progress_complete",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-17 10:59:08",
    "file": "tests/test_Bay_order_status_progress_complete.py",
    "stack": "",
    "duration": "28.87초"
  },
  {
    "test_name": "test_Bay_order_status_delivery",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-17 10:59:34",
    "file": "tests/test_Bay_order_status_delivery.py",
    "stack": "",
    "duration": "26.48초"
  },
  {
    "test_name": "test_Bay_order_status_complete",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-17 11:00:04",
    "file": "tests/test_Bay_order_status_complete.py",
    "stack": "",
    "duration": "29.58초"
  },
  {
    "test_name": "test_Bay_order_status_fail",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-17 11:00:19",
    "file": "tests/test_Bay_order_status_fail.py",
    "stack": "",
    "duration": "14.88초"
  },
  {
    "test_name": "test_Bay_stock_history",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-17 11:01:52",
    "file": "tests/test_Bay_stock_history.py",
    "stack": "",
    "duration": "93.51초"
  }
]