[
  {
    "test_name": "test_Bay_login",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-18 18:15:26",
    "file": "tests/test_Bay_login.py",
    "stack": "",
    "duration": "12.11초"
  },
  {
    "test_name": "test_Bay_alert",
    "status": "FAIL",
    "message": "FAILED tests/test_Bay_alert.py::test_check_alert - AssertionError: Locator ex...",
    "timestamp": "2025-07-18 18:16:24",
    "file": "tests/test_Bay_alert.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_alert.py F                                                [100%]\n\n================================== FAILURES ===================================\n______________________________ test_check_alert _______________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/stocks/add'>\n\n    def test_check_alert(page:Page):\n        bay_login(page)\n        # [카테고리 관리] 이탈 팝업 확인\n        page.goto(URLS[\"bay_category\"])\n        page.wait_for_timeout(2000)\n        # 구분 탭\n        page.locator(\"data-testid=input_kor\").first.fill(edit_name)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=tab_category\").click()\n        expect(page.locator(\"data-testid=txt_nosave\")).to_have_text(txt_nosave, timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_confirm\").click()\n        page.wait_for_timeout(1000)\n        # 종류 탭\n        page.locator(\"data-testid=input_kor\").first.fill(edit_name)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=tab_maker\").click()\n        expect(page.locator(\"data-testid=txt_nosave\")).to_have_text(txt_nosave, timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_confirm\").click()\n        page.wait_for_timeout(1000)\n        # 제조사 탭\n        page.locator(\"data-testid=input_kor\").first.fill(edit_name)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=tab_type\").click()\n        expect(page.locator(\"data-testid=txt_nosave\")).to_have_text(txt_nosave, timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_confirm\").click()\n        page.wait_for_timeout(1000)\n        # 구분 탭에서 이탈 취소 확인\n        page.locator(\"data-testid=input_kor\").first.fill(edit_name)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=tab_category\").click()\n        expect(page.locator(\"data-testid=txt_nosave\")).to_have_text(txt_nosave, timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_cancel\").click()\n        expect(page.locator(\"data-testid=input_kor\").first).to_have_value(edit_name, timeout=3000)\n        page.wait_for_timeout(1000)\n    \n        # [제품 관리] 엑셀 다운로드 확인\n        # 오늘 날짜 포맷 (예: 2025_07_15)\n        page.goto(URLS[\"bay_prdList\"])\n        today = datetime.now().strftime(\"%Y_%m_%d\")\n        with page.expect_download() as download_info:\n            page.click('[data-testid=\"btn_download\"]')\n            page.wait_for_timeout(1000)\n        download = download_info.value\n    \n        filename = download.suggested_filename\n        print(f\"\\U0001f4c1 \\ub2e4\\uc6b4\\ub85c\\ub4dc\\ub41c \\ud30c\\uc77c\\uba85: {filename}\")\n        assert filename.startswith(today), f\"\\u274c \\ud30c\\uc77c\\uba85\\uc774 \\uc624\\ub298 \\ub0a0\\uc9dc({today})\\ub85c \\uc2dc\\uc791\\ud558\\uc9c0 \\uc54a\\uc2b5\\ub2c8\\ub2e4.\"\n    \n        # 제품 미선택 > 일괄 삭제 시도\n        page.locator(\"data-testid=btn_del_bulk\").click()\n        expect(page.locator(\"data-testid=toast_nodelete\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(500)\n    \n        # 재고 있는 제품 삭제 불가 확인\n        page.locator(\"data-testid=input_search\").fill(\"중복테스트\")\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_search\").click()\n        page.wait_for_timeout(1000)\n        rows = page.locator(\"table tbody tr\")\n        row_count = rows.count()\n    \n        for i in range(row_count):\n            edit_button = rows.nth(i).locator(\"td:nth-child(11) >> text=삭제\")\n            if edit_button.is_visible():\n                print(f\"\\u2705 {i}\\ubc88\\uc9f8 \\ud589\\uc758 \\uc0ad\\uc81c \\ubc84\\ud2bc \\ud074\\ub9ad\")\n                edit_button.click()\n                break\n    \n        expect(page.locator(\"data-testid=toast_stock\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(1000)\n    \n        # [제품 관리] 이탈 팝업 확인\n        # 등록화면\n        page.goto(URLS[\"bay_prdList\"])\n        page.wait_for_timeout(2000)\n        page.locator(\"data-testid=btn_addprd\").click()\n        page.wait_for_timeout(2000)\n        page.locator(\"data-testid=input_prdname_kor\").fill(edit_name)\n        page.locator(\"body\").click(position={\"x\": 10, \"y\": 10})\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_back\").click()\n        expect(page.locator(\"data-testid=title\")).to_have_text(txt_nosave, timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_no\").click()\n        expect(page.locator(\"data-testid=input_prdname_kor\").first).to_have_value(edit_name, timeout=3000)\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_back\").click()\n        expect(page.locator(\"data-testid=title\")).to_have_text(txt_nosave, timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_yes\").click()\n        expect(page.locator(\"data-testid=btn_addprd\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(1000)\n        # 수정화면\n        rows = page.locator(\"table tbody tr\")\n        row_count = rows.count()\n    \n        for i in range(row_count):\n            edit_button = rows.nth(i).locator(\"td:nth-child(11) >> text=수정\")\n            if edit_button.is_visible():\n                print(f\"\\u2705 {i}\\ubc88\\uc9f8 \\ud589\\uc758 \\uc218\\uc815 \\ubc84\\ud2bc \\ud074\\ub9ad\")\n                edit_button.click()\n                break\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=drop_maker_trigger\").click()\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=drop_maker_search\").fill(\"중복테스트\")\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=drop_maker_item\", has_text=\"중복테스트\").click()\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_back\").click()\n        expect(page.locator(\"data-testid=title\")).to_have_text(txt_nosave, timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_no\").click()\n        expect(page.locator(\"data-testid=drop_maker_trigger\")).to_have_text(\"중복테스트\", timeout=3000)\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_back\").click()\n        expect(page.locator(\"data-testid=title\")).to_have_text(txt_nosave, timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_yes\").click()\n        expect(page.locator(\"data-testid=btn_addprd\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(1000)\n    \n        # [재고관리] 이탈 팝업 확인\n        # # 재고 등록화면\n        txt_register = \"해당 날짜로 재고 등록하시겠습니까?\"\n        page.goto(URLS[\"bay_stock\"])\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_stockadd\").click()\n        expect(page.locator(\"data-testid=btn_addrow\")).to_be_visible(timeout=3000)\n    \n        # 삭제 불가 Alert 확인\n        page.locator(\"data-testid=btn_addrow\").click()\n        page.wait_for_timeout(1000)\n        close_btn = page.locator(\"button:has(svg path[id='Path 4'])\").last\n        expect(close_btn).to_be_visible()\n        close_btn.click()\n        page.wait_for_timeout(1000)\n        close_btn.click()\n        expect(page.locator(\"data-testid=toast_nostock\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(1000)\n    \n        # 재고량 초과 알럿 확인\n        page.locator(\"data-testid=drop_status_trigger\").click()\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=drop_status_item\",has_text=\"입고\").click()\n    \n        page.locator(\"data-testid=drop_prdname_trigger\").click()\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=drop_prdname_search\").fill(\"중복테스트\")\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=drop_prdname_item\",has_text=\"중복테스트\").click()\n        page.wait_for_timeout(1000)\n        stock_text = page.locator('[data-testid=\"txt_current_stock\"]').inner_text().strip()\n        try:\n            current_stock = int(stock_text.replace(\",\", \"\"))\n        except ValueError:\n            raise ValueError(f\"\\u274c \\ud604\\uc7ac \\uc7ac\\uace0 \\ud14d\\uc2a4\\ud2b8\\uac00 \\uc815\\uc218\\ub85c \\ubcc0\\ud658 \\ubd88\\uac00: '{stock_text}'\")\n            # 재고보다 큰 수 계산 (예: +10)\n        larger_qty = current_stock + 10\n            # input_qty에 입력\n        page.locator('[data-testid=\"input_qty\"]').fill(str(larger_qty))\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=input_memo\").fill(\"테스트 메모\")\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_save\").click()\n        expect(page.locator('[data-testid=\"txt_register\"]')).to_have_text(txt_register,timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_confirm\").click()\n        expect(page.locator('[data-testid=\"toast_over_stock\"]')).to_be_visible(timeout=3000)\n        page.wait_for_timeout(1000)\n    \n    \n        # 이탈 팝업 확인\n        page.locator(\"data-testid=btn_back\").click()\n>       expect(page.locator(\"data-testid=title\")).to_have_text(txt_nosave, timeout=3000)\nE       AssertionError: Locator expected to have text '변경 사항을 저장하지 않으시겠습니까?'\nE       Actual value: <element(s) not found> \nE       Call log:\nE         - LocatorAssertions.to_have_text with timeout 3000ms\nE         -   - waiting for locator(\"data-testid=title\")\n\ntests\\test_Bay_alert.py:193: AssertionError\n---------------------------- Captured stdout call -----------------------------\n\\U0001f4c1 \\ub2e4\\uc6b4\\ub85c\\ub4dc\\ub41c \\ud30c\\uc77c\\uba85: 2025_07_18_\\uc81c\\ud488\\ubaa9\\ub85d.xlsx\\n\\u2705 0\\ubc88\\uc9f8 \\ud589\\uc758 \\uc0ad\\uc81c \\ubc84\\ud2bc \\ud074\\ub9ad\\n\\u2705 0\\ubc88\\uc9f8 \\ud589\\uc758 \\uc218\\uc815 \\ubc84\\ud2bc \\ud074\\ub9ad\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_alert.py::test_check_alert - AssertionError: Locator ex...\n============================= 1 failed in 57.18s ==============================\n",
    "duration": "58.45초"
  },
  {
    "test_name": "test_Bay_supplier",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-18 18:17:08",
    "file": "tests/test_Bay_supplier.py",
    "stack": "",
    "duration": "44.06초"
  },
  {
    "test_name": "test_Bay_supplier_val",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-18 18:17:25",
    "file": "tests/test_Bay_supplier_val.py",
    "stack": "",
    "duration": "16.17초"
  },
  {
    "test_name": "test_Bay_prdctg",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-18 18:18:20",
    "file": "tests/test_Bay_prdctg.py",
    "stack": "",
    "duration": "55.05초"
  },
  {
    "test_name": "test_Bay_prdctg_val",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-18 18:18:56",
    "file": "tests/test_Bay_prdctg_val.py",
    "stack": "",
    "duration": "36.16초"
  },
  {
    "test_name": "test_Bay_prdctg_edit",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-18 18:19:41",
    "file": "tests/test_Bay_prdctg_edit.py",
    "stack": "",
    "duration": "45.43초"
  },
  {
    "test_name": "test_Bay_prdctg_delete",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-18 18:20:18",
    "file": "tests/test_Bay_prdctg_delete.py",
    "stack": "",
    "duration": "36.79초"
  },
  {
    "test_name": "test_Bay_product",
    "status": "FAIL",
    "message": "..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError",
    "timestamp": "2025-07-18 18:22:12",
    "file": "tests/test_Bay_product.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_product.py F                                              [100%]\n\n================================== FAILURES ===================================\n_______________________ test_register_multiple_products _______________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/products?name=%EB%93%B1%EB%A1%9D%ED%85%8C%EC%8A%A4%ED%8A%B8_0718_25'>\n\n    def test_register_multiple_products(page: Page):\n        try:\n            bay_login(page)\n            page.goto(URLS[\"bay_prdList\"])\n            page.wait_for_timeout(1000)\n            page.locator(\"data-testid=btn_addprd\").click()\n            page.wait_for_timeout(1000)\n    \n            num_products = 6\n            prdnames = []\n            prd_data = []\n    \n            type_options = [\"의약품\", \"의료기기\", \"소모품\"]\n            group_options = [\"주사제\", \"연고\", \"보톡스\"]\n            maker_options = [\"메디톡스\", \"루트로닉\", \"휴메딕스\"]\n    \n            for idx in range(num_products):\n                selected_type = select_from_dropdown(\n                    page, \"drop_type_trigger\", \"drop_type_search\", \"drop_type_item\", random.choice(type_options))\n    \n                selected_group = select_from_dropdown(\n                    page, \"drop_group_trigger\", \"drop_group_search\", \"drop_group_item\", random.choice(group_options))\n    \n                prdname_kor, prdname_eng = generate_product_names()\n                name_kor_input = page.locator(\"data-testid=input_prdname_kor\").last\n                name_kor_input.scroll_into_view_if_needed()\n                name_kor_input.fill(prdname_kor)\n                page.wait_for_timeout(1000)\n    \n                name_eng_input = page.locator(\"data-testid=input_prdname_eng\").last\n                name_eng_input.scroll_into_view_if_needed()\n                name_eng_input.fill(prdname_eng)\n                page.wait_for_timeout(1000)\n    \n                prdnames.append(prdname_kor)\n    \n                selected_maker = select_from_dropdown(\n                    page, \"drop_maker_trigger\", \"drop_maker_search\", \"drop_maker_item\", random.choice(maker_options))\n    \n                price_input = page.locator(\"data-testid=input_price\").last\n                price_input.scroll_into_view_if_needed()\n                price_input.fill(str(random.randint(1000, 10000)))\n                page.wait_for_timeout(1000)\n    \n                safety = 5\n                auto_order = 10\n    \n                safe_input = page.locator(\"data-testid=input_stk_safe\").last\n                safe_input.scroll_into_view_if_needed()\n                safe_input.fill(str(safety))\n                page.wait_for_timeout(1000)\n    \n                auto_input = page.locator(\"data-testid=input_stk_qty\").last\n                auto_input.scroll_into_view_if_needed()\n                auto_input.fill(str(auto_order))\n                page.wait_for_timeout(1000)\n    \n                txt_manager = \"권정의 010-6275-4153\"\n                page.evaluate(\"window.scrollTo(0, document.body.scrollHeight)\")\n                page.wait_for_timeout(1000)\n                supplier_trigger = page.locator(\"data-testid=drop_supplier_trigger\").last\n                supplier_trigger.scroll_into_view_if_needed()\n                supplier_trigger.click()\n                page.wait_for_timeout(1000)\n                supplier_items = page.locator(\"data-testid=drop_supplier_item\")\n                automation_supplier = supplier_items.locator(\"text=자동화업체\")\n                automation_supplier.click()\n                expect(page.locator(\"data-testid=txt_supplier_contact\")).to_have_text(txt_manager, timeout=3000)\n                page.wait_for_timeout(1000)\n    \n                prd_data.append({\n                    \"prdname_kor\": prdname_kor,\n                    \"prdname_eng\": prdname_eng,\n                    \"type_name\": selected_type,\n                    \"group\": selected_group,\n                    \"maker\": selected_maker,\n                    \"safety\": safety,\n                    \"auto_order\": auto_order\n                })\n    \n                if idx < num_products - 1:\n                    add_row_button = page.locator(\"data-testid=btn_addrow\")\n                    add_row_button.scroll_into_view_if_needed()\n                    add_row_button.wait_for(state=\"visible\", timeout=5000)\n                    add_row_button.click(force=True)\n    \n            page.evaluate(\"window.scrollTo(0, 0)\")\n            page.wait_for_timeout(1000)  # 스크롤 애니메이션 대기\n            save_btn = page.locator(\"data-testid=btn_save\")\n            save_btn.scroll_into_view_if_needed()\n            save_btn.click()\n            page.wait_for_timeout(1000)\n            print(f\"[PASS][제품관리] {num_products}개 제품 등록 및 저장 완료\")\n    \n            for product in prd_data:\n                append_product_name(**product)\n    \n>           verify_products_in_list(page, prdnames, URLS[\"bay_prdList\"], 4)\n\ntests\\test_Bay_product.py:114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nhelpers\\product_utils.py:119: in verify_products_in_list\n    cell_text = row.locator(f\"td:nth-child({table_column_index})\").inner_text().strip()\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:16878: in inner_text\n    self._sync(self._impl_obj.inner_text(timeout=timeout))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_locator.py:444: in inner_text\n    return await self._frame.inner_text(\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:618: in inner_text\n    return await self._channel.send(\"innerText\", locals_to_params(locals()))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x000001801F24FCB0>\ncb = <function Channel.send.<locals>.<lambda> at 0x000001801F2E9F80>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.inner_text: Timeout 30000ms exceeded.\nE           Call log:\nE             - waiting for locator(\"table tbody tr\").first.locator(\"td:nth-child(4)\")\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError\n---------------------------- Captured stdout call -----------------------------\n[PASS][제품관리] 6개 제품 등록 및 저장 완료\n[FAIL] 여러 개 제품 등록 실패: Locator.inner_text: Timeout 30000ms exceeded.\nCall log:\n  - waiting for locator(\"table tbody tr\").first.locator(\"td:nth-child(4)\")\n\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_product.py::test_register_multiple_products - playwrigh...\n======================== 1 failed in 112.62s (0:01:52) ========================\n",
    "duration": "113.79초"
  },
  {
    "test_name": "test_Bay_product_val",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-18 18:22:40",
    "file": "tests/test_Bay_product_val.py",
    "stack": "",
    "duration": "28.28초"
  },
  {
    "test_name": "test_Bay_product_edit",
    "status": "FAIL",
    "message": "..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError",
    "timestamp": "2025-07-18 18:23:25",
    "file": "tests/test_Bay_product_edit.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_product_edit.py F                                         [100%]\n\n================================== FAILURES ===================================\n_____________________________ test_edit_products ______________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/products?name=%EB%93%B1%EB%A1%9D%ED%85%8C%EC%8A%A4%ED%8A%B8_0718_25'>\n\n    def test_edit_products(page):\n        try:\n            bay_login(page)\n    \n            # 1. JSON에서 조건에 맞는 제품 하나 가져오기\n            product = get_deletable_products()[0]  # 또는 get_editable_product()\n            product_name = product[\"kor\"]\n            print(f\"\\U0001f3af \\uc218\\uc815 \\ub300\\uc0c1 \\uc81c\\ud488\\uba85: {product_name}\")\n    \n            # 2. 제품 검색\n            page.goto(URLS[\"bay_prdList\"])\n            page.wait_for_timeout(2000)\n            page.fill('[data-testid=\"input_search\"]', product_name)\n            page.wait_for_timeout(500)\n            page.click('[data-testid=\"btn_search\"]')\n            page.wait_for_timeout(2000)\n    \n            # 3. 검색 결과에서 해당 행의 수정 버튼 클릭\n            rows = page.locator(\"table tbody tr\")\n            row_count = rows.count()\n    \n            for i in range(row_count):\n                edit_button = rows.nth(i).locator(\"td:nth-child(11) >> text=수정\")\n                if edit_button.is_visible():\n                    print(f\"\\u2705 {i}\\ubc88\\uc9f8 \\ud589\\uc758 \\uc218\\uc815 \\ubc84\\ud2bc \\ud074\\ub9ad\")\n                    edit_button.click()\n                    break\n    \n            # 4. 제품명, 제조사 수정\n            page.wait_for_timeout(2000)\n            input_kor = page.locator('input[data-testid=\"input_prdname_kor\"]')\n>           origin_name = input_kor.input_value()\n\ntests\\test_Bay_product_edit.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:16914: in input_value\n    self._sync(self._impl_obj.input_value(timeout=timeout))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_locator.py:452: in input_value\n    return await self._frame.input_value(\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:686: in input_value\n    return await self._channel.send(\"inputValue\", locals_to_params(locals()))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x0000012CA468FCB0>\ncb = <function Channel.send.<locals>.<lambda> at 0x0000012CA475F560>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.input_value: Timeout 30000ms exceeded.\nE           Call log:\nE             - waiting for locator(\"input[data-testid=\\\"input_prdname_kor\\\"]\")\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError\n---------------------------- Captured stdout call -----------------------------\n\\U0001f3af \\uc218\\uc815 \\ub300\\uc0c1 \\uc81c\\ud488\\uba85: \\ub4f1\\ub85d\\ud14c\\uc2a4\\ud2b8_0718_25\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_product_edit.py::test_edit_products - playwright._impl....\n============================= 1 failed in 43.77s ==============================\n",
    "duration": "44.92초"
  },
  {
    "test_name": "test_Bay_product_delete",
    "status": "FAIL",
    "message": "..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError",
    "timestamp": "2025-07-18 18:24:49",
    "file": "tests/test_Bay_product_delete.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 2 items\n\ntests\\test_Bay_product_delete.py FF                                      [100%]\n\n================================== FAILURES ===================================\n_____________________________ test_delete_product _____________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/products?name=%EB%93%B1%EB%A1%9D%ED%85%8C%EC%8A%A4%ED%8A%B8_0718_26'>\nrow_index = 0\n\n    def delete_product_and_verify(page: Page, row_index: int):\n        try:\n>           product_name = page.locator(f\"table tbody tr >> nth={row_index} >> td:nth-child(4)\").inner_text().strip()\n\ntests\\test_Bay_product_delete.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:16878: in inner_text\n    self._sync(self._impl_obj.inner_text(timeout=timeout))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_locator.py:444: in inner_text\n    return await self._frame.inner_text(\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:618: in inner_text\n    return await self._channel.send(\"innerText\", locals_to_params(locals()))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x00000151B820FCB0>\ncb = <function Channel.send.<locals>.<lambda> at 0x00000151B82DF4C0>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.inner_text: Timeout 30000ms exceeded.\nE           Call log:\nE             - waiting for locator(\"table tbody tr\").first.locator(\"td:nth-child(4)\")\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\npage = <Page url='https://stg.bay.centurion.ai.kr/products?name=%EB%93%B1%EB%A1%9D%ED%85%8C%EC%8A%A4%ED%8A%B8_0718_26'>\n\n    def test_delete_product(page):\n        try:\n            bay_login(page)\n    \n            deletable_names = get_deletable_products_from_json()\n            if not deletable_names:\n                msg = \"\\u274c \\uc0ad\\uc81c \\uac00\\ub2a5\\ud55c \\uc81c\\ud488\\uc774 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.\"\n                print(msg)\n                return\n    \n            target_name = random.choice(deletable_names)\n    \n            page.goto(URLS[\"bay_prdList\"])\n            page.fill(\"data-testid=input_search\", target_name)\n            page.wait_for_timeout(1000)\n            page.click(\"data-testid=btn_search\")\n            page.wait_for_timeout(1000)\n    \n            rows = page.locator(\"table tbody tr\")\n            if rows.count() == 0:\n                msg = f\"\\u274c \\uc81c\\ud488 '{target_name}' \\uc744(\\ub97c) \\ucc3e\\uc744 \\uc218 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.\"\n                print(msg)\n                return\n    \n>           delete_product_and_verify(page, row_index=0)\n\ntests\\test_Bay_product_delete.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npage = <Page url='https://stg.bay.centurion.ai.kr/products?name=%EB%93%B1%EB%A1%9D%ED%85%8C%EC%8A%A4%ED%8A%B8_0718_26'>\nrow_index = 0\n\n    def delete_product_and_verify(page: Page, row_index: int):\n        try:\n            product_name = page.locator(f\"table tbody tr >> nth={row_index} >> td:nth-child(4)\").inner_text().strip()\n            product_display_name = product_name.splitlines()[0]\n    \n            delete_button = page.locator(f\"table tbody tr >> nth={row_index} >> td:nth-child(11) button\").nth(1)  # 0부터 시작하므로 1은 두 번째 버튼\n            delete_button.click()\n    \n    \n            page.click(\"data-testid=btn_del\")\n            page.wait_for_timeout(500)\n            page.reload()\n            page.wait_for_timeout(1000)\n    \n            if check_delete(page, product_name):\n                msg = f\"[PASS][제품관리] 제품 삭제 테스트 (삭제된 제품: '{product_display_name}')\"\n                print(msg)\n                remove_product_name_by_kor(product_display_name)  # \\u2705 JSON\\uc5d0\\uc11c \\uc81c\\uac70\n            else:\n                fail_msg = f\"[FAIL][제품관리] 제품 '{product_display_name}' 삭제 실패 (리스트에 존재)\"\n                print(fail_msg)\n    \n                assert False, fail_msg\n        except Exception as e:\n>           fail_msg = f\"[FAIL][제품관리] 제품 '{product_display_name}' 삭제 중 예외 발생\\n에러: {str(e)}\"\nE           UnboundLocalError: cannot access local variable 'product_display_name' where it is not associated with a value\n\ntests\\test_Bay_product_delete.py:75: UnboundLocalError\n---------------------------- Captured stdout call -----------------------------\n[FAIL][제품관리] 제품 삭제 중 예외 발생\n에러 내용: cannot access local variable 'product_display_name' where it is not associated with a value\n__________________________ test_bulk_delete_products __________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/products?name=%EB%93%B1%EB%A1%9D%ED%85%8C%EC%8A%A4%ED%8A%B8_0718_26'>\n\n    def test_bulk_delete_products(page):\n        try:\n            # 로그인\n            bay_login(page)\n    \n    \n            # 일괄 삭제 가능한 제품 검색\n            deletable_names = get_deletable_products_from_json()\n            if not deletable_names:\n                msg = \"\\u274c \\uc77c\\uad04 \\uc0ad\\uc81c \\uac00\\ub2a5\\ud55c \\uc81c\\ud488\\uc774 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.\"\n                print(msg)\n                return\n    \n            selected_names = random.sample(deletable_names, min(len(deletable_names), random.randint(1, 2)))\n    \n            # 제품 리스트 페이지로 이동\n    \n            selected_product_names = []\n    \n            for name in selected_names:\n                page.fill(\"data-testid=input_search\", name)\n                page.wait_for_timeout(1000)\n                page.click(\"data-testid=btn_search\")\n                page.wait_for_timeout(1000)\n    \n                row = page.locator(\"table tbody tr\").nth(0)\n                if row.is_visible():\n                    row.locator(\"td:nth-child(1)\").click()\n                    selected_product_names.append(name)\n    \n            if not selected_product_names:\n                msg = \"\\u2705 \\uc870\\uac74\\uc5d0 \\ub9de\\ub294 \\uc81c\\ud488\\uc774 \\uc5c6\\uc5b4\\uc11c \\uc0ad\\uc81c\\ub97c \\uc2a4\\ud0b5\\ud569\\ub2c8\\ub2e4.\"\n                print(msg)\n                return\n    \n            # 일괄 삭제 버튼 클릭\n            page.click(\"data-testid=btn_del_bulk\")\n            page.wait_for_timeout(1000)\n>           page.locator(\"data-testid=btn_del\").wait_for()\n\ntests\\test_Bay_product_delete.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:17862: in wait_for\n    self._sync(self._impl_obj.wait_for(timeout=timeout, state=state))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_locator.py:679: in wait_for\n    await self._frame.wait_for_selector(\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:323: in wait_for_selector\n    await self._channel.send(\"waitForSelector\", locals_to_params(locals()))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x00000151B820FCB0>\ncb = <function Channel.send.<locals>.<lambda> at 0x00000151B82A9F80>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.wait_for: Timeout 30000ms exceeded.\nE           Call log:\nE             - waiting for locator(\"data-testid=btn_del\") to be visible\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError\n---------------------------- Captured stdout call -----------------------------\n[FAIL][제품관리] 일괄 삭제 중 예외 발생\n에러 내용: Locator.wait_for: Timeout 30000ms exceeded.\nCall log:\n  - waiting for locator(\"data-testid=btn_del\") to be visible\n\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_product_delete.py::test_delete_product - UnboundLocalEr...\nFAILED tests/test_Bay_product_delete.py::test_bulk_delete_products - playwrig...\n======================== 2 failed in 82.11s (0:01:22) =========================\n",
    "duration": "83.35초"
  },
  {
    "test_name": "test_Bay_stock_in",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-18 18:28:11",
    "file": "tests/test_Bay_stock_in.py",
    "stack": "",
    "duration": "202.22초"
  },
  {
    "test_name": "test_Bay_stock_out",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-18 18:28:31",
    "file": "tests/test_Bay_stock_out.py",
    "stack": "",
    "duration": "20.21초"
  },
  {
    "test_name": "test_Bay_order_status_request_cancel",
    "status": "FAIL",
    "message": "\\u274c Error in test_order_cancel: No product found with delivery_status 1",
    "timestamp": "2025-07-18 18:28:33",
    "file": "tests/test_Bay_order_status_request_cancel.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_order_status_request_cancel.py F                          [100%]\n\n================================== FAILURES ===================================\n______________________________ test_order_cancel ______________________________\n\npage = <Page url='about:blank'>\n\n    def test_order_cancel(page: Page):\n        try:\n            # JSON 파일에서 제품명 불러오기\n            with open('product_name.json', 'r', encoding='utf-8') as f:\n                products = json.load(f)\n    \n            # delivery_status가 1인 제품들 필터링\n            eligible_products = [product for product in products if product.get('delivery_status') == 1]\n    \n            if not eligible_products:\n>               raise ValueError(\"No product found with delivery_status 1\")\nE               ValueError: No product found with delivery_status 1\n\ntests\\test_Bay_order_status_request_cancel.py:41: ValueError\n---------------------------- Captured stdout call -----------------------------\n\\u274c Error in test_order_cancel: No product found with delivery_status 1\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_order_status_request_cancel.py::test_order_cancel - Val...\n============================== 1 failed in 0.85s ==============================\n",
    "duration": "2.06초"
  },
  {
    "test_name": "test_Bay_order_status_request",
    "status": "FAIL",
    "message": "tests\\test_Bay_order_status_request.py:43: ValueError",
    "timestamp": "2025-07-18 18:28:35",
    "file": "tests/test_Bay_order_status_request.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_order_status_request.py F                                 [100%]\n\n================================== FAILURES ===================================\n____________________________ test_order_acceptance ____________________________\n\npage = <Page url='about:blank'>\n\n    def test_order_acceptance(page: Page):\n        # 발주 요청 상태(1)인 제품 2개 선택\n        eligible_products = filter_products_by_delivery_status(1)\n        if len(eligible_products) < 2:\n>           raise ValueError(\"delivery_status가 1인 제품이 2개 미만입니다.\")\nE           ValueError: delivery_status가 1인 제품이 2개 미만입니다.\n\ntests\\test_Bay_order_status_request.py:43: ValueError\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_order_status_request.py::test_order_acceptance - ValueE...\n============================== 1 failed in 0.86s ==============================\n",
    "duration": "2.18초"
  },
  {
    "test_name": "test_Bay_order_status_progress_delivery",
    "status": "FAIL",
    "message": "\\u274c Error in test_order_delivery: No product found with delivery_status 2",
    "timestamp": "2025-07-18 18:28:37",
    "file": "tests/test_Bay_order_status_progress_delivery.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_order_status_progress_delivery.py F                       [100%]\n\n================================== FAILURES ===================================\n_____________________________ test_order_delivery _____________________________\n\npage = <Page url='about:blank'>\n\n    def test_order_delivery(page: Page):\n        try:\n            # delivery_status가 2인 제품 선택\n            with open(\"product_name.json\", \"r\", encoding=\"utf-8\") as f:\n                products = json.load(f)\n    \n            eligible_products = [p for p in products if p.get(\"delivery_status\") == 2]\n            if not eligible_products:\n>               raise ValueError(\"No product found with delivery_status 2\")\nE               ValueError: No product found with delivery_status 2\n\ntests\\test_Bay_order_status_progress_delivery.py:40: ValueError\n---------------------------- Captured stdout call -----------------------------\n\\u274c Error in test_order_delivery: No product found with delivery_status 2\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_order_status_progress_delivery.py::test_order_delivery\n============================== 1 failed in 0.86s ==============================\n",
    "duration": "2.12초"
  },
  {
    "test_name": "test_Bay_order_status_progress_complete",
    "status": "FAIL",
    "message": "\\u274c Error in test_order_receive_and_inventory_check: \\ubc1c\\uc8fc \\uc9c4\\ud589 \\uc0c1\\ud0dc\\uc778 \\uc81c\\ud488\\uc774 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.",
    "timestamp": "2025-07-18 18:28:40",
    "file": "tests/test_Bay_order_status_progress_complete.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_order_status_progress_complete.py F                       [100%]\n\n================================== FAILURES ===================================\n______________________ test_order_receive_from_progress _______________________\n\npage = <Page url='about:blank'>\n\n    def test_order_receive_from_progress(page: Page):\n        try:\n            # delivery_status가 2인 제품 필터링\n            eligible_products = filter_products_by_delivery_status(2)\n            if not eligible_products:\n>               raise ValueError(\"발주 진행 상태인 제품이 없습니다.\")\nE               ValueError: 발주 진행 상태인 제품이 없습니다.\n\ntests\\test_Bay_order_status_progress_complete.py:37: ValueError\n---------------------------- Captured stdout call -----------------------------\n\\u274c Error in test_order_receive_and_inventory_check: \\ubc1c\\uc8fc \\uc9c4\\ud589 \\uc0c1\\ud0dc\\uc778 \\uc81c\\ud488\\uc774 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_order_status_progress_complete.py::test_order_receive_from_progress\n============================== 1 failed in 0.85s ==============================\n",
    "duration": "2.27초"
  },
  {
    "test_name": "test_Bay_order_status_delivery",
    "status": "FAIL",
    "message": "\\u274c Error in test_order_receive_from_delivery: \\ubc30\\uc1a1 \\uc9c4\\ud589 \\uc0c1\\ud0dc\\uc778 \\uc81c\\ud488\\uc774 \\uc5c6\\ub2e4",
    "timestamp": "2025-07-18 18:28:42",
    "file": "tests/test_Bay_order_status_delivery.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_order_status_delivery.py F                                [100%]\n\n================================== FAILURES ===================================\n______________________ test_order_receive_from_delivery _______________________\n\npage = <Page url='about:blank'>\n\n    def test_order_receive_from_delivery(page: Page):\n        try:\n            # product.json에서 delivery_status가 3인 제품들 찾기\n            with open('product_name.json', 'r', encoding='utf-8') as f:\n                products = json.load(f)\n            status_name = \"배송 진행\"\n    \n            # delivery_status가 3인 제품들만 필터링\n            eligible_products = [product for product in products if product.get('delivery_status') == 3]\n    \n            if not eligible_products:\n>               raise ValueError(\"배송 진행 상태인 제품이 없다\")\nE               ValueError: 배송 진행 상태인 제품이 없다\n\ntests\\test_Bay_order_status_delivery.py:43: ValueError\n---------------------------- Captured stdout call -----------------------------\n\\u274c Error in test_order_receive_from_delivery: \\ubc30\\uc1a1 \\uc9c4\\ud589 \\uc0c1\\ud0dc\\uc778 \\uc81c\\ud488\\uc774 \\uc5c6\\ub2e4\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_order_status_delivery.py::test_order_receive_from_delivery\n============================== 1 failed in 0.85s ==============================\n",
    "duration": "2.05초"
  },
  {
    "test_name": "test_Bay_order_status_complete",
    "status": "FAIL",
    "message": "\\u274c Error in test_order_status_complete: '\\uc218\\ub839 \\uc644\\ub8cc(\\ubc30\\uc1a1\\ud6c4)' \\uc0c1\\ud0dc\\uc758 \\uc81c\\ud488\\uc774 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.",
    "timestamp": "2025-07-18 18:28:44",
    "file": "tests/test_Bay_order_status_complete.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 2 items\n\ntests\\test_Bay_order_status_complete.py FF                               [100%]\n\n================================== FAILURES ===================================\n________________________ test_order_status_complete_bf ________________________\n\npage = <Page url='about:blank'>\n\n    def test_order_status_complete_bf(page: Page):\n>       run_order_status_check(page, delivery_status=7)\n\ntests\\test_Bay_order_status_complete.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npage = <Page url='about:blank'>, delivery_status = 7\n\n    def run_order_status_check(page: Page, delivery_status: int):\n        status_name = \"수령 완료\"\n    \n        # 상태에 따른 expected 키 매핑\n        status_key_map = {\n            7: \"수령 완료(배송전)\",\n            4: \"수령 완료(배송후)\",\n        }\n    \n        expected_key = status_key_map.get(delivery_status)\n        if not expected_key:\n            raise ValueError(f\"지원하지 않는 delivery_status: {delivery_status}\")\n    \n        expected = order_status_map[expected_key]\n    \n        try:\n            filtered_products = filter_products_by_delivery_status(delivery_status)\n            if not filtered_products:\n>               raise ValueError(f\"'{expected_key}' 상태의 제품이 없습니다.\")\nE               ValueError: '수령 완료(배송전)' 상태의 제품이 없습니다.\n\ntests\\test_Bay_order_status_complete.py:31: ValueError\n---------------------------- Captured stdout call -----------------------------\n\\u274c Error in test_order_status_complete: '\\uc218\\ub839 \\uc644\\ub8cc(\\ubc30\\uc1a1\\uc804)' \\uc0c1\\ud0dc\\uc758 \\uc81c\\ud488\\uc774 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.\n________________________ test_order_status_complete_af ________________________\n\npage = <Page url='about:blank'>\n\n    def test_order_status_complete_af(page: Page):\n>       run_order_status_check(page, delivery_status=4)\n\ntests\\test_Bay_order_status_complete.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npage = <Page url='about:blank'>, delivery_status = 4\n\n    def run_order_status_check(page: Page, delivery_status: int):\n        status_name = \"수령 완료\"\n    \n        # 상태에 따른 expected 키 매핑\n        status_key_map = {\n            7: \"수령 완료(배송전)\",\n            4: \"수령 완료(배송후)\",\n        }\n    \n        expected_key = status_key_map.get(delivery_status)\n        if not expected_key:\n            raise ValueError(f\"지원하지 않는 delivery_status: {delivery_status}\")\n    \n        expected = order_status_map[expected_key]\n    \n        try:\n            filtered_products = filter_products_by_delivery_status(delivery_status)\n            if not filtered_products:\n>               raise ValueError(f\"'{expected_key}' 상태의 제품이 없습니다.\")\nE               ValueError: '수령 완료(배송후)' 상태의 제품이 없습니다.\n\ntests\\test_Bay_order_status_complete.py:31: ValueError\n---------------------------- Captured stdout call -----------------------------\n\\u274c Error in test_order_status_complete: '\\uc218\\ub839 \\uc644\\ub8cc(\\ubc30\\uc1a1\\ud6c4)' \\uc0c1\\ud0dc\\uc758 \\uc81c\\ud488\\uc774 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_order_status_complete.py::test_order_status_complete_bf\nFAILED tests/test_Bay_order_status_complete.py::test_order_status_complete_af\n============================== 2 failed in 0.92s ==============================\n",
    "duration": "2.17초"
  },
  {
    "test_name": "test_Bay_order_status_fail",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-18 18:28:59",
    "file": "tests/test_Bay_order_status_fail.py",
    "stack": "",
    "duration": "15.08초"
  },
  {
    "test_name": "test_Bay_stock_history",
    "status": "FAIL",
    "message": "FAILED tests/test_Bay_stock_history.py::test_inflow_past - AssertionError: [H...",
    "timestamp": "2025-07-18 18:30:37",
    "file": "tests/test_Bay_stock_history.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 2 items\n\ntests\\test_Bay_stock_history.py FF                                       [100%]\n\n================================== FAILURES ===================================\n______________________________ test_inflow_past _______________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/stocks/265?page=1'>\n\n    def test_inflow_past(page):\n        bay_login(page)\n        page.goto(URLS[\"bay_stock\"])\n        page.wait_for_timeout(2000)\n        today = datetime.today()\n        mmdd= today.strftime(\"%m%d\")\n        search_name = f\"등록테스트_{mmdd}\"\n    \n        page.locator(\"data-testid=input_search\").fill(search_name)\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_search\").click()\n        page.wait_for_timeout(1000)\n    \n        product_column = page.locator(\"table tbody tr\").first.locator(\"td\").nth(3)\n        stock_column = page.locator(\"table tbody tr\").first.locator(\"td\").nth(5)\n        stock_text = stock_column.text_content().strip()\n        product_name = product_column.locator(\"div\").first.text_content().strip()\n        current_stock = int(stock_text)\n        print(f\"재고량 : {stock_text}, 제품명 : {product_name}\")\n        yesterday_memo = \"어제 날짜 입고 확인 테스트\"\n        day_before_memo = \"그제 날짜 입고 확인 테스트\"\n        today_memo = \"30자까지 제한인데요. 최대글자수 꽉꽉채워서 등록합니다\"\n        yesterday = datetime.today() - timedelta(days=1)\n        day_before = datetime.today() - timedelta(days=2)\n        today_str = \"금일 재고 현황\"\n        yesterday_str = yesterday.strftime(\"%Y. %m. %d\")\n        day_before_str = day_before.strftime(\"%Y. %m. %d\")\n    \n        page.wait_for_timeout(2000)\n        # 두 날짜에 대해 각각 등록\n        register_stock_for_date(page, day_before, product_name, current_stock, day_before_memo)\n        register_stock_for_date(page, yesterday, product_name, current_stock + 100, yesterday_memo)  # 이전 등록 반영\n    \n        # 재고 상세 진입\n        page.fill(\"data-testid=input_search\", product_name)\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_search\").click()\n        page.wait_for_timeout(1000)\n        first_row_cell = page.locator(\"table tbody tr\").first.locator(\"td\").nth(3)\n        cell_text = first_row_cell.inner_text().strip().split(\"\\n\")[0]\n        assert cell_text == product_name, f\"\\u274c \\uac80\\uc0c9 \\uacb0\\uacfc\\uac00 \\uc77c\\uce58\\ud558\\uc9c0 \\uc54a\\uc74c: {cell_text} != {product_name}\"\n        first_row_cell = page.locator(\"table tbody tr\").first.locator(\"td\").nth(3)\n        first_row_cell.locator(\"div\").first.click()\n        expect(page.locator(\"data-testid=btn_back\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_back\").click()\n        expect(page.locator(\"data-testid=btn_stockadd\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(500)\n        first_row_cell.locator(\"div\").first.click()\n        expect(page.locator(\"data-testid=txt_today\")).to_have_text(today_str, timeout=3000)\n        page.wait_for_timeout(500)\n    \n        # 날짜 및 상태 필터\n        day1_str = select_date_range(page, day_before)\n    \n        # 문구 확인\n        expect(page.locator('[data-testid=\"txt_today\"]')).to_be_visible()\n        expect(page.locator('[data-testid=\"txt_date\"]')).to_have_text(day1_str)\n    \n        # 값 추출\n        value_day1 = get_last_column_of_history2(page)\n        print(f\"[\\U0001f4c5 \\uadf8\\uc81c] history2\\uc758 \\uc0c1\\ud0dc \\uac12: {value_day1}\")\n    \n        # \\u2705 \\uc5b4\\uc81c \\ub0a0\\uc9dc \\uae30\\uc900 \\ud14c\\uc2a4\\ud2b8\n        day2_str = select_date_range(page, yesterday)\n    \n        # 문구 확인\n        expect(page.locator('[data-testid=\"txt_today\"]')).to_be_visible()\n        expect(page.locator('[data-testid=\"txt_date\"]')).to_have_text(day2_str)\n    \n        # 값 추출\n        value_day2 = get_last_column_of_history2(page)\n        print(f\"[\\U0001f4c5 \\uc5b4\\uc81c] history2\\uc758 \\uc0c1\\ud0dc \\uac12: {value_day2}\")\n    \n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_reset\").click()\n        page.wait_for_timeout(1000)\n    \n        # 텍스트 문구 확인\n        expect(page.locator('[data-testid=\"txt_today\"]')).to_have_text(today_str)\n        txt_dates = page.locator('[data-testid=\"txt_date\"]')\n        expect(txt_dates.nth(0)).to_have_text(yesterday_str)\n        expect(txt_dates.nth(1)).to_have_text(day_before_str)\n    \n        # \\u2705 3\\ubc88\\uc9f8 history\n        hist3_qty = int(get_table_cell_text(page, 3, 0, 2))  # 3번째 열 = index 2\n        hist3_memo = get_table_cell_text(page, 3, 0, 4)      # 5번째 열 = index 4\n        hist3_last = get_last_column_text(page, 3)\n    \n>       assert hist3_qty == 100, f\"[H3] 수량 불일치: {hist3_qty} != 100\"\nE       AssertionError: [H3] 수량 불일치: 300 != 100\nE       assert 300 == 100\n\ntests\\test_Bay_stock_history.py:137: AssertionError\n---------------------------- Captured stdout call -----------------------------\n\\uc7ac\\uace0\\ub7c9 : 425, \\uc81c\\ud488\\uba85 : \\ub4f1\\ub85d\\ud14c\\uc2a4\\ud2b8_0718_11\\n[\\U0001f4c5 \\uadf8\\uc81c] history2\\uc758 \\uc0c1\\ud0dc \\uac12: \\uc785\\uace0\\n[\\U0001f4c5 \\uc5b4\\uc81c] history2\\uc758 \\uc0c1\\ud0dc \\uac12: \\uc785\\uace0\n____________________________ test_stock_bulk_edit _____________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/stocks?page=1&product_name=%EB%93%B1%EB%A1%9D%ED%85%8C%EC%8A%A4%ED%8A%B8_0718&start_date=2025-07-18&end_date=2025-07-18'>\n\n    def test_stock_bulk_edit(page:Page):\n        bay_login(page)\n        page.goto(URLS[\"bay_stock\"])\n        page.wait_for_timeout(2000)\n        today = datetime.today()\n        mmdd= today.strftime(\"%m%d\")\n        product = f\"등록테스트_{mmdd}\"\n        inflow = 25\n        new_inflow = 15\n        txt_bulk = \"2개의 재고 수정이 완료되었습니다.\"\n        txt_edit = \"1개의 재고 수정이 완료되었습니다.\"\n    \n        page.locator(\"data-testid=input_search\").fill(product)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_search\").click()\n        page.wait_for_timeout(1000)\n    \n        row1 = page.locator(\"table tbody tr\").first\n        row2 = page.locator(\"table tbody tr\").nth(1)\n        checkbox1 = row1.locator(\"td\").first\n        checkbox2 = row2.locator(\"td\").first\n        product_column1 = row1.locator(\"td\").nth(3)\n        product_column2 = row2.locator(\"td\").nth(3)\n        stock_column1 = row1.locator(\"td\").nth(5)\n        stock_column2 = row2.locator(\"td\").nth(5)\n        stock_text1 = stock_column1.text_content().strip()\n        stock_text2 = stock_column2.text_content().strip()\n        product_name1 = product_column1.locator(\"div\").first.text_content().strip()\n        product_name2 = product_column2.locator(\"div\").first.text_content().strip()\n    \n        # 재고 2개 일괄 수정(2개 모두) 후 상세 내역(2개 모두) 확인\n        page.locator(\"data-testid=btn_edit_bulk\").click()\n        expect(page.locator(\"data-testid=toast_select_stock\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(1000)\n        legacy1 = row1.locator(\"td\").nth(6).locator(\"div\")\n        inflow_legacy1 = legacy1.text_content().strip()\n        legacy2 = row2.locator(\"td\").nth(6).locator(\"div\")\n        inflow_legacy2 = legacy2.text_content().strip()\n        checkbox1.click()\n        checkbox2.click()\n        page.locator(\"data-testid=btn_edit_bulk\").click()\n        page.wait_for_timeout(1000)\n        print(f\"첫번째 항목 기존 입고량 : {inflow_legacy1}, 두번째 항목 기존 입고량: {inflow_legacy2}\")\n        input_field1 = row1.locator(\"td\").nth(6).locator(\"input\")\n        input_field2 = row2.locator(\"td\").nth(6).locator(\"input\")\n    \n        input_field1.fill(str(inflow))\n        page.wait_for_timeout(500)\n        input_field2.fill(str(inflow))\n        page.wait_for_timeout(500)\n        change1 = datetime.now()\n>       page.locator(\"data-testid=btn_edit_bulk\").click()\n\ntests\\test_Bay_stock_history.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:15464: in click\n    self._sync(\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_locator.py:156: in click\n    return await self._frame.click(self._selector, strict=True, **params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:488: in click\n    await self._channel.send(\"click\", locals_to_params(locals()))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x000001F2E95E8050>\ncb = <function Channel.send.<locals>.<lambda> at 0x000001F2E96B80E0>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.click: Timeout 30000ms exceeded.\nE           Call log:\nE             - waiting for locator(\"data-testid=btn_edit_bulk\")\nE             -     - locator resolved to <button disabled data-testid=\"btn_edit_bulk\" class=\"inline-flex items-center justify-center whitespace-nowrap transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none shadow-blue disabled:shadow-gray-500 h-[40px] p-2 text-font-16-500 bg-white border-primary-main-blue text-primary-main-blue disabled:border-gray-300 disabled:text-gray-600 disabled:bg-white w-[92px] rounded-md border-0\">일괄완료</button>\nE             -   - attempting click action\nE             -     2 × waiting for element to be visible, enabled and stable\nE             -       - element is not enabled\nE             -     - retrying click action\nE             -     - waiting 20ms\nE             -     2 × waiting for element to be visible, enabled and stable\nE             -       - element is not enabled\nE             -     - retrying click action\nE             -       - waiting 100ms\nE             -     56 × waiting for element to be visible, enabled and stable\nE             -        - element is not enabled\nE             -      - retrying click action\nE             -        - waiting 500ms\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError\n---------------------------- Captured stdout call -----------------------------\n첫번째 항목 기존 입고량 : 25, 두번째 항목 기존 입고량: 25\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_stock_history.py::test_inflow_past - AssertionError: [H...\nFAILED tests/test_Bay_stock_history.py::test_stock_bulk_edit - playwright._im...\n======================== 2 failed in 96.91s (0:01:36) =========================\n",
    "duration": "98.19초"
  }
]