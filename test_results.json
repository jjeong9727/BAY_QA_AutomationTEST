[
  {
    "test_name": "test_Bay_login",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-11 17:31:59",
    "file": "tests/test_Bay_login.py",
    "stack": "",
    "duration": "12.12초"
  },
  {
    "test_name": "test_Bay_alert",
    "status": "FAIL",
    "message": "FAILED tests/test_Bay_alert.py::test_check_alert - AssertionError: Locator ex...",
    "timestamp": "2025-07-11 17:32:54",
    "file": "tests/test_Bay_alert.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_alert.py F                                                [100%]\n\n================================== FAILURES ===================================\n______________________________ test_check_alert _______________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/stocks?start_date=2025-07-11&end_date=2025-07-11'>\n\n    def test_check_alert(page:Page):\n        bay_login(page)\n        # [카테고리 관리] 이탈 팝업 확인\n        page.goto(URLS[\"bay_category\"])\n        page.wait_for_timeout(2000)\n        # 구분 탭\n        page.locator(\"data-testid=input_kor\").first.fill(edit_name)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=tab_category\").click()\n        expect(page.locator(\"data-testid=txt_nosave\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_confirm\").click()\n        page.wait_for_timeout(1000)\n        # 종류 탭\n        page.locator(\"data-testid=input_kor\").first.fill(edit_name)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=tab_maker\").click()\n        expect(page.locator(\"data-testid=txt_nosave\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_confirm\").click()\n        page.wait_for_timeout(1000)\n        # 제조사 탭\n        page.locator(\"data-testid=input_kor\").first.fill(edit_name)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=tab_type\").click()\n        expect(page.locator(\"data-testid=txt_nosave\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_confirm\").click()\n        page.wait_for_timeout(1000)\n        # 구분 탭에서 이탈 취소 확인\n        page.locator(\"data-testid=input_kor\").first.fill(edit_name)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=tab_category\").click()\n        expect(page.locator(\"data-testid=txt_nosave\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_cancel\").click()\n        expect(page.locator(\"data-testid=input_kor\").first).to_have_value(edit_name, timeout=3000)\n        page.wait_for_timeout(1000)\n    \n        # [제품 관리] 이탈 팝업 확인\n        # 등록화면\n        page.goto(URLS[\"bay_prdList\"])\n        page.wait_for_timeout(2000)\n        page.locator(\"data-testid=btn_addprd\").click()\n        page.wait_for_timeout(2000)\n        page.locator(\"data-testid=input_prdname_kor\").fill(edit_name)\n        page.locator(\"body\").click(position={\"x\": 10, \"y\": 10})\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_back\").click()\n        expect(page.locator(\"data-testid=title\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_no\").click()\n        expect(page.locator(\"data-testid=input_prdname_kor\").first).to_have_value(edit_name, timeout=3000)\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_back\").click()\n        expect(page.locator(\"data-testid=title\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_yes\").click()\n        expect(page.locator(\"data-testid=btn_addprd\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(1000)\n        # 수정화면\n        rows = page.locator(\"table tbody tr\")\n        row_count = rows.count()\n    \n        for i in range(row_count):\n            edit_button = rows.nth(i).locator(\"td:nth-child(11) >> text=수정\")\n            if edit_button.is_visible():\n                print(f\"\\u2705 {i}\\ubc88\\uc9f8 \\ud589\\uc758 \\uc218\\uc815 \\ubc84\\ud2bc \\ud074\\ub9ad\")\n                edit_button.click()\n                break\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=drop_maker_trigger\").click()\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=drop_maker_search\").fill(\"중복테스트\")\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=drop_maker_item\", has_text=\"중복테스트\").click()\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_back\").click()\n        expect(page.locator(\"data-testid=title\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_no\").click()\n        expect(page.locator(\"data-testid=drop_maker_trigger\")).to_have_text(\"중복테스트\", timeout=3000)\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_back\").click()\n        expect(page.locator(\"data-testid=title\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_yes\").click()\n        expect(page.locator(\"data-testid=btn_addprd\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(1000)\n    \n        # [재고관리] 이탈 팝업 확인\n        # # 재고 등록화면\n        txt_register = \"해당 날짜로 재고 등록하시겠습니까?\"\n        page.goto(URLS[\"bay_stock\"])\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_stockadd\").click()\n        page.wait_for_timeout(1000)\n        # 재고량 초과 알럿 확인\n        page.locator(\"data-testid=drop_status_trigger\").click()\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=drop_status_item\",has_text=\"입고\").click()\n    \n        page.locator(\"data-testid=drop_prdname_trigger\").click()\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=drop_prdname_search\").fill(\"중복테스트\")\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=drop_prdname_item\",has_text=\"중복테스트\").click()\n        page.wait_for_timeout(1000)\n        stock_text = page.locator('[data-testid=\"txt_current_stock\"]').inner_text().strip()\n        try:\n            current_stock = int(stock_text.replace(\",\", \"\"))\n        except ValueError:\n            raise ValueError(f\"\\u274c \\ud604\\uc7ac \\uc7ac\\uace0 \\ud14d\\uc2a4\\ud2b8\\uac00 \\uc815\\uc218\\ub85c \\ubcc0\\ud658 \\ubd88\\uac00: '{stock_text}'\")\n            # 재고보다 큰 수 계산 (예: +10)\n        larger_qty = current_stock + 10\n            # input_qty에 입력\n        page.locator('[data-testid=\"input_qty\"]').fill(str(larger_qty))\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=input_memo\").fill(\"테스트 메모\")\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_save\").click()\n        expect(page.locator('[data-testid=\"txt_register\"]')).to_have_text(txt_register,timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_confirm\").click()\n        expect(page.locator('[data-testid=\"toast_over_stock\"]')).to_be_visible(timeout=3000)\n        page.wait_for_timeout(1000)\n    \n        # 이탈 팝업 확인\n        page.locator(\"data-testid=btn_back\").click()\n>       expect(page.locator(\"data-testid=title\")).to_be_visible(timeout=3000)\nE       AssertionError: Locator expected to be visible\nE       Actual value: <element(s) not found> \nE       Call log:\nE         - LocatorAssertions.to_be_visible with timeout 3000ms\nE         -   - waiting for locator(\"data-testid=title\")\n\ntests\\test_Bay_alert.py:138: AssertionError\n---------------------------- Captured stdout call -----------------------------\n\\u2705 0\\ubc88\\uc9f8 \\ud589\\uc758 \\uc218\\uc815 \\ubc84\\ud2bc \\ud074\\ub9ad\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_alert.py::test_check_alert - AssertionError: Locator ex...\n============================= 1 failed in 53.82s ==============================\n",
    "duration": "55.15초"
  },
  {
    "test_name": "test_Bay_supplier",
    "status": "FAIL",
    "message": "FAILED tests/test_Bay_supplier.py::test_edit_supplier - AssertionError: Locat...",
    "timestamp": "2025-07-11 17:33:41",
    "file": "tests/test_Bay_supplier.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 2 items\n\ntests\\test_Bay_supplier.py .F                                            [100%]\n\n================================== FAILURES ===================================\n_____________________________ test_edit_supplier ______________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/providers-management?companyName=%EC%9E%90%EB%8F%99%ED%99%94+%EC%97%85%EC%B2%B4%EB%AA%85+%EB%93%B1%EB%A1%9D+%EC%82%AD%EC%A0%9C+%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9A%A9'>\n\n    def test_edit_supplier(page):\n        bay_login(page)\n        page.goto(URLS[\"bay_supplier\"])\n        page.wait_for_url(URLS[\"bay_supplier\"], timeout=60000)\n    \n        supplier = \"자동화 업체명 등록 삭제 테스트용\"\n        new_supplier = \"[수정] 자동화 업체명\"\n        new_manager = \"[수정] 매니저 이름\"\n        new_contact = \"01087654321\"\n        new_memo = \"자동화 테스트로 업체 정보 수정 확인 합니다. 바로 삭제 테스트에 활용할거예요.\"\n    \n        page.fill(\"data-testid=input_search\", supplier)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_search\").click()\n        page.wait_for_timeout(1000)\n    \n        page.locator(\"data-testid=btn_edit\").click()\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_cancel\").click()\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_edit\").click()\n        page.wait_for_timeout(1000)\n    \n        page.fill(\"data-testid=input_sup_name\", new_supplier)\n        page.wait_for_timeout(500)\n        page.fill(\"data-testid=input_sup_manager\", new_manager)\n        page.wait_for_timeout(500)\n        page.fill(\"data-testid=input_sup_contact\", new_contact)\n        page.wait_for_timeout(500)\n        page.fill(\"data-testid=input_memo\", new_memo)\n        page.wait_for_timeout(500)\n        page.click(\"data-testid=btn_confirm\")\n>       expect(page.locator(\"data-testid=alert_edit\")).to_be_visible(timeout=3000)\nE       AssertionError: Locator expected to be visible\nE       Actual value: <element(s) not found> \nE       Call log:\nE         - LocatorAssertions.to_be_visible with timeout 3000ms\nE         -   - waiting for locator(\"data-testid=alert_edit\")\n\ntests\\test_Bay_supplier.py:75: AssertionError\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_supplier.py::test_edit_supplier - AssertionError: Locat...\n======================== 1 failed, 1 passed in 45.83s =========================\n",
    "duration": "47.11초"
  },
  {
    "test_name": "test_Bay_supplier_val",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-11 17:33:57",
    "file": "tests/test_Bay_supplier_val.py",
    "stack": "",
    "duration": "15.94초"
  },
  {
    "test_name": "test_Bay_supplier_delete",
    "status": "FAIL",
    "message": "..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError",
    "timestamp": "2025-07-11 17:34:45",
    "file": "tests/test_Bay_supplier_delete.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_supplier_delete.py F                                      [100%]\n\n================================== FAILURES ===================================\n____________________________ test_delete_supplier _____________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/providers-management?companyName=%5B%EC%88%98%EC%A0%95%5D+%EC%9E%90%EB%8F%99%ED%99%94+%EC%97%85%EC%B2%B4%EB%AA%85'>\n\n    def test_delete_supplier(page):\n        try:\n            bay_login(page)\n    \n            page.goto(URLS[\"bay_supplier\"])\n            page.wait_for_url(URLS[\"bay_supplier\"], timeout=60000)\n    \n            # 1. \"[수정] 자동화 업체명\" 검색\n            page.fill(\"data-testid=input_search\", \"[수정] 자동화 업체명\")  # 제품명 검색\n            page.wait_for_timeout(1000)\n            page.click(\"data-testid=btn_search\")  # 검색 버튼 클릭\n            page.wait_for_timeout(1000)\n    \n            rows = page.locator(\"table tbody tr\")\n            row_count = rows.count()\n    \n            if row_count == 0:\n                print(\"\\u274c \\uac80\\uc0c9 \\uacb0\\uacfc\\uac00 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.\")\n                return\n    \n            # 2. 검색 결과 리스트에서 랜덤으로 하나 선택\n            random_index = 0  # 랜덤 인덱스 생성\n            selected_row = rows.nth(random_index)  # 랜덤으로 선택된 행\n>           manager_name = selected_row.locator(\"td:nth-child(2)\").inner_text().strip()  # 담당자명\n\ntests\\test_Bay_supplier_delete.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:16878: in inner_text\n    self._sync(self._impl_obj.inner_text(timeout=timeout))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_locator.py:444: in inner_text\n    return await self._frame.inner_text(\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:618: in inner_text\n    return await self._channel.send(\"innerText\", locals_to_params(locals()))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x000001F7DC323CB0>\ncb = <function Channel.send.<locals>.<lambda> at 0x000001F7DC4063E0>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.inner_text: Timeout 30000ms exceeded.\nE           Call log:\nE             - waiting for locator(\"table tbody tr\").first.locator(\"td:nth-child(2)\")\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: TimeoutError\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_supplier_delete.py::test_delete_supplier - playwright._...\n============================= 1 failed in 45.99s ==============================\n",
    "duration": "47.34초"
  },
  {
    "test_name": "test_Bay_prdctg",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-11 17:35:56",
    "file": "tests/test_Bay_prdctg.py",
    "stack": "",
    "duration": "71.31초"
  },
  {
    "test_name": "test_Bay_prdctg_val",
    "status": "FAIL",
    "message": "tests\\test_Bay_prdctg_val.py:50: AssertionError",
    "timestamp": "2025-07-11 17:36:27",
    "file": "tests/test_Bay_prdctg_val.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_prdctg_val.py F                                           [100%]\n\n================================== FAILURES ===================================\n________________________ test_duplicate_category_names ________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/categories_management#product_type'>\n\n    def test_duplicate_category_names(page):\n        bay_login(page)\n    \n        page.goto(URLS[\"bay_category\"])\n        page.wait_for_url(URLS[\"bay_category\"], timeout=6000)\n        page.wait_for_timeout(1500)\n    \n        name_kr = \"중복테스트\"\n        name_en1 = \"DupOne\"\n        name_en2 = \"DupTwo\"\n    \n        # 구분\n>       try_duplicate_registration(page, \"tab_type\", name_kr, name_en2)\n\ntests\\test_Bay_prdctg_val.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npage = <Page url='https://stg.bay.centurion.ai.kr/categories_management#product_type'>\ntab_testid = 'tab_type', name_kr = '중복테스트', name_en = 'DupTwo'\n\n    def try_duplicate_registration(page: Page, tab_testid: str, name_kr: str, name_en: str):\n        try:\n            page.click(f\"data-testid={tab_testid}\")\n            page.wait_for_timeout(2000)\n    \n            if page.locator(\"data-testid=btn_confirm\").is_visible():\n                page.click(\"data-testid=btn_confirm\")\n                page.wait_for_timeout(3000)\n    \n            page.click(\"data-testid=btn_add\")\n            page.wait_for_timeout(3000)\n            page.locator(\"data-testid=input_kor\").last.fill(name_kr)\n            page.wait_for_timeout(3000)\n            page.locator(\"data-testid=input_eng\").last.fill(name_en)\n            page.wait_for_timeout(3000)\n            page.click(\"data-testid=btn_save\")\n            page.wait_for_timeout(500)\n            page.locator(\"data-testid=alert_duplicate\").wait_for(timeout=5000)\n    \n            expect(page.locator(\"data-testid=alert_duplicate\")).to_be_visible(timeout=3000)\n            print(f\"[PASS] 중복 등록 토스트 확인\")\n    \n            # 사용중인 카테고리 삭제 시도\n            name_kr_locator = page.locator(f\"input[data-testid='input_kor']\")\n            item_to_delete = None\n            item_value_to_delete = None\n            row_index = -1\n            count = name_kr_locator.count()\n            for i in reversed(range(count)):\n                item_text = name_kr_locator.nth(i).input_value()\n                if item_text.startswith(\"중복테스트\"):\n                    item_to_delete = name_kr_locator.nth(i)\n                    item_value_to_delete = item_text\n                    row_index = i\n                    break\n    \n            if item_to_delete:\n                delete_buttons = page.locator(\"button[data-testid='btn_delete']\")\n                target_button = delete_buttons.nth(row_index)\n                target_button.wait_for(state=\"visible\")\n                target_button.click()\n                # expect(page.locator(\"txt_delete\")).to_be_visible(timeout=3000)\n                # page.wait_for_timeout(500)\n                # page.locator(\"data-testid=btn_comfirm\").click()\n>               expect(page.locator(\"txt_alert_using\")).to_be_visible(timeout=3000)\nE               AssertionError: Locator expected to be visible\nE               Actual value: <element(s) not found> \nE               Call log:\nE                 - LocatorAssertions.to_be_visible with timeout 3000ms\nE                 -   - waiting for locator(\"txt_alert_using\")\n\ntests\\test_Bay_prdctg_val.py:50: AssertionError\n---------------------------- Captured stdout call -----------------------------\n[PASS] 중복 등록 토스트 확인\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_prdctg_val.py::test_duplicate_category_names - Assertio...\n============================= 1 failed in 29.49s ==============================\n",
    "duration": "30.87초"
  },
  {
    "test_name": "test_Bay_prdctg_edit",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-11 17:37:30",
    "file": "tests/test_Bay_prdctg_edit.py",
    "stack": "",
    "duration": "62.63초"
  },
  {
    "test_name": "test_Bay_prdctg_delete",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-11 17:38:21",
    "file": "tests/test_Bay_prdctg_delete.py",
    "stack": "",
    "duration": "51.85초"
  },
  {
    "test_name": "test_Bay_product",
    "status": "FAIL",
    "message": "..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\__init__.py:143: ValueError",
    "timestamp": "2025-07-11 17:38:35",
    "file": "tests/test_Bay_product.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_product.py F                                              [100%]\n\n================================== FAILURES ===================================\n_______________________ test_register_multiple_products _______________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/products'>\n\n    def test_register_multiple_products(page: Page):\n        try:\n            bay_login(page)\n            page.goto(URLS[\"bay_prdList\"])\n>           expect(\"data-testid=btn_addprd\")\n\ntests\\test_Bay_product.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright.sync_api.Expect object at 0x00000241948206E0>\nactual = 'data-testid=btn_addprd', message = None\n\n    def __call__(\n        self, actual: Union[Page, Locator, APIResponse], message: Optional[str] = None\n    ) -> Union[PageAssertions, LocatorAssertions, APIResponseAssertions]:\n        if isinstance(actual, Page):\n            return PageAssertions(\n                PageAssertionsImpl(actual._impl_obj, self._timeout, message=message)\n            )\n        elif isinstance(actual, Locator):\n            return LocatorAssertions(\n                LocatorAssertionsImpl(actual._impl_obj, self._timeout, message=message)\n            )\n        elif isinstance(actual, APIResponse):\n            return APIResponseAssertions(\n                APIResponseAssertionsImpl(\n                    actual._impl_obj, self._timeout, message=message\n                )\n            )\n>       raise ValueError(f\"Unsupported type: {type(actual)}\")\nE       ValueError: Unsupported type: <class 'str'>\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\__init__.py:143: ValueError\n---------------------------- Captured stdout call -----------------------------\n[FAIL] 여러 개 제품 등록 실패: Unsupported type: <class 'str'>\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_product.py::test_register_multiple_products - ValueErro...\n============================= 1 failed in 12.54s ==============================\n",
    "duration": "13.79초"
  },
  {
    "test_name": "test_Bay_product_val",
    "status": "FAIL",
    "message": "..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: Error",
    "timestamp": "2025-07-11 17:38:52",
    "file": "tests/test_Bay_product_val.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_product_val.py F                                          [100%]\n\n================================== FAILURES ===================================\n_________________________ test_duplicate_product_name _________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/products/form'>\n\n    def test_duplicate_product_name(page):\n        try:\n            item = get_latest_product_name()\n            prdname_kor = \"중복테스트\"\n            prdname_eng = \"Duplicate Test\"\n    \n            bay_login(page)\n    \n            page.goto(URLS[\"bay_prdList\"])\n            expect(page.locator(\"data-testid=btn_addprd\")).to_be_visible(timeout=7000)\n            page.locator(\"data-testid=btn_addprd\").click()\n            expect(page.locator(\"data-testid=drop_type_trigger\")).to_be_visible(timeout=7000)\n    \n            # 구분 선택\n            page.locator(\"data-testid=drop_type_trigger\").last.click()\n            expect(page.locator(\"data-testid=drop_type_item\")).to_be_visible(timeout=5000)\n            type_items = page.locator(\"data-testid=drop_type_item\")\n            type_index = random.randint(0, type_items.count() - 1)\n            selected_type = type_items.nth(type_index).inner_text().strip()\n            type_items.nth(type_index).click()\n    \n            # 종류 선택\n            page.locator(\"data-testid=drop_group_trigger\").last.click()\n            expect(page.locator(\"data-testid=drop_group_item\")).to_be_visible(timeout=5000)\n            group_items = page.locator(\"data-testid=drop_group_item\")\n            group_index = random.randint(0, group_items.count() - 1)\n            selected_group = group_items.nth(group_index).inner_text().strip()\n            group_items.nth(group_index).click()\n    \n            # 제품명 생성 및 입력\n            page.fill(\"data-testid=input_prdname_kor\", prdname_kor)\n            page.fill(\"data-testid=input_prdname_eng\", prdname_eng)\n    \n            # 제조사 선택\n            page.locator(\"data-testid=drop_maker_trigger\").last.click()\n            expect(page.locator(\"data-testid=drop_maker_item\")).to_be_visible(timeout=5000)\n            maker_items = page.locator(\"data-testid=drop_maker_item\")\n            maker_index = random.randint(0, maker_items.count() - 1)\n            selected_maker = maker_items.nth(maker_index).inner_text().strip()\n            maker_items.nth(maker_index).click()\n    \n            page.locator(\"data-testid=input_price\").last.fill(str(random.randint(1000, 10000)))\n            safety = 5\n            page.locator(\"data-testid=input_stk_safe\").last.fill(str(safety))\n            auto_order = 10\n            page.locator(\"data-testid=input_stk_qty\").last.fill(str(auto_order))\n    \n            # 업체 선택\n            page.evaluate(\"window.scrollTo(0, document.body.scrollHeight)\")\n            page.locator(\"data-testid=drop_supplier_trigger\").last.click()\n            expect(page.locator(\"data-testid=drop_supplier_item\")).to_be_visible(timeout=5000)\n            supplier_items = page.locator(\"data-testid=drop_supplier_item\")\n            automation_supplier = supplier_items.locator(\"text=자동화업체\")\n>           automation_supplier.click(force=True)\n\ntests\\test_Bay_product_val.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:15464: in click\n    self._sync(\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_locator.py:156: in click\n    return await self._frame.click(self._selector, strict=True, **params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:488: in click\n    await self._channel.send(\"click\", locals_to_params(locals()))\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:61: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x0000020C29A9FE00>\ncb = <function Channel.send.<locals>.<lambda> at 0x0000020C29EEEB60>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.Error: Locator.click: Element is outside of the viewport\nE           Call log:\nE             - waiting for locator(\"data-testid=drop_supplier_item\").locator(\"text=자동화업체\")\nE             -     - locator resolved to <div class=\"flex min-h-[50px] w-full items-center px-4 hover:cursor-pointer\">자동화업체</div>\nE             -   - attempting click action\nE             -     - scrolling into view if needed\nE             -     - done scrolling\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:528: Error\n---------------------------- Captured stdout call -----------------------------\n\\u274c \\uc911\\ubcf5 \\ud14c\\uc2a4\\ud2b8 \\uc2e4\\ud328: Locator.click: Element is outside of the viewport\\nCall log:\\n  - waiting for locator(\"data-testid=drop_supplier_item\").locator(\"text=\\uc790\\ub3d9\\ud654\\uc5c5\\uccb4\")\\n  -     - locator resolved to <div class=\"flex min-h-[50px] w-full items-center px-4 hover:cursor-pointer\">\\uc790\\ub3d9\\ud654\\uc5c5\\uccb4</div>\\n  -   - attempting click action\\n  -     - scrolling into view if needed\\n  -     - done scrolling\\n\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_product_val.py::test_duplicate_product_name - playwrigh...\n============================= 1 failed in 15.30s ==============================\n",
    "duration": "16.71초"
  },
  {
    "test_name": "test_Bay_product_edit",
    "status": "FAIL",
    "message": "FAILED tests/test_Bay_product_edit.py::test_edit_bulk_products - IndexError: ...",
    "timestamp": "2025-07-11 17:39:06",
    "file": "tests/test_Bay_product_edit.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_product_edit.py F                                         [100%]\n\n================================== FAILURES ===================================\n___________________________ test_edit_bulk_products ___________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/products'>\n\n    def test_edit_bulk_products(page):\n        try:\n            bay_login(page)\n    \n            # 1. JSON에서 조건에 맞는 제품 하나 가져오기\n>           product = get_deletable_products()[0]  # 또는 get_editable_product()\nE           IndexError: list index out of range\n\ntests\\test_Bay_product_edit.py:28: IndexError\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_product_edit.py::test_edit_bulk_products - IndexError: ...\n============================= 1 failed in 12.58s ==============================\n",
    "duration": "13.93초"
  },
  {
    "test_name": "test_Bay_product_delete",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-11 17:39:31",
    "file": "tests/test_Bay_product_delete.py",
    "stack": "",
    "duration": "24.86초"
  },
  {
    "test_name": "test_Bay_stock_in",
    "status": "FAIL",
    "message": "FAILED tests/test_Bay_stock_in.py::test_inflow_anotherday - TypeError: 'NoneT...",
    "timestamp": "2025-07-11 17:39:59",
    "file": "tests/test_Bay_stock_in.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 2 items\n\ntests\\test_Bay_stock_in.py .F                                            [100%]\n\n================================== FAILURES ===================================\n___________________________ test_inflow_anotherday ____________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/products'>\n\n    def test_inflow_anotherday(page):\n        bay_login(page)\n        stock_manager = StockManager(page)\n    \n>       product = get_have_stock_product(stock_manager, page)\n\ntests\\test_Bay_stock_in.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nstock_manager = <helpers.stock_utils.StockManager object at 0x0000019771A46E90>\npage = <Page url='https://stg.bay.centurion.ai.kr/products'>\n\n    def get_have_stock_product(stock_manager, page):\n        # 전체 상품 목록 가져오기\n        all_products = stock_manager.load_product_from_json()\n    \n        # 조건에 맞는 상품 필터링\n        filtered_products = [\n>           p for p in all_products\n            if p.get(\"stock_qty\", 0) >= 1 and p.get(\"order_flag\", 1) == 0\n        ]\nE       TypeError: 'NoneType' object is not iterable\n\ntests\\test_Bay_stock_in.py:26: TypeError\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_stock_in.py::test_inflow_anotherday - TypeError: 'NoneT...\n======================== 1 failed, 1 passed in 27.17s =========================\n",
    "duration": "28.36초"
  },
  {
    "test_name": "test_Bay_stock_out",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-11 17:40:37",
    "file": "tests/test_Bay_stock_out.py",
    "stack": "",
    "duration": "37.57초"
  },
  {
    "test_name": "test_Bay_order_status_request_cancel",
    "status": "FAIL",
    "message": "\\u274c Error in test_order_cancel: No product found with delivery_status 1",
    "timestamp": "2025-07-11 17:40:40",
    "file": "tests/test_Bay_order_status_request_cancel.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_order_status_request_cancel.py F                          [100%]\n\n================================== FAILURES ===================================\n______________________________ test_order_cancel ______________________________\n\npage = <Page url='about:blank'>\n\n    def test_order_cancel(page: Page):\n        try:\n            # JSON 파일에서 제품명 불러오기\n            with open('product_name.json', 'r', encoding='utf-8') as f:\n                products = json.load(f)\n    \n            # delivery_status가 1인 제품들 필터링\n            eligible_products = [product for product in products if product.get('delivery_status') == 1]\n    \n            if not eligible_products:\n>               raise ValueError(\"No product found with delivery_status 1\")\nE               ValueError: No product found with delivery_status 1\n\ntests\\test_Bay_order_status_request_cancel.py:41: ValueError\n---------------------------- Captured stdout call -----------------------------\n\\u274c Error in test_order_cancel: No product found with delivery_status 1\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_order_status_request_cancel.py::test_order_cancel - Val...\n============================== 1 failed in 2.11s ==============================\n",
    "duration": "3.54초"
  },
  {
    "test_name": "test_Bay_order_status_request",
    "status": "FAIL",
    "message": "tests\\test_Bay_order_status_request.py:43: ValueError",
    "timestamp": "2025-07-11 17:40:44",
    "file": "tests/test_Bay_order_status_request.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_order_status_request.py F                                 [100%]\n\n================================== FAILURES ===================================\n____________________________ test_order_acceptance ____________________________\n\npage = <Page url='about:blank'>\n\n    def test_order_acceptance(page: Page):\n        # 발주 요청 상태(1)인 제품 2개 선택\n        eligible_products = filter_products_by_delivery_status(1)\n        if len(eligible_products) < 2:\n>           raise ValueError(\"delivery_status가 1인 제품이 2개 미만입니다.\")\nE           ValueError: delivery_status가 1인 제품이 2개 미만입니다.\n\ntests\\test_Bay_order_status_request.py:43: ValueError\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_order_status_request.py::test_order_acceptance - ValueE...\n============================== 1 failed in 2.11s ==============================\n",
    "duration": "3.40초"
  },
  {
    "test_name": "test_Bay_order_status_progress_delivery",
    "status": "FAIL",
    "message": "\\u274c Error in test_order_delivery: No product found with delivery_status 2",
    "timestamp": "2025-07-11 17:40:47",
    "file": "tests/test_Bay_order_status_progress_delivery.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_order_status_progress_delivery.py F                       [100%]\n\n================================== FAILURES ===================================\n_____________________________ test_order_delivery _____________________________\n\npage = <Page url='about:blank'>\n\n    def test_order_delivery(page: Page):\n        try:\n            # delivery_status가 2인 제품 선택\n            with open(\"product_name.json\", \"r\", encoding=\"utf-8\") as f:\n                products = json.load(f)\n    \n            eligible_products = [p for p in products if p.get(\"delivery_status\") == 2]\n            if not eligible_products:\n>               raise ValueError(\"No product found with delivery_status 2\")\nE               ValueError: No product found with delivery_status 2\n\ntests\\test_Bay_order_status_progress_delivery.py:40: ValueError\n---------------------------- Captured stdout call -----------------------------\n\\u274c Error in test_order_delivery: No product found with delivery_status 2\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_order_status_progress_delivery.py::test_order_delivery\n============================== 1 failed in 2.01s ==============================\n",
    "duration": "3.41초"
  },
  {
    "test_name": "test_Bay_order_status_progress_complete",
    "status": "FAIL",
    "message": "\\u274c Error in test_order_receive_and_inventory_check: \\ubc1c\\uc8fc \\uc9c4\\ud589 \\uc0c1\\ud0dc\\uc778 \\uc81c\\ud488\\uc774 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.",
    "timestamp": "2025-07-11 17:40:51",
    "file": "tests/test_Bay_order_status_progress_complete.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_order_status_progress_complete.py F                       [100%]\n\n================================== FAILURES ===================================\n______________________ test_order_receive_from_progress _______________________\n\npage = <Page url='about:blank'>\n\n    def test_order_receive_from_progress(page: Page):\n        try:\n            # delivery_status가 2인 제품 필터링\n            eligible_products = filter_products_by_delivery_status(2)\n            if not eligible_products:\n>               raise ValueError(\"발주 진행 상태인 제품이 없습니다.\")\nE               ValueError: 발주 진행 상태인 제품이 없습니다.\n\ntests\\test_Bay_order_status_progress_complete.py:37: ValueError\n---------------------------- Captured stdout call -----------------------------\n\\u274c Error in test_order_receive_and_inventory_check: \\ubc1c\\uc8fc \\uc9c4\\ud589 \\uc0c1\\ud0dc\\uc778 \\uc81c\\ud488\\uc774 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_order_status_progress_complete.py::test_order_receive_from_progress\n============================== 1 failed in 2.16s ==============================\n",
    "duration": "3.49초"
  },
  {
    "test_name": "test_Bay_order_status_delivery",
    "status": "FAIL",
    "message": "\\u274c Error in test_order_receive_from_delivery: \\ubc1c\\uc8fc \\uc9c4\\ud589 \\uc0c1\\ud0dc\\uc778 \\uc81c\\ud488\\uc774 \\uc5c6\\ub2e4",
    "timestamp": "2025-07-11 17:40:54",
    "file": "tests/test_Bay_order_status_delivery.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_order_status_delivery.py F                                [100%]\n\n================================== FAILURES ===================================\n______________________ test_order_receive_from_delivery _______________________\n\npage = <Page url='about:blank'>\n\n    def test_order_receive_from_delivery(page: Page):\n        try:\n            # product.json에서 delivery_status가 3인 제품들 찾기\n            with open('product_name.json', 'r', encoding='utf-8') as f:\n                products = json.load(f)\n            status_name = \"발주 진행\"\n    \n            # delivery_status가 3인 제품들만 필터링\n            eligible_products = [product for product in products if product.get('delivery_status') == 3]\n    \n            if not eligible_products:\n>               raise ValueError(\"발주 진행 상태인 제품이 없다\")\nE               ValueError: 발주 진행 상태인 제품이 없다\n\ntests\\test_Bay_order_status_delivery.py:43: ValueError\n---------------------------- Captured stdout call -----------------------------\n\\u274c Error in test_order_receive_from_delivery: \\ubc1c\\uc8fc \\uc9c4\\ud589 \\uc0c1\\ud0dc\\uc778 \\uc81c\\ud488\\uc774 \\uc5c6\\ub2e4\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_order_status_delivery.py::test_order_receive_from_delivery\n============================== 1 failed in 1.99s ==============================\n",
    "duration": "3.25초"
  },
  {
    "test_name": "test_Bay_order_status_complete",
    "status": "FAIL",
    "message": "\\u274c Error in test_order_status_complete: '\\uc218\\ub839 \\uc644\\ub8cc(\\ubc30\\uc1a1\\ud6c4)' \\uc0c1\\ud0dc\\uc758 \\uc81c\\ud488\\uc774 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.",
    "timestamp": "2025-07-11 17:40:58",
    "file": "tests/test_Bay_order_status_complete.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 2 items\n\ntests\\test_Bay_order_status_complete.py FF                               [100%]\n\n================================== FAILURES ===================================\n________________________ test_order_status_complete_bf ________________________\n\npage = <Page url='about:blank'>\n\n    def test_order_status_complete_bf(page: Page):\n>       run_order_status_check(page, delivery_status=7)\n\ntests\\test_Bay_order_status_complete.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npage = <Page url='about:blank'>, delivery_status = 7\n\n    def run_order_status_check(page: Page, delivery_status: int):\n        status_name = \"수령 확정\"\n    \n        # 상태에 따른 expected 키 매핑\n        status_key_map = {\n            7: \"수령 완료(배송전)\",\n            4: \"수령 완료(배송후)\",\n        }\n    \n        expected_key = status_key_map.get(delivery_status)\n        if not expected_key:\n            raise ValueError(f\"지원하지 않는 delivery_status: {delivery_status}\")\n    \n        expected = order_status_map[expected_key]\n    \n        try:\n            filtered_products = filter_products_by_delivery_status(delivery_status)\n            if not filtered_products:\n>               raise ValueError(f\"'{expected_key}' 상태의 제품이 없습니다.\")\nE               ValueError: '수령 완료(배송전)' 상태의 제품이 없습니다.\n\ntests\\test_Bay_order_status_complete.py:31: ValueError\n---------------------------- Captured stdout call -----------------------------\n\\u274c Error in test_order_status_complete: '\\uc218\\ub839 \\uc644\\ub8cc(\\ubc30\\uc1a1\\uc804)' \\uc0c1\\ud0dc\\uc758 \\uc81c\\ud488\\uc774 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.\n________________________ test_order_status_complete_af ________________________\n\npage = <Page url='about:blank'>\n\n    def test_order_status_complete_af(page: Page):\n>       run_order_status_check(page, delivery_status=4)\n\ntests\\test_Bay_order_status_complete.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npage = <Page url='about:blank'>, delivery_status = 4\n\n    def run_order_status_check(page: Page, delivery_status: int):\n        status_name = \"수령 확정\"\n    \n        # 상태에 따른 expected 키 매핑\n        status_key_map = {\n            7: \"수령 완료(배송전)\",\n            4: \"수령 완료(배송후)\",\n        }\n    \n        expected_key = status_key_map.get(delivery_status)\n        if not expected_key:\n            raise ValueError(f\"지원하지 않는 delivery_status: {delivery_status}\")\n    \n        expected = order_status_map[expected_key]\n    \n        try:\n            filtered_products = filter_products_by_delivery_status(delivery_status)\n            if not filtered_products:\n>               raise ValueError(f\"'{expected_key}' 상태의 제품이 없습니다.\")\nE               ValueError: '수령 완료(배송후)' 상태의 제품이 없습니다.\n\ntests\\test_Bay_order_status_complete.py:31: ValueError\n---------------------------- Captured stdout call -----------------------------\n\\u274c Error in test_order_status_complete: '\\uc218\\ub839 \\uc644\\ub8cc(\\ubc30\\uc1a1\\ud6c4)' \\uc0c1\\ud0dc\\uc758 \\uc81c\\ud488\\uc774 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_order_status_complete.py::test_order_status_complete_bf\nFAILED tests/test_Bay_order_status_complete.py::test_order_status_complete_af\n============================== 2 failed in 2.35s ==============================\n",
    "duration": "3.71초"
  },
  {
    "test_name": "test_Bay_order_status_fail",
    "status": "FAIL",
    "message": "\\u274c Error in test_order_status_fail: [FAIL] \\ubc1c\\uc8fc \\ub0b4\\uc5ed\\uc5d0\\uc11c \\uc81c\\ud488 '[\\uc18c\\ubaa8\\ud488][\\uc8fc\\uc0ac\\uc81c] \\ubc1c\\uc8fc\\uc2e4\\ud328 \\uad00\\ub828 \\ud14c\\uc2a4\\ud2b8\\uc785\\ub2c8\\ub2e4.'\\uc758 order_id\\ub97c \\ucc3e\\uc744 \\uc218 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.",
    "timestamp": "2025-07-11 17:41:21",
    "file": "tests/test_Bay_order_status_fail.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_order_status_fail.py F                                    [100%]\n\n================================== FAILURES ===================================\n___________________________ test_order_status_fail ____________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/orders/history?start_date=2025-07-11&end_date=2025-07-11&order_status=SHIPP...EB%B0%9C%EC%A3%BC%EC%8B%A4%ED%8C%A8+%EA%B4%80%EB%A0%A8+%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9E%85%EB%8B%88%EB%8B%A4.&page=1'>\n\n    def test_order_status_fail(page: Page):\n        status_name = \"발주 실패\"\n        expected = order_status_map[status_name]\n    \n        try:\n            # delivery_status == 6인 제품 목록 필터링\n            filtered_products = filter_products_by_delivery_status(6)\n            if not filtered_products:\n                raise ValueError(f\"[FAIL] '{status_name}' 상태의 제품이 없습니다.\")\n    \n            # 무작위 제품 선택\n            product = random.choice(filtered_products)\n            product_name = product[\"kor\"]\n    \n            bay_login(page)\n    \n            page.goto(URLS[\"bay_orderList\"])\n            page.wait_for_timeout(2000)\n            search_order_history(page, product_name, status_name)\n    \n            # order_id 가져오기\n            order_id = get_order_id_from_order_list(page, product_name)\n            if not order_id:\n>               raise ValueError(f\"[FAIL] 발주 내역에서 제품 '{product_name}'의 order_id를 찾을 수 없습니다.\")\nE               ValueError: [FAIL] 발주 내역에서 제품 '[소모품][주사제] 발주실패 관련 테스트입니다.'의 order_id를 찾을 수 없습니다.\n\ntests\\test_Bay_order_status_fail.py:37: ValueError\n---------------------------- Captured stdout call -----------------------------\n\\u274c Error in test_order_status_fail: [FAIL] \\ubc1c\\uc8fc \\ub0b4\\uc5ed\\uc5d0\\uc11c \\uc81c\\ud488 '[\\uc18c\\ubaa8\\ud488][\\uc8fc\\uc0ac\\uc81c] \\ubc1c\\uc8fc\\uc2e4\\ud328 \\uad00\\ub828 \\ud14c\\uc2a4\\ud2b8\\uc785\\ub2c8\\ub2e4.'\\uc758 order_id\\ub97c \\ucc3e\\uc744 \\uc218 \\uc5c6\\uc2b5\\ub2c8\\ub2e4.\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_order_status_fail.py::test_order_status_fail - ValueErr...\n============================= 1 failed in 21.81s ==============================\n",
    "duration": "23.07초"
  }
]