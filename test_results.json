[
  {
    "test_name": "test_Bay_login",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-15 15:54:25",
    "file": "tests/test_Bay_login.py",
    "stack": "",
    "duration": "11.13초"
  },
  {
    "test_name": "test_Bay_alert",
    "status": "FAIL",
    "message": "FAILED tests/test_Bay_alert.py::test_check_alert - AssertionError: Locator ex...",
    "timestamp": "2025-07-15 15:55:22",
    "file": "tests/test_Bay_alert.py",
    "stack": "============================= test session starts =============================\nplatform win32 -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0\nrootdir: C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\Bay\nconfigfile: pytest.ini\nplugins: base-url-2.1.0, html-4.1.1, json-0.4.0, json-report-1.5.0, metadata-3.1.1, ordering-0.6, playwright-0.7.0\ncollected 1 item\n\ntests\\test_Bay_alert.py F                                                [100%]\n\n================================== FAILURES ===================================\n______________________________ test_check_alert _______________________________\n\npage = <Page url='https://stg.bay.centurion.ai.kr/stocks?start_date=2025-07-15&end_date=2025-07-15'>\n\n    def test_check_alert(page:Page):\n        bay_login(page)\n        # [카테고리 관리] 이탈 팝업 확인\n        page.goto(URLS[\"bay_category\"])\n        page.wait_for_timeout(2000)\n        # 구분 탭\n        page.locator(\"data-testid=input_kor\").first.fill(edit_name)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=tab_category\").click()\n        expect(page.locator(\"data-testid=txt_nosave\")).to_have_text(txt_nosave, timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_confirm\").click()\n        page.wait_for_timeout(1000)\n        # 종류 탭\n        page.locator(\"data-testid=input_kor\").first.fill(edit_name)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=tab_maker\").click()\n        expect(page.locator(\"data-testid=txt_nosave\")).to_have_text(txt_nosave, timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_confirm\").click()\n        page.wait_for_timeout(1000)\n        # 제조사 탭\n        page.locator(\"data-testid=input_kor\").first.fill(edit_name)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=tab_type\").click()\n        expect(page.locator(\"data-testid=txt_nosave\")).to_have_text(txt_nosave, timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_confirm\").click()\n        page.wait_for_timeout(1000)\n        # 구분 탭에서 이탈 취소 확인\n        page.locator(\"data-testid=input_kor\").first.fill(edit_name)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=tab_category\").click()\n        expect(page.locator(\"data-testid=txt_nosave\")).to_have_text(txt_nosave, timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_cancel\").click()\n        expect(page.locator(\"data-testid=input_kor\").first).to_have_value(edit_name, timeout=3000)\n        page.wait_for_timeout(1000)\n    \n        # [제품 관리] 엑셀 다운로드 확인\n        # 오늘 날짜 포맷 (예: 2025_07_15)\n        page.goto(URLS[\"bay_prdList\"])\n        today = datetime.now().strftime(\"%Y_%m_%d\")\n        with page.expect_download() as download_info:\n            page.click('[data-testid=\"btn_download\"]')\n            page.wait_for_timeout(1000)\n        download = download_info.value\n    \n        filename = download.suggested_filename\n        print(f\"\\U0001f4c1 \\ub2e4\\uc6b4\\ub85c\\ub4dc\\ub41c \\ud30c\\uc77c\\uba85: {filename}\")\n        assert filename.startswith(today), f\"\\u274c \\ud30c\\uc77c\\uba85\\uc774 \\uc624\\ub298 \\ub0a0\\uc9dc({today})\\ub85c \\uc2dc\\uc791\\ud558\\uc9c0 \\uc54a\\uc2b5\\ub2c8\\ub2e4.\"\n    \n        # 제품 미선택 > 일괄 삭제 시도\n        page.locator(\"data-testid=btn_del_bulk\").click()\n        expect(page.locator(\"data-testid=toast_nodelete\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(500)\n    \n        # 재고 있는 제품 삭제 불가 확인\n        page.locator(\"data-testid=input_search\").fill(\"중복테스트\")\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_search\").click()\n        page.wait_for_timeout(1000)\n        rows = page.locator(\"table tbody tr\")\n        row_count = rows.count()\n    \n        for i in range(row_count):\n            edit_button = rows.nth(i).locator(\"td:nth-child(11) >> text=삭제\")\n            if edit_button.is_visible():\n                print(f\"\\u2705 {i}\\ubc88\\uc9f8 \\ud589\\uc758 \\uc0ad\\uc81c \\ubc84\\ud2bc \\ud074\\ub9ad\")\n                edit_button.click()\n                break\n    \n        expect(page.locator(\"data-testid=toast_stock\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(1000)\n    \n        # [제품 관리] 이탈 팝업 확인\n        # 등록화면\n        page.goto(URLS[\"bay_prdList\"])\n        page.wait_for_timeout(2000)\n        page.locator(\"data-testid=btn_addprd\").click()\n        page.wait_for_timeout(2000)\n        page.locator(\"data-testid=input_prdname_kor\").fill(edit_name)\n        page.locator(\"body\").click(position={\"x\": 10, \"y\": 10})\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_back\").click()\n        expect(page.locator(\"data-testid=title\")).to_have_text(txt_nosave, timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_no\").click()\n        expect(page.locator(\"data-testid=input_prdname_kor\").first).to_have_value(edit_name, timeout=3000)\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_back\").click()\n        expect(page.locator(\"data-testid=title\")).to_have_text(txt_nosave, timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_yes\").click()\n        expect(page.locator(\"data-testid=btn_addprd\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(1000)\n        # 수정화면\n        rows = page.locator(\"table tbody tr\")\n        row_count = rows.count()\n    \n        for i in range(row_count):\n            edit_button = rows.nth(i).locator(\"td:nth-child(11) >> text=수정\")\n            if edit_button.is_visible():\n                print(f\"\\u2705 {i}\\ubc88\\uc9f8 \\ud589\\uc758 \\uc218\\uc815 \\ubc84\\ud2bc \\ud074\\ub9ad\")\n                edit_button.click()\n                break\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=drop_maker_trigger\").click()\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=drop_maker_search\").fill(\"중복테스트\")\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=drop_maker_item\", has_text=\"중복테스트\").click()\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_back\").click()\n        expect(page.locator(\"data-testid=title\")).to_have_text(txt_nosave, timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_no\").click()\n        expect(page.locator(\"data-testid=drop_maker_trigger\")).to_have_text(\"중복테스트\", timeout=3000)\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_back\").click()\n        expect(page.locator(\"data-testid=title\")).to_have_text(txt_nosave, timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_yes\").click()\n        expect(page.locator(\"data-testid=btn_addprd\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(1000)\n    \n        # [재고관리] 이탈 팝업 확인\n        # # 재고 등록화면\n        txt_register = \"해당 날짜로 재고 등록하시겠습니까?\"\n        page.goto(URLS[\"bay_stock\"])\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=btn_stockadd\").click()\n        page.wait_for_timeout(1000)\n        # 재고량 초과 알럿 확인\n        page.locator(\"data-testid=drop_status_trigger\").click()\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=drop_status_item\",has_text=\"입고\").click()\n    \n        page.locator(\"data-testid=drop_prdname_trigger\").click()\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=drop_prdname_search\").fill(\"중복테스트\")\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=drop_prdname_item\",has_text=\"중복테스트\").click()\n        page.wait_for_timeout(1000)\n        stock_text = page.locator('[data-testid=\"txt_current_stock\"]').inner_text().strip()\n        try:\n            current_stock = int(stock_text.replace(\",\", \"\"))\n        except ValueError:\n            raise ValueError(f\"\\u274c \\ud604\\uc7ac \\uc7ac\\uace0 \\ud14d\\uc2a4\\ud2b8\\uac00 \\uc815\\uc218\\ub85c \\ubcc0\\ud658 \\ubd88\\uac00: '{stock_text}'\")\n            # 재고보다 큰 수 계산 (예: +10)\n        larger_qty = current_stock + 10\n            # input_qty에 입력\n        page.locator('[data-testid=\"input_qty\"]').fill(str(larger_qty))\n        page.wait_for_timeout(1000)\n        page.locator(\"data-testid=input_memo\").fill(\"테스트 메모\")\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_save\").click()\n        expect(page.locator('[data-testid=\"txt_register\"]')).to_have_text(txt_register,timeout=3000)\n        page.wait_for_timeout(500)\n        page.locator(\"data-testid=btn_confirm\").click()\n        expect(page.locator('[data-testid=\"toast_over_stock\"]')).to_be_visible(timeout=3000)\n        page.wait_for_timeout(1000)\n    \n        # 삭제 불가 Alert 확인\n        page.locator(\"data-testid=btn_addrow\").click()\n        page.wait_for_timeout(1000)\n        close_btn = page.locator(\"button:has(svg path[id='Path 4'])\").last\n        expect(close_btn).to_be_visible()\n        close_btn.click()\n        page.wait_for_timeout(1000)\n        close_btn.click()\n        expect(page.locator(\"data-testid=toast_nostock\")).to_be_visible(timeout=3000)\n        page.wait_for_timeout(1000)\n    \n        # 이탈 팝업 확인\n        page.locator(\"data-testid=btn_back\").click()\n>       expect(page.locator(\"data-testid=title\")).to_have_text(txt_nosave, timeout=3000)\nE       AssertionError: Locator expected to have text '변경 사항을 저장하지 않으시겠습니까?'\nE       Actual value: <element(s) not found> \nE       Call log:\nE         - LocatorAssertions.to_have_text with timeout 3000ms\nE         -   - waiting for locator(\"data-testid=title\")\n\ntests\\test_Bay_alert.py:191: AssertionError\n---------------------------- Captured stdout call -----------------------------\n\\U0001f4c1 \\ub2e4\\uc6b4\\ub85c\\ub4dc\\ub41c \\ud30c\\uc77c\\uba85: 2025_07_15_\\uc81c\\ud488\\ubaa9\\ub85d.xlsx\\n\\u2705 0\\ubc88\\uc9f8 \\ud589\\uc758 \\uc0ad\\uc81c \\ubc84\\ud2bc \\ud074\\ub9ad\\n\\u2705 0\\ubc88\\uc9f8 \\ud589\\uc758 \\uc218\\uc815 \\ubc84\\ud2bc \\ud074\\ub9ad\n--------------------------------- JSON report ---------------------------------\nreport saved to: .report.json\n=========================== short test summary info ===========================\nFAILED tests/test_Bay_alert.py::test_check_alert - AssertionError: Locator ex...\n============================= 1 failed in 55.23s ==============================\n",
    "duration": "56.61초"
  },
  {
    "test_name": "test_Bay_supplier",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-15 15:56:03",
    "file": "tests/test_Bay_supplier.py",
    "stack": "",
    "duration": "41.63초"
  },
  {
    "test_name": "test_Bay_supplier_val",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-15 15:56:19",
    "file": "tests/test_Bay_supplier_val.py",
    "stack": "",
    "duration": "15.63초"
  },
  {
    "test_name": "test_Bay_prdctg",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-15 15:57:13",
    "file": "tests/test_Bay_prdctg.py",
    "stack": "",
    "duration": "54.20초"
  },
  {
    "test_name": "test_Bay_prdctg_val",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-15 15:57:49",
    "file": "tests/test_Bay_prdctg_val.py",
    "stack": "",
    "duration": "36.00초"
  },
  {
    "test_name": "test_Bay_prdctg_edit",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-15 15:58:33",
    "file": "tests/test_Bay_prdctg_edit.py",
    "stack": "",
    "duration": "43.97초"
  },
  {
    "test_name": "test_Bay_prdctg_delete",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-15 15:59:11",
    "file": "tests/test_Bay_prdctg_delete.py",
    "stack": "",
    "duration": "37.79초"
  },
  {
    "test_name": "test_Bay_product",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-15 16:00:50",
    "file": "tests/test_Bay_product.py",
    "stack": "",
    "duration": "99.23초"
  },
  {
    "test_name": "test_Bay_product_val",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-15 16:01:08",
    "file": "tests/test_Bay_product_val.py",
    "stack": "",
    "duration": "17.75초"
  },
  {
    "test_name": "test_Bay_product_edit",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-15 16:01:32",
    "file": "tests/test_Bay_product_edit.py",
    "stack": "",
    "duration": "24.28초"
  },
  {
    "test_name": "test_Bay_product_delete",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-15 16:01:56",
    "file": "tests/test_Bay_product_delete.py",
    "stack": "",
    "duration": "23.84초"
  },
  {
    "test_name": "test_Bay_stock_in",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-15 16:03:21",
    "file": "tests/test_Bay_stock_in.py",
    "stack": "",
    "duration": "84.41초"
  },
  {
    "test_name": "test_Bay_stock_out",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-15 16:04:34",
    "file": "tests/test_Bay_stock_out.py",
    "stack": "",
    "duration": "72.83초"
  },
  {
    "test_name": "test_Bay_stock_history",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-15 16:04:59",
    "file": "tests/test_Bay_stock_history.py",
    "stack": "",
    "duration": "25.22초"
  },
  {
    "test_name": "test_Bay_order_status_request_cancel",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-15 16:05:23",
    "file": "tests/test_Bay_order_status_request_cancel.py",
    "stack": "",
    "duration": "23.75초"
  },
  {
    "test_name": "test_Bay_order_status_request",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-15 16:05:53",
    "file": "tests/test_Bay_order_status_request.py",
    "stack": "",
    "duration": "30.05초"
  },
  {
    "test_name": "test_Bay_order_status_progress_delivery",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-15 16:06:41",
    "file": "tests/test_Bay_order_status_progress_delivery.py",
    "stack": "",
    "duration": "48.03초"
  },
  {
    "test_name": "test_Bay_order_status_progress_complete",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-15 16:06:43",
    "file": "tests/test_Bay_order_status_progress_complete.py",
    "stack": "",
    "duration": "15.02초"
  },
  {
    "test_name": "test_Bay_order_status_delivery",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-15 16:07:10",
    "file": "tests/test_Bay_order_status_delivery.py",
    "stack": "",
    "duration": "26.63초"
  },
  {
    "test_name": "test_Bay_order_status_complete",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-15 16:07:26",
    "file": "tests/test_Bay_order_status_complete.py",
    "stack": "",
    "duration": "16.21초"
  },
  {
    "test_name": "test_Bay_order_status_fail",
    "status": "PASS",
    "message": "테스트 성공",
    "timestamp": "2025-07-15 16:07:40",
    "file": "tests/test_Bay_order_status_fail.py",
    "stack": "",
    "duration": "14.28초"
  }
]