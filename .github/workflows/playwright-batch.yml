name: centurionbay QA Automation Test

on:
  workflow_dispatch: {}          # 수동 실행
  # push: # Main 에 push 할때마다 실행 하는 조건
  #   branches: [ main ]           
  # schedule: # 특정 시간에 자동 실행하는 조건 
    # - cron: "0 16 * * *"

jobs:
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      # Actions secret 에 등록한 내용
      # 스크립트에서 os.getenv로 읽는 건 secret에서 가져와서 별도 설정 필요 없음
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      JIRA_URL: ${{ secrets.JIRA_URL }}
      JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
      JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      JIRA_PROJECT_KEY: BAY
      CONFLUENCE_URL: ${{ secrets.CONFLUENCE_URL }}
      CONFLUENCE_EMAIL: ${{ secrets.CONFLUENCE_EMAIL }}
      CONFLUENCE_API_TOKEN: ${{ secrets.CONFLUENCE_API_TOKEN }}
      CONFLUENCE_SPACE_KEY: CENBAY
      CONFLUENCE_PARENT_PAGE_ID: "123666536"
      PYTHONUNBUFFERED: "1"
      PYTHONPATH: ${{ github.workspace }} # 상대 경로 생성을 위한 추가 (루트 파일 지정)
      TZ: Asia/Seoul
      # CI 환경 플래그
      CI: "true"  
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pytest pytest-json-report pytest-playwright \
                        playwright python-dotenv requests openpyxl
          fi

      - name: Install Playwright browsers & deps (Ubuntu)
        run: |
          python -m playwright install --with-deps
        # 필요 브라우저만 고르려면 예: python -m playwright install chromium

      - name: Run tests via run_test.py
        run: |
          python scripts/run_test.py
        # run_test.py 끝에서 scripts/send_slack.py를 호출하므로 별도 슬랙 스텝 불필요

      - name: Upload artifacts (results & logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: qa-results
          path: |
            test_results.json
            scripts/result.json
            scripts/summary.json
            **/pytest*.log
          if-no-files-found: ignore

      # (선택) 실패해도 Slack 한 번 더. 이미 run_test.py가 보내니 중복이면 제거하세요.
      # - name: Slack fallback on fail
      #   if: failure()
      #   run: python scripts/send_slack.py
