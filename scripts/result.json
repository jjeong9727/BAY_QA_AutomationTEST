{"created": 1744710906.3989127, "duration": 3.778981924057007, "exitcode": 1, "root": "C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\\uc790\ub3d9\ud654", "environment": {}, "summary": {"failed": 1, "total": 1, "collected": 1}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/test_Bay_order_status_fail.py", "type": "Module"}]}, {"nodeid": "tests/test_Bay_order_status_fail.py", "outcome": "passed", "result": [{"nodeid": "tests/test_Bay_order_status_fail.py::test_order_status_fail", "type": "Function", "lineno": 11}]}], "tests": [{"nodeid": "tests/test_Bay_order_status_fail.py::test_order_status_fail", "lineno": 11, "outcome": "failed", "keywords": ["test_order_status_fail", "test_Bay_order_status_fail.py", "tests", "\uc790\ub3d9\ud654", ""], "setup": {"duration": 0.692842099997506, "outcome": "passed"}, "call": {"duration": 2.9245731999981217, "outcome": "failed", "crash": {"path": "C:\\Users\\kjeon\\OneDrive\\Desktop\\QA\\\uc790\ub3d9\ud654\\helpers\\order_status_utils.py", "lineno": 95, "message": "AssertionError: \ubc1c\uc8fc \ub0b4\uc5ed\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4: \ubc1c\uc8fc \uc2e4\ud328, 829"}, "traceback": [{"path": "tests\\test_Bay_order_status_fail.py", "lineno": 44, "message": ""}, {"path": "helpers\\order_status_utils.py", "lineno": 95, "message": "AssertionError"}], "stdout": "\uac80\uc0c9\ub41c \uc81c\ud488\uba85: \ub4f1\ub85d\ud14c\uc2a4\ud2b8_0415_1852_58\n\ucc3e\uc740 order_id: 829\n\uc0c1\ud0dc: \ubc1c\uc8fc \ucde8\uc18c\n\uc8fc\ubb38 ID: 829\n\u274c Error in test_order_status_fail: \ubc1c\uc8fc \ub0b4\uc5ed\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4: \ubc1c\uc8fc \uc2e4\ud328, 829\n", "longrepr": "page = <Page url='https://stg.mbay.app/orders/history?product_name=%EB%93%B1%EB%A1%9D%ED%85%8C%EC%8A%A4%ED%8A%B8_0415_1852_58'>\n\n    def test_order_status_fail(page: Page):\n        status_name = \"\ubc1c\uc8fc \uc2e4\ud328\"\n        expected = order_status_map[status_name]\n    \n        try:\n            # delivery_status == 5\uc778 \uc81c\ud488 \ubaa9\ub85d \ud544\ud130\ub9c1\n            filtered_products = filter_products_by_delivery_status(5)\n            if not filtered_products:\n                raise ValueError(f\"[FAIL] '{status_name}' \uc0c1\ud0dc\uc758 \uc81c\ud488\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n    \n            # \ubb34\uc791\uc704 \uc81c\ud488 \uc120\ud0dd\n            product = random.choice(filtered_products)\n            product_name = product[\"kor\"]\n    \n            # \ub85c\uadf8\uc778 \ubc0f \ud398\uc774\uc9c0 \uc774\ub3d9\n            page.goto(URLS[\"bay_login\"])\n            page.fill(\"data-testid=input_id\", Account[\"testid\"])\n            page.fill(\"data-testid=input_pw\", Account[\"testpw\"])\n            page.click(\"data-testid=btn_login\", timeout=50000)\n            page.wait_for_timeout(1000)\n    \n            page.goto(URLS[\"bay_orderList\"])\n            page.fill(\"data-testid=input_search\", product_name)\n            page.click(\"data-testid=btn_search\")\n            page.wait_for_timeout(1000)\n    \n            # order_id \uac00\uc838\uc624\uae30\n            order_id = get_order_id_from_order_list(page, product_name)\n            if not order_id:\n                raise ValueError(f\"[FAIL] \ubc1c\uc8fc \ub0b4\uc5ed\uc5d0\uc11c \uc81c\ud488 '{product_name}'\uc758 order_id\ub97c \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\")\n    \n            # \uc0c1\ud0dc \ud655\uc778\n>           check_order_status_by_order_id(page, status_name, order_id, expected)\n\ntests\\test_Bay_order_status_fail.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npage = <Page url='https://stg.mbay.app/orders/history?product_name=%EB%93%B1%EB%A1%9D%ED%85%8C%EC%8A%A4%ED%8A%B8_0415_1852_58'>, status_name = '\ubc1c\uc8fc \uc2e4\ud328', order_id = '829', expected = {'cancel_enabled': True, 'receive_enabled': False, 'resend_enabled': True, 'tracking_text': '\ubbf8\uc785\ub825'}\n\n    def check_order_status_by_order_id(page: Page, status_name: str, order_id: str, expected: dict):\n        # \uac01 history \ud56d\ubaa9\uc5d0 \ub300\ud574 \uc0c1\ud0dc\ub97c \ud655\uc778\n        histories = page.locator(\"[data-testid='history']\").all()  # history \uc694\uc18c\ub4e4 \uac00\uc838\uc624\uae30\n        found = False\n    \n        for history in histories:\n            # \uac01 history \ud558\uc704\uc758 \uccab \ubc88\uc9f8 \ud14c\uc774\ube14 \ucc3e\uae30\n            table = history.locator(\"table\")\n            rows = table.locator(\"tbody tr\").all()  # \ud14c\uc774\ube14 \ub0b4 \ubaa8\ub4e0 \ud589 \ucc3e\uae30\n    \n            for row in rows:\n                status = row.locator(\"td\").nth(0).inner_text().strip()  # \uccab \ubc88\uc9f8 \uc5f4\uc758 \uc0c1\ud0dc \ud655\uc778\n                order_data_id = row.locator(\"td[data-testid='order']\").get_attribute('data-orderid')  # \ub450 \ubc88\uc9f8 \uc5f4\uc5d0\uc11c \uc8fc\ubb38 ID \ucc3e\uae30\n    \n                # \ub514\ubc84\uae45 \uba54\uc2dc\uc9c0, \ud544\uc694\uc2dc \uc0ad\uc81c \uac00\ub2a5\n                print(f\"\uc0c1\ud0dc: {status}\")\n                print(f\"\uc8fc\ubb38 ID: {order_data_id}\")\n    \n                if status == status_name and order_data_id == order_id:\n                    found = True\n                    # \uc0c1\ud0dc\ubcc4 \uc870\uac74 \ud655\uc778\n                    for key, value in expected.items():\n                        if key == \"resend_enabled\":\n                            # 'disabled' \uc18d\uc131 \ud655\uc778\n                            resend_button = row.locator(\"[data-testid=btn_resend]\")\n                            disabled = resend_button.get_attribute(\"disabled\")\n                            assert (disabled is None) == value  # 'disabled'\uac00 \uc5c6\uc73c\uba74 \ud65c\uc131\ud654, \uc788\uc73c\uba74 \ube44\ud65c\uc131\ud654\n                        if key == \"tracking_text\":\n                            assert value in row.locator(\"td\").nth(7).inner_text().strip()\n                        if key == \"receive_enabled\":\n                            receive_button = row.locator(\"[data-testid=btn_receive]\")\n                            disabled = receive_button.get_attribute(\"disabled\")\n                            assert (disabled is None) == value\n                        if key == \"cancel_enabled\":\n                            cancel_button = row.locator(\"[data-testid=btn_cancel]\")\n                            disabled = cancel_button.get_attribute(\"disabled\")\n                            assert (disabled is None) == value\n                    break\n    \n            if found:\n                break\n    \n        if not found:\n>           raise AssertionError(f\"\ubc1c\uc8fc \ub0b4\uc5ed\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4: {status_name}, {order_id}\")\nE           AssertionError: \ubc1c\uc8fc \ub0b4\uc5ed\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4: \ubc1c\uc8fc \uc2e4\ud328, 829\n\nhelpers\\order_status_utils.py:95: AssertionError"}, "teardown": {"duration": 0.10476670000207378, "outcome": "passed"}}]}